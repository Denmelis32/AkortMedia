import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../article_detail_page.dart'; // –û–±–Ω–æ–≤–∏—Ç–µ –∏–º–ø–æ—Ä—Ç
import 'models/article.dart';
import 'widgets/article_card.dart';
import 'widgets/add_article_dialog.dart';

class ArticlesPage extends StatefulWidget {
  final String userName;
  final String userEmail;
  final VoidCallback onLogout;

  const ArticlesPage({
    super.key,
    required this.userName,
    required this.userEmail,
    required this.onLogout,
  });

  @override
  State<ArticlesPage> createState() => _ArticlesPageState();
}

class _ArticlesPageState extends State<ArticlesPage> {
  final List<Article> _articles = [
    Article(
      id: '1',
      title: '–¢–∞–∫—Ç–∏–∫–∞ –∏–≥—Ä—ã –ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏',
      description: '–ê–Ω–∞–ª–∏–∑ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ö–µ–º –ü–µ–ø –ì–≤–∞—Ä–¥–∏–æ–ª—ã –≤ —Å–µ–∑–æ–Ω–µ 2024/2025',
      emoji: 'üìä',
      content: '''
# –¢–∞–∫—Ç–∏–∫–∞ –ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏ –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ü–µ–ø –ì–≤–∞—Ä–¥–∏–æ–ª—ã

## –í–≤–µ–¥–µ–Ω–∏–µ
–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Ñ—É—Ç–±–æ–ª–µ –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–æ–≤–∞—Ç–æ—Ä—Å–∫–∏–º —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏—è–º –ü–µ–ø –ì–≤–∞—Ä–¥–∏–æ–ª—ã. –í —Å–µ–∑–æ–Ω–µ 2024/2025 –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

## –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ö–µ–º–∞
–ì–≤–∞—Ä–¥–∏–æ–ª–∞ —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–∏–±–∫—É—é —Å—Ö–µ–º—É 4-3-3, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ 3-2-4-1 –ø—Ä–∏ –∞—Ç–∞–∫–µ. –ó–∞–¥–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∏ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä, –ø–æ–∑–≤–æ–ª—è—è –∫—Ä–∞–π–Ω–∏–º –∑–∞—â–∏—Ç–Ω–∏–∫–∞–º –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è –≤—ã—Å–æ–∫–æ –ø–æ —Ñ–ª–∞–Ω–≥–∞–º.

## –ö–ª—é—á–µ–≤—ã–µ innovations
- **–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∞—Ç–µ—Ä–∞–ª–∏**: –ö–∞–º–≤–∏–Ω –∏ –£–æ–∫–µ—Ä —á–∞—Å—Ç–æ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä –ø–æ–ª—è
- **–õ–æ–∂–Ω–∞—è –¥–µ–≤—è—Ç–∫–∞**: –•–æ–ª–∞–Ω–Ω–¥ –æ—Ç—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –ø–ª–µ–π–º–µ–π–∫–µ—Ä–∞
- **–í—ã—Å–æ–∫–∏–π –ø—Ä–µ—Å—Å–∏–Ω–≥**: –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ—Ç–µ—Ä–∏ –º—è—á–∞

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
–¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≥–∏–±–∫–æ—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º –∫–æ–∑—ã—Ä–µ–º –ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏ –≤ –±–æ—Ä—å–±–µ –∑–∞ —Ç–∏—Ç—É–ª—ã.
''',
      views: 1250,
      likes: 345,
      publishDate: DateTime.now().subtract(const Duration(days: 2)),
      category: '–¢–∞–∫—Ç–∏–∫–∞',
      author: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
      imageUrl: 'https://images.unsplash.com/photo-1596510913920-85d87a1800d2?w=500&h=300&fit=crop',
    ),
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
  ];

  final List<String> _categories = [
    '–¢–∞–∫—Ç–∏–∫–∞',
    '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
    '–ò—Å—Ç–æ—Ä–∏—è',
    '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã',
    '–û–±–∑–æ—Ä—ã –º–∞—Ç—á–µ–π',
    '–ò–Ω—Ç–µ—Ä–≤—å—é'
  ];

  final List<String> _emojis = ['üìä', '‚≠ê', 'üèÜ', '‚öΩ', 'üëë', 'üî•', 'üéØ', 'üí´'];

  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  String _selectedCategory = '–í—Å–µ';

  void _openArticleDetail(Article article) {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => ArticleDetailPage(article: article),
      ),
    );
  }

  void _showAddArticleDialog() {
    showDialog(
      context: context,
      builder: (context) => AddArticleDialog(
        categories: _categories,
        emojis: _emojis,
        onArticleAdded: (newArticle) {
          setState(() {
            _articles.insert(0, newArticle);
          });
        },
        userName: widget.userName,
      ),
    );
  }

  List<Article> get _filteredArticles {
    return _articles.where((article) {
      final matchesSearch = _searchQuery.isEmpty ||
          article.title.toLowerCase().contains(_searchQuery.toLowerCase()) ||
          article.description.toLowerCase().contains(_searchQuery.toLowerCase());

      final matchesCategory = _selectedCategory == '–í—Å–µ' ||
          article.category == _selectedCategory;

      return matchesSearch && matchesCategory;
    }).toList();
  }

  void _showFilterBottomSheet() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        decoration: BoxDecoration(
          color: Theme.of(context).colorScheme.surface,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(24),
            topRight: Radius.circular(24),
          ),
        ),
        padding: EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Center(
              child: Container(
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
            ),
            SizedBox(height: 16),
            Text('–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.w600)),
            SizedBox(height: 20),
            Wrap(
              spacing: 12,
              runSpacing: 12,
              children: [
                _buildCategoryChip('–í—Å–µ'),
                ..._categories.map((category) => _buildCategoryChip(category)),
              ],
            ),
            SizedBox(height: 24),
          ],
        ),
      ),
    );
  }

  Widget _buildCategoryChip(String category) {
    final isSelected = _selectedCategory == category;
    return GestureDetector(
      onTap: () {
        setState(() {
          _selectedCategory = category;
        });
        Navigator.pop(context);
      },
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
        decoration: BoxDecoration(
          color: isSelected
              ? Theme.of(context).colorScheme.primary
              : Theme.of(context).colorScheme.surfaceVariant,
          borderRadius: BorderRadius.circular(20),
          border: Border.all(
            color: isSelected
                ? Theme.of(context).colorScheme.primary
                : Colors.grey[300]!,
            width: 1,
          ),
        ),
        child: Text(
          category,
          style: TextStyle(
            color: isSelected
                ? Colors.white
                : Theme.of(context).colorScheme.onSurfaceVariant,
            fontWeight: FontWeight.w500,
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      floatingActionButton: FloatingActionButton(
        onPressed: _showAddArticleDialog,
        child: Icon(Icons.add, size: 24),
        backgroundColor: Theme.of(context).colorScheme.primary,
        foregroundColor: Colors.white,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        elevation: 4,
        tooltip: '–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é',
      ),
      body: CustomScrollView(
        slivers: [
          SliverAppBar(
            expandedHeight: 180.0,
            floating: false,
            pinned: true,
            flexibleSpace: FlexibleSpaceBar(
              title: Text(
                '–§—É—Ç–±–æ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 20.0,
                  fontWeight: FontWeight.w600,
                  shadows: [
                    Shadow(
                      color: Colors.black.withOpacity(0.3),
                      blurRadius: 4,
                      offset: Offset(0, 2),
                    ),
                  ],
                ),
              ),
              background: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      Color(0xFF007AFF),
                      Color(0xFF5856D6),
                    ],
                  ),
                ),
                child: Padding(
                  padding: const EdgeInsets.only(left: 24, bottom: 20),
                  child: Align(
                    alignment: Alignment.bottomLeft,
                    child: Text(
                      '–ü—Ä–∏–≤–µ—Ç, ${widget.userName}!',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                ),
              ),
            ),
            actions: [
              IconButton(
                icon: Icon(Icons.filter_list_rounded, size: 24),
                onPressed: _showFilterBottomSheet,
                tooltip: '–§–∏–ª—å—Ç—Ä—ã',
              ),
              IconButton(
                icon: Icon(Icons.exit_to_app_rounded, size: 24),
                onPressed: widget.onLogout,
                tooltip: '–í—ã–π—Ç–∏',
              ),
            ],
          ),

          SliverPadding(
            padding: EdgeInsets.all(20),
            sliver: SliverToBoxAdapter(
              child: Container(
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(14),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      blurRadius: 10,
                      offset: Offset(0, 4),
                    ),
                  ],
                ),
                child: TextField(
                  controller: _searchController,
                  decoration: InputDecoration(
                    hintText: '–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π...',
                    prefixIcon: Icon(Icons.search_rounded, size: 22),
                    suffixIcon: _searchQuery.isNotEmpty
                        ? IconButton(
                      icon: Icon(Icons.clear_rounded, size: 22),
                      onPressed: () {
                        setState(() {
                          _searchController.clear();
                          _searchQuery = '';
                        });
                      },
                    )
                        : null,
                    filled: true,
                    fillColor: Theme.of(context).colorScheme.surface,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(14),
                      borderSide: BorderSide.none,
                    ),
                    contentPadding: EdgeInsets.symmetric(vertical: 16, horizontal: 20),
                  ),
                  onChanged: (value) {
                    setState(() {
                      _searchQuery = value;
                    });
                  },
                ),
              ),
            ),
          ),

          SliverToBoxAdapter(
            child: Padding(
              padding: EdgeInsets.symmetric(horizontal: 20, vertical: 8),
              child: Wrap(
                spacing: 8,
                runSpacing: 8,
                children: [
                  if (_selectedCategory != '–í—Å–µ')
                    Container(
                      padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                      decoration: BoxDecoration(
                        color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(
                          color: Theme.of(context).colorScheme.primary.withOpacity(0.3),
                          width: 1,
                        ),
                      ),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(
                            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ',
                            style: TextStyle(
                              fontSize: 12,
                              color: Theme.of(context).colorScheme.onSurfaceVariant,
                            ),
                          ),
                          Text(
                            _selectedCategory,
                            style: TextStyle(
                              fontSize: 12,
                              fontWeight: FontWeight.w600,
                              color: Theme.of(context).colorScheme.primary,
                            ),
                          ),
                          SizedBox(width: 4),
                          GestureDetector(
                            onTap: () {
                              setState(() {
                                _selectedCategory = '–í—Å–µ';
                              });
                            },
                            child: Icon(Icons.close_rounded, size: 14),
                          ),
                        ],
                      ),
                    ),
                  if (_searchQuery.isNotEmpty)
                    Container(
                      padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                      decoration: BoxDecoration(
                        color: Colors.green.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(
                          color: Colors.green.withOpacity(0.3),
                          width: 1,
                        ),
                      ),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(
                            '–ü–æ–∏—Å–∫: ',
                            style: TextStyle(
                              fontSize: 12,
                              color: Theme.of(context).colorScheme.onSurfaceVariant,
                            ),
                          ),
                          Text(
                            '"$_searchQuery"',
                            style: TextStyle(
                              fontSize: 12,
                              fontWeight: FontWeight.w600,
                              color: Colors.green[700],
                            ),
                          ),
                          SizedBox(width: 4),
                          GestureDetector(
                            onTap: () {
                              setState(() {
                                _searchController.clear();
                                _searchQuery = '';
                              });
                            },
                            child: Icon(Icons.close_rounded, size: 14),
                          ),
                        ],
                      ),
                    ),
                ],
              ),
            ),
          ),

          _filteredArticles.isEmpty
              ? SliverFillRemaining(
            child: Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.article_rounded, size: 64, color: Colors.grey[400]),
                  SizedBox(height: 20),
                  Text(
                    '–°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.w500,
                      color: Colors.grey[600],
                    ),
                  ),
                  SizedBox(height: 8),
                  Text(
                    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞',
                    style: TextStyle(
                      color: Colors.grey[500],
                    ),
                  ),
                ],
              ),
            ),
          )
              : SliverPadding(
            padding: EdgeInsets.all(16),
            sliver: SliverGrid(
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
                childAspectRatio: 0.7,
              ),
              delegate: SliverChildBuilderDelegate(
                    (context, index) {
                  final article = _filteredArticles[index];
                  return ArticleCard(
                    article: article,
                    onTap: () => _openArticleDetail(article),
                  );
                },
                childCount: _filteredArticles.length,
              ),
            ),
          ),
        ],
      ),
    );
  }
}