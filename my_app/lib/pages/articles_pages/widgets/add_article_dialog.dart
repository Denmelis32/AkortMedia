import 'package:flutter/material.dart';
import '../models/article.dart';
import 'article_card.dart';

class AddArticleDialog extends StatefulWidget {
  final List<String> categories;
  final List<String> emojis;
  final Function(Article) onArticleAdded;
  final String userName;

  const AddArticleDialog({
    super.key,
    required this.categories,
    required this.emojis,
    required this.onArticleAdded,
    required this.userName,
  });

  @override
  State<AddArticleDialog> createState() => _AddArticleDialogState();
}

class _AddArticleDialogState extends State<AddArticleDialog> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _contentController = TextEditingController();
  final TextEditingController _imageUrlController = TextEditingController();

  String _selectedCategory = '–¢–∞–∫—Ç–∏–∫–∞';
  String _selectedEmoji = 'üìä';
  AuthorLevel _selectedAuthorLevel = AuthorLevel.beginner; // –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
  int _charCount = 0;

  @override
  void initState() {
    super.initState();
    // –£—Å—Ç–∞–Ω–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    _imageUrlController.text = 'https://images.unsplash.com/photo-1552667466-07770ae110d0?w=500&h=300&fit=crop';

    // –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (widget.categories.isNotEmpty) {
      _selectedCategory = widget.categories.first;
    }
  }

  // –¶–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –∞–≤—Ç–æ—Ä–æ–≤
  Color _getLevelColor(AuthorLevel level) {
    return level == AuthorLevel.expert
        ? const Color(0xFF4FC3F7) // –ë—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤—ã–π —Å–∏–Ω–∏–π
        : const Color(0xFFB0BEC5); // –°–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π
  }

  // –ò–∫–æ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è –∞–≤—Ç–æ—Ä–∞
  IconData _getLevelIcon(AuthorLevel level) {
    return level == AuthorLevel.expert
        ? Icons.diamond_rounded
        : Icons.auto_awesome_rounded;
  }

  // –¢–µ–∫—Å—Ç —É—Ä–æ–≤–Ω—è –∞–≤—Ç–æ—Ä–∞
  String _getLevelText(AuthorLevel level) {
    return level == AuthorLevel.expert
        ? '–≠–ö–°–ü–ï–†–¢'
        : '–ù–û–í–ò–ß–û–ö';
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      insetPadding: const EdgeInsets.all(20),
      backgroundColor: Colors.transparent,
      child: SingleChildScrollView(
        child: Container(
          decoration: BoxDecoration(
            color: Theme.of(context).colorScheme.surface,
            borderRadius: BorderRadius.circular(24),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.2),
                blurRadius: 30,
                offset: const Offset(0, 10),
              ),
            ],
          ),
          child: Padding(
            padding: const EdgeInsets.all(24),
            child: Form(
              key: _formKey,
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Center(
                    child: Container(
                      width: 40,
                      height: 4,
                      decoration: BoxDecoration(
                        color: Colors.grey[300],
                        borderRadius: BorderRadius.circular(2),
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  Text(
                    '–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è',
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.w700,
                      color: Theme.of(context).colorScheme.onSurface,
                    ),
                  ),
                  const SizedBox(height: 20),

                  // –£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ—Ä–∞ (–Ω–æ–≤—ã–π –≤—ã–±–æ—Ä)
                  Text(
                    '–£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ—Ä–∞',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: Theme.of(context).colorScheme.onSurface,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      // –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤–∏—á–æ–∫"
                      Expanded(
                        child: GestureDetector(
                          onTap: () {
                            setState(() {
                              _selectedAuthorLevel = AuthorLevel.beginner;
                            });
                          },
                          child: Container(
                            padding: const EdgeInsets.all(12),
                            decoration: BoxDecoration(
                              color: _selectedAuthorLevel == AuthorLevel.beginner
                                  ? _getLevelColor(AuthorLevel.beginner).withOpacity(0.2)
                                  : Colors.grey.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                color: _selectedAuthorLevel == AuthorLevel.beginner
                                    ? _getLevelColor(AuthorLevel.beginner)
                                    : Colors.transparent,
                                width: 2,
                              ),
                            ),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(
                                  _getLevelIcon(AuthorLevel.beginner),
                                  size: 18,
                                  color: _getLevelColor(AuthorLevel.beginner),
                                ),
                                const SizedBox(width: 8),
                                Text(
                                  _getLevelText(AuthorLevel.beginner),
                                  style: TextStyle(
                                    fontSize: 14,
                                    fontWeight: FontWeight.w600,
                                    color: _getLevelColor(AuthorLevel.beginner),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(width: 12),
                      // –ö–Ω–æ–ø–∫–∞ "–≠–∫—Å–ø–µ—Ä—Ç"
                      Expanded(
                        child: GestureDetector(
                          onTap: () {
                            setState(() {
                              _selectedAuthorLevel = AuthorLevel.expert;
                            });
                          },
                          child: Container(
                            padding: const EdgeInsets.all(12),
                            decoration: BoxDecoration(
                              color: _selectedAuthorLevel == AuthorLevel.expert
                                  ? _getLevelColor(AuthorLevel.expert).withOpacity(0.2)
                                  : Colors.grey.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                color: _selectedAuthorLevel == AuthorLevel.expert
                                    ? _getLevelColor(AuthorLevel.expert)
                                    : Colors.transparent,
                                width: 2,
                              ),
                            ),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(
                                  _getLevelIcon(AuthorLevel.expert),
                                  size: 18,
                                  color: _getLevelColor(AuthorLevel.expert),
                                ),
                                const SizedBox(width: 8),
                                Text(
                                  _getLevelText(AuthorLevel.expert),
                                  style: TextStyle(
                                    fontSize: 14,
                                    fontWeight: FontWeight.w600,
                                    color: _getLevelColor(AuthorLevel.expert),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 20),

                  // –≠–º–æ–¥–∑–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                  Row(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.grey.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(16),
                        ),
                        child: DropdownButton<String>(
                          value: _selectedEmoji,
                          items: widget.emojis.map((emoji) {
                            return DropdownMenuItem(
                              value: emoji,
                              child: Text(emoji, style: const TextStyle(fontSize: 24)),
                            );
                          }).toList(),
                          onChanged: (value) {
                            setState(() {
                              _selectedEmoji = value!;
                            });
                          },
                          underline: Container(),
                          icon: const Icon(Icons.arrow_drop_down_rounded),
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Container(
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(16),
                            border: Border.all(
                              color: Colors.grey.withOpacity(0.3),
                              width: 1,
                            ),
                          ),
                          child: Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 16),
                            child: DropdownButtonFormField<String>(
                              value: _selectedCategory,
                              items: widget.categories.map((category) {
                                return DropdownMenuItem(
                                  value: category,
                                  child: Text(
                                    category,
                                    style: const TextStyle(fontSize: 16),
                                  ),
                                );
                              }).toList(),
                              onChanged: (value) {
                                setState(() {
                                  _selectedCategory = value!;
                                });
                              },
                              decoration: const InputDecoration(
                                border: InputBorder.none,
                                labelText: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                              ),
                              style: const TextStyle(fontSize: 16),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 20),

                  // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                  TextFormField(
                    controller: _imageUrlController,
                    decoration: InputDecoration(
                      labelText: 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(
                          color: Colors.grey.withOpacity(0.3),
                          width: 1,
                        ),
                      ),
                      contentPadding: const EdgeInsets.all(16),
                    ),
                    style: const TextStyle(fontSize: 16),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return '–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';
                      }
                      if (!value.startsWith('http')) {
                        return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 16),

                  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                  TextFormField(
                    controller: _titleController,
                    decoration: InputDecoration(
                      labelText: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(
                          color: Colors.grey.withOpacity(0.3),
                          width: 1,
                        ),
                      ),
                      contentPadding: const EdgeInsets.all(16),
                    ),
                    style: const TextStyle(fontSize: 16),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏';
                      }
                      if (value.length < 10) {
                        return '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 16),

                  // –û–ø–∏—Å–∞–Ω–∏–µ
                  TextFormField(
                    controller: _descriptionController,
                    decoration: InputDecoration(
                      labelText: '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(
                          color: Colors.grey.withOpacity(0.3),
                          width: 1,
                        ),
                      ),
                      contentPadding: const EdgeInsets.all(16),
                    ),
                    maxLines: 2,
                    style: const TextStyle(fontSize: 16),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏';
                      }
                      if (value.length < 20) {
                        return '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 16),

                  // –ö–æ–Ω—Ç–µ–Ω—Ç
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      TextFormField(
                        controller: _contentController,
                        decoration: InputDecoration(
                          labelText: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: BorderSide(
                              color: Colors.grey.withOpacity(0.3),
                              width: 1,
                            ),
                          ),
                          contentPadding: const EdgeInsets.all(16),
                        ),
                        maxLines: 6,
                        style: const TextStyle(fontSize: 16),
                        onChanged: (value) {
                          setState(() {
                            _charCount = value.length;
                          });
                        },
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return '–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏';
                          }
                          if (value.length < 100) {
                            return '–°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤';
                          }
                          return null;
                        },
                      ),
                      const SizedBox(height: 8),
                      Row(
                        children: [
                          Expanded(
                            child: LinearProgressIndicator(
                              value: _charCount / 100,
                              backgroundColor: Colors.grey[300],
                              color: _charCount >= 100
                                  ? Colors.green
                                  : Theme.of(context).colorScheme.primary,
                              borderRadius: BorderRadius.circular(2),
                            ),
                          ),
                          const SizedBox(width: 12),
                          Text(
                            '$_charCount/100',
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.grey[600],
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 4),
                      Text(
                        '–ú–∏–Ω–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤',
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.grey[600],
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),

                  // –ö–Ω–æ–ø–∫–∏
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      TextButton(
                        onPressed: () => Navigator.pop(context),
                        style: TextButton.styleFrom(
                          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                        ),
                        child: const Text('–û—Ç–º–µ–Ω–∞'),
                      ),
                      const SizedBox(width: 12),
                      ElevatedButton(
                        onPressed: () {
                          if (_formKey.currentState!.validate()) {
                            final newArticle = Article(
                              id: DateTime.now().millisecondsSinceEpoch.toString(),
                              title: _titleController.text,
                              description: _descriptionController.text,
                              emoji: _selectedEmoji,
                              content: _contentController.text,
                              views: 0,
                              likes: 0,
                              publishDate: DateTime.now(),
                              category: _selectedCategory,
                              author: widget.userName,
                              imageUrl: _imageUrlController.text,
                              authorLevel: _selectedAuthorLevel,  // –î–æ–±–∞–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ—Ä–∞
                            );

                            widget.onArticleAdded(newArticle);
                            Navigator.pop(context);

                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: const Text('–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!'),
                                backgroundColor: Colors.green,
                                behavior: SnackBarBehavior.floating,
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(12),
                                ),
                              ),
                            );
                          }
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Theme.of(context).colorScheme.primary,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        child: const Text('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _contentController.dispose();
    _imageUrlController.dispose();
    super.dispose();
  }
}