// models/channel.dart
import 'dart:ui' show Color;

import 'package:flutter/material.dart';

class Channel {
  final int id;
  final String title;
  late final String description;
  final String imageUrl;
  final int subscribers;
  final int videos;
  final bool isSubscribed;
  final bool isFavorite;
  final Color cardColor;
  final String categoryId;
  final DateTime createdAt;
  final bool isVerified;
  final double rating;
  final int views;
  final int likes;
  final int comments;
  final String owner;
  final List<String> tags;
  final bool isLive;
  final int liveViewers;
  final String websiteUrl;
  final String socialMedia;
  final String author;
  final String authorImageUrl;
  final int commentsCount;
  final bool isPinned;
  final String? coverImageUrl;

  Channel({
    required this.id,
    required this.title,
    required this.description,
    required this.imageUrl,
    required this.subscribers,
    required this.videos,
    required this.isSubscribed,
    required this.isFavorite,
    required this.cardColor,
    required this.categoryId,
    required this.createdAt,
    required this.isVerified,
    required this.rating,
    required this.author,
    required this.authorImageUrl,
    required this.commentsCount,
    required this.likes,
    this.views = 0,
    this.comments = 0,
    this.owner = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä',
    this.tags = const [],
    this.isLive = false,
    this.liveViewers = 0,
    this.websiteUrl = '',
    this.socialMedia = '',
    this.isPinned = false,
    this.coverImageUrl,
  });

  Channel copyWith({
    int? id,
    String? coverImageUrl,
    String? title,
    String? description,
    String? imageUrl,
    int? subscribers,
    int? videos,
    bool? isSubscribed,
    bool? isFavorite,
    Color? cardColor,
    String? categoryId,
    DateTime? createdAt,
    bool? isVerified,
    double? rating,
    int? views,
    int? likes,
    int? comments,
    String? owner,
    List<String>? tags,
    bool? isLive,
    int? liveViewers,
    String? websiteUrl,
    String? socialMedia,
    String? author,
    String? authorImageUrl,
    int? commentsCount,
    bool? isPinned,
  }) {
    return Channel(
      id: id ?? this.id,
      title: title ?? this.title,
      description: description ?? this.description,
      imageUrl: imageUrl ?? this.imageUrl,
      subscribers: subscribers ?? this.subscribers,
      videos: videos ?? this.videos,
      isSubscribed: isSubscribed ?? this.isSubscribed,
      isFavorite: isFavorite ?? this.isFavorite,
      cardColor: cardColor ?? this.cardColor,
      categoryId: categoryId ?? this.categoryId,
      createdAt: createdAt ?? this.createdAt,
      isVerified: isVerified ?? this.isVerified,
      rating: rating ?? this.rating,
      views: views ?? this.views,
      likes: likes ?? this.likes,
      comments: comments ?? this.comments,
      owner: owner ?? this.owner,
      tags: tags ?? this.tags,
      isLive: isLive ?? this.isLive,
      liveViewers: liveViewers ?? this.liveViewers,
      websiteUrl: websiteUrl ?? this.websiteUrl,
      socialMedia: socialMedia ?? this.socialMedia,
      author: author ?? this.author,
      authorImageUrl: authorImageUrl ?? this.authorImageUrl,
      commentsCount: commentsCount ?? this.commentsCount,
      isPinned: isPinned ?? this.isPinned,
      coverImageUrl: coverImageUrl ?? this.coverImageUrl,
    );
  }

  // üÜï –ú–ï–¢–û–î –î–õ–Ø –ü–û–ò–°–ö–ê –ö–ê–ù–ê–õ–ê –ü–û ID –í –°–ü–ò–°–ö–ï
  static Channel? findById(List<Channel> channels, String channelId) {
    try {
      final id = int.tryParse(channelId);
      if (id == null) return null;

      return channels.firstWhere(
            (channel) => channel.id == id,
        orElse: () => Channel.simple(
          id: 0,
          title: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª',
          description: '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
          imageUrl: 'assets/images/ava_news/ava1.png',
          cardColor: Colors.grey,
        ),
      );
    } catch (e) {
      print('‚ùå Error finding channel by ID: $e');
      return null;
    }
  }

  // üÜï –§–ê–ë–†–ò–ß–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ö–ê–ù–ê–õ–ê –ò–ó –î–ê–ù–ù–´–• –ü–û–°–¢–ê
  factory Channel.fromPostData(Map<String, dynamic> post) {
    final channelId = int.tryParse(post['channel_id']?.toString() ?? '0') ?? 0;
    final channelName = post['channel_name']?.toString() ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª';
    final channelAvatar = post['channel_avatar']?.toString() ?? '';
    final channelDescription = post['channel_description']?.toString() ?? '–ö–∞–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç';

    // –î–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
    final isRepost = post['is_repost'] == true || post['is_repost'] == 'true';
    final isOriginalChannelPost = post['is_original_channel_post'] == true || post['is_original_channel_post'] == 'true';

    String finalChannelId;
    String finalChannelName;
    String finalChannelAvatar;
    String finalDescription;

    if (isRepost && isOriginalChannelPost) {
      // –î–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      finalChannelId = post['original_channel_id']?.toString() ?? channelId.toString();
      finalChannelName = post['original_channel_name']?.toString() ?? channelName;
      finalChannelAvatar = post['original_channel_avatar']?.toString() ?? channelAvatar;
      finalDescription = '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª —Ä–µ–ø–æ—Å—Ç–∞';
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
      finalChannelId = channelId.toString();
      finalChannelName = channelName;
      finalChannelAvatar = channelAvatar;
      finalDescription = channelDescription;
    }

    final finalId = int.tryParse(finalChannelId) ?? 0;

    return Channel.simple(
      id: finalId,
      title: finalChannelName,
      description: finalDescription,
      imageUrl: finalChannelAvatar.isNotEmpty ? finalChannelAvatar : _getFallbackAvatarForChannel(finalChannelName),
      cardColor: _getColorFromName(finalChannelName),
      author: finalChannelName,
      authorImageUrl: finalChannelAvatar,
      subscribers: (post['channel_subscribers'] as int?) ?? 1000,
      videos: (post['channel_videos'] as int?) ?? 50,
      rating: (post['channel_rating'] as double?) ?? 4.5,
      isSubscribed: post['is_channel_subscribed'] == true || post['is_channel_subscribed'] == 'true',
    );
  }

  // üÜï –ü–û–õ–£–ß–ï–ù–ò–ï FALLBACK –ê–í–ê–¢–ê–†–ö–ò –î–õ–Ø –ö–ê–ù–ê–õ–ê
  static String _getFallbackAvatarForChannel(String channelName) {
    final channelAvatars = [
      'assets/images/ava_news/ava16.png',
      'assets/images/ava_news/ava17.png',
      'assets/images/ava_news/ava18.png',
      'assets/images/ava_news/ava19.png',
      'assets/images/ava_news/ava20.png',
      'assets/images/ava_news/ava21.png',
      'assets/images/ava_news/ava22.png',
      'assets/images/ava_news/ava23.png',
    ];

    final index = channelName.hashCode.abs() % channelAvatars.length;
    return channelAvatars[index];
  }

  // üÜï –ü–û–õ–£–ß–ï–ù–ò–ï –¶–í–ï–¢–ê –î–õ–Ø –ö–ê–ù–ê–õ–ê –ü–û –ò–ú–ï–ù–ò
  static Color _getColorFromName(String name) {
    final colors = [
      Colors.blue.shade700,
      Colors.green.shade700,
      Colors.orange.shade700,
      Colors.purple.shade700,
      Colors.teal.shade700,
      Colors.pink.shade700,
      Colors.red.shade700,
      Colors.indigo.shade700,
    ];

    final index = name.hashCode.abs() % colors.length;
    return colors[index];
  }

  // üÜï –ü–†–û–í–ï–†–ö–ê, –Ø–í–õ–Ø–ï–¢–°–Ø –õ–ò –ü–û–°–¢ –ö–ê–ù–ê–õ–¨–ù–´–ú
  static bool isChannelPost(Map<String, dynamic> post) {
    final isChannelPost = post['is_channel_post'] == true || post['is_channel_post'] == 'true';
    final hasChannelId = post['channel_id'] != null && post['channel_id'].toString().isNotEmpty;
    final hasChannelName = post['channel_name'] != null && post['channel_name'].toString().isNotEmpty;

    return isChannelPost || hasChannelId || hasChannelName;
  }

  // üÜï –ü–û–õ–£–ß–ï–ù–ò–ï ID –ö–ê–ù–ê–õ–ê –ò–ó –ü–û–°–¢–ê (–° –£–ß–ï–¢–û–ú –†–ï–ü–û–°–¢–û–í)
  static String getChannelIdFromPost(Map<String, dynamic> post) {
    final isRepost = post['is_repost'] == true || post['is_repost'] == 'true';
    final isOriginalChannelPost = post['is_original_channel_post'] == true || post['is_original_channel_post'] == 'true';

    if (isRepost && isOriginalChannelPost) {
      // –î–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
      return post['original_channel_id']?.toString() ?? '';
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID –∫–∞–Ω–∞–ª–∞
      return post['channel_id']?.toString() ?? '';
    }
  }

  // üÜï –ü–û–õ–£–ß–ï–ù–ò–ï –ù–ê–ó–í–ê–ù–ò–Ø –ö–ê–ù–ê–õ–ê –ò–ó –ü–û–°–¢–ê (–° –£–ß–ï–¢–û–ú –†–ï–ü–û–°–¢–û–í)
  static String getChannelNameFromPost(Map<String, dynamic> post) {
    final isRepost = post['is_repost'] == true || post['is_repost'] == 'true';
    final isOriginalChannelPost = post['is_original_channel_post'] == true || post['is_original_channel_post'] == 'true';

    if (isRepost && isOriginalChannelPost) {
      // –î–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
      return post['original_channel_name']?.toString() ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª';
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
      return post['channel_name']?.toString() ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª';
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è engagement rate
  double get engagementRate {
    if (subscribers == 0) return 0.0;
    return ((likes + comments) / subscribers) * 100;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª –ø–æ–ø—É–ª—è—Ä–Ω—ã–º
  bool get isPopular => subscribers > 10000;

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
  Duration get age => DateTime.now().difference(createdAt);

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
  String get formattedAge {
    final years = age.inDays ~/ 365;
    final months = (age.inDays % 365) ~/ 30;

    if (years > 0) {
      return '$years ${_getRussianWord(years, ['–≥–æ–¥', '–≥–æ–¥–∞', '–ª–µ—Ç'])}';
    } else if (months > 0) {
      return '$months ${_getRussianWord(months, ['–º–µ—Å—è—Ü', '–º–µ—Å—è—Ü–∞', '–º–µ—Å—è—Ü–µ–≤'])}';
    } else {
      return '${age.inDays} ${_getRussianWord(age.inDays, ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'])}';
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤
  String _getRussianWord(int number, List<String> words) {
    if (number % 10 == 1 && number % 100 != 11) {
      return words[0];
    } else if (number % 10 >= 2 && number % 10 <= 4 && (number % 100 < 10 || number % 100 >= 20)) {
      return words[1];
    } else {
      return words[2];
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  String get formattedSubscribers {
    if (subscribers >= 1000000) {
      return '${(subscribers / 1000000).toStringAsFixed(1)}M';
    } else if (subscribers >= 1000) {
      return '${(subscribers / 1000).toStringAsFixed(1)}K';
    }
    return subscribers.toString();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
  String get formattedViews {
    if (views >= 1000000) {
      return '${(views / 1000000).toStringAsFixed(1)}M –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤';
    } else if (views >= 1000) {
      return '${(views / 1000).toStringAsFixed(1)}K –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤';
    }
    return '$views –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤';
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –≤ hex
  String get colorHex {
    return '#${cardColor.value.toRadixString(16).substring(2, 8)}';
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
  bool get isActive => videos > 0 && createdAt.isAfter(
      DateTime.now().subtract(const Duration(days: 30))
  );

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  String get categoryName {
    const categoryMap = {
      'youtube': 'YouTube',
      'business': '–ë–∏–∑–Ω–µ—Å',
      'games': '–ò–≥—Ä—ã',
      'programming': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
      'sport': '–°–ø–æ—Ä—Ç',
      'communication': '–û–±—â–µ–Ω–∏–µ',
      'all': '–í—Å–µ',
      'psychology': '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è',
      'tech': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
      'art': '–ò—Å–∫—É—Å—Å—Ç–≤–æ',
      'general': '–û–±—â–µ–µ',
    };
    return categoryMap[categoryId] ?? categoryId;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
  String get formattedCreatedAt {
    return '${createdAt.day}.${createdAt.month}.${createdAt.year}';
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª –Ω–æ–≤—ã–º (—Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–µ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
  bool get isNew => age.inDays < 7;

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ Map (–¥–ª—è Firebase –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ë–î)
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'imageUrl': imageUrl,
      'subscribers': subscribers,
      'videos': videos,
      'isSubscribed': isSubscribed,
      'isFavorite': isFavorite,
      'cardColor': cardColor.value,
      'categoryId': categoryId,
      'createdAt': createdAt.millisecondsSinceEpoch,
      'isVerified': isVerified,
      'rating': rating,
      'views': views,
      'likes': likes,
      'comments': comments,
      'owner': owner,
      'tags': tags,
      'isLive': isLive,
      'liveViewers': liveViewers,
      'websiteUrl': websiteUrl,
      'socialMedia': socialMedia,
      'author': author,
      'authorImageUrl': authorImageUrl,
      'commentsCount': commentsCount,
      'isPinned': isPinned,
      'coverImageUrl': coverImageUrl,
    };
  }

  // –§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ Map
  factory Channel.fromMap(Map<String, dynamic> map) {
    return Channel(
      id: map['id'],
      title: map['title'],
      description: map['description'],
      imageUrl: map['imageUrl'],
      subscribers: map['subscribers'],
      videos: map['videos'],
      isSubscribed: map['isSubscribed'],
      isFavorite: map['isFavorite'] ?? false,
      cardColor: Color(map['cardColor']),
      categoryId: map['categoryId'],
      createdAt: DateTime.fromMillisecondsSinceEpoch(map['createdAt']),
      isVerified: map['isVerified'],
      rating: map['rating'].toDouble(),
      views: map['views'] ?? 0,
      likes: map['likes'] ?? 0,
      comments: map['comments'] ?? 0,
      owner: map['owner'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä',
      tags: List<String>.from(map['tags'] ?? []),
      isLive: map['isLive'] ?? false,
      liveViewers: map['liveViewers'] ?? 0,
      websiteUrl: map['websiteUrl'] ?? '',
      socialMedia: map['socialMedia'] ?? '',
      author: map['author'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä',
      authorImageUrl: map['authorImageUrl'] ?? '',
      commentsCount: map['commentsCount'] ?? 0,
      isPinned: map['isPinned'] ?? false,
      coverImageUrl: map['coverImageUrl'],
    );
  }

  // –§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
  factory Channel.simple({
    required int id,
    required String title,
    required String description,
    required String imageUrl,
    required Color cardColor,
    int subscribers = 0,
    int videos = 0,
    double rating = 0.0,
    bool isSubscribed = false,
    bool isFavorite = false,
    String author = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä',
    String authorImageUrl = '',
    int commentsCount = 0,
    int likes = 0,
    String categoryId = 'general',
    bool isVerified = false,
  }) {
    return Channel(
      id: id,
      title: title,
      description: description,
      imageUrl: imageUrl,
      subscribers: subscribers,
      videos: videos,
      isSubscribed: isSubscribed,
      isFavorite: isFavorite,
      cardColor: cardColor,
      categoryId: categoryId,
      createdAt: DateTime.now(),
      isVerified: isVerified,
      rating: rating,
      author: author,
      authorImageUrl: authorImageUrl,
      commentsCount: commentsCount,
      likes: likes,
      views: 0,
      comments: 0,
    );
  }

  @override
  String toString() {
    return 'Channel{id: $id, title: $title, subscribers: $subscribers, isSubscribed: $isSubscribed, isFavorite: $isFavorite, rating: $rating, isVerified: $isVerified, isPinned: $isPinned}';
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
          other is Channel &&
              runtimeType == other.runtimeType &&
              id == other.id;

  @override
  int get hashCode => id.hashCode;

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
  int compareByDate(Channel other) => createdAt.compareTo(other.createdAt);

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
  int compareByPopularity(Channel other) => subscribers.compareTo(other.subscribers);

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
  int compareByRating(Channel other) => rating.compareTo(other.rating);

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ (–¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
  int compareByVideos(Channel other) => videos.compareTo(other.videos);
}