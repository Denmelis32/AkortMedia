import 'dart:async';
import 'dart:math';

import '../models/chat_message.dart';
import '../models/chat_room.dart';
import '../models/chat_user.dart';
import '../models/message_status.dart';
import '../models/pagination_response.dart';
import '../models/reaction.dart';
import 'chat_api_service.dart';

class AdvancedMockChatService implements ChatApiService {
  final List<ChatMessage> _mockMessages = [];
  final List<ChatUser> _mockUsers = [];
  final Map<String, Timer> _typingTimers = {};
  final Random _random = Random();

  // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  late ChatUser _currentUser;

  // –î–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
  final Set<String> _typingUsers = {};
  final StreamController<List<String>> _typingStreamController =
  StreamController<List<String>>.broadcast();

  // –î–ª—è –ø–æ—Ç–æ–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  final StreamController<ChatMessage> _messageStreamController =
  StreamController<ChatMessage>.broadcast();

  @override
  final Duration timeout = const Duration(seconds: 30);

  AdvancedMockChatService() {
    _initializeMockData();
    _startSimulatedActivity();
  }

  void _initializeMockData() {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    _currentUser = ChatUser(
      id: 'current-user',
      name: '–í—ã',
      avatarUrl: 'https://i.pravatar.cc/150?img=5',
      isOnline: true,
    );

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    _mockUsers.addAll([
      ChatUser(
        id: 'user1',
        name: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
        avatarUrl: 'https://i.pravatar.cc/150?img=1',
        isOnline: true,
      ),
      ChatUser(
        id: 'user2',
        name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        avatarUrl: 'https://i.pravatar.cc/150?img=2',
        isOnline: false,
      ),
      ChatUser(
        id: 'user3',
        name: '–î–º–∏—Ç—Ä–∏–π –°–∏–¥–æ—Ä–æ–≤',
        avatarUrl: 'https://i.pravatar.cc/150?img=3',
        isOnline: true,
      ),
    ]);

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    final now = DateTime.now();

    _mockMessages.addAll([
      ChatMessage(
        id: '1',
        text: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ —É—Å–ø–µ—Ö–∏ —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π?',
        author: _mockUsers[0],
        timestamp: now.subtract(const Duration(hours: 3)),
        status: MessageStatus.read,
      ),
      ChatMessage(
        id: '2',
        text: '–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ó–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –º–æ–¥—É–ª–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        author: _mockUsers[1],
        timestamp: now.subtract(const Duration(hours: 2, minutes: 45)),
        status: MessageStatus.read,
      ),
      ChatMessage(
        id: '3',
        text: '–û—Ç–ª–∏—á–Ω–æ! –£ –º–µ–Ω—è —Ç–æ–∂–µ —Ö–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å. UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤—ã',
        author: _currentUser,
        timestamp: now.subtract(const Duration(hours: 2, minutes: 30)),
        status: MessageStatus.read,
      ),
    ]);
  }

  void _startSimulatedActivity() {
    void scheduleNext() {
      // –°–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 10 –¥–æ 15 —Å–µ–∫—É–Ω–¥
      final nextDelay = Duration(seconds: 10 + _random.nextInt(6));
      Timer(nextDelay, () {
        // 75% —à–∞–Ω—Å –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (_random.nextDouble() < 0.75) {
          _simulateTypingThenMessage();
        } else {
          scheduleNext(); // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        }
      });
    }

    scheduleNext(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª
  }

  void _simulateTypingThenMessage() {
    final randomUser = _mockUsers[_random.nextInt(_mockUsers.length)];

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    _showTypingIndicator(randomUser);

    // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    Timer(const Duration(seconds: 5), () {
      _hideTypingIndicator(randomUser);
      _sendIncomingMessage(randomUser);
    });

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 6 —Å–µ–∫—É–Ω–¥ (–ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è)
    Timer(const Duration(seconds: 6), () {
      _startSimulatedActivity();
    });
  }

  void _showTypingIndicator(ChatUser user) {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–µ—á–∞—Ç–∞—é—â–∏—Ö
    if (!_typingUsers.contains(user.id)) {
      _typingUsers.add(user.id);
      _notifyTypingUpdate();
    }
  }

  void _hideTypingIndicator(ChatUser user) {
    // –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–µ—á–∞—Ç–∞—é—â–∏—Ö
    if (_typingUsers.contains(user.id)) {
      _typingUsers.remove(user.id);
      _notifyTypingUpdate();
    }
  }

  void _sendIncomingMessage(ChatUser user) {
    final responses = [
      '–¢–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º!',
      '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é',
      '–ú–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞?',
      '–ü—Ä–æ–≤–µ—Ä–∏–ª –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º —Å—Ç–µ–Ω–¥–µ - –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ üéâ',
      '–ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é UX',
      '–ö—Ç–æ-—Ç–æ —É–∂–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª —ç—Ç–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö?',
      '–ù–∞—à—ë–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é',
      '–ó–∞–≤—Ç—Ä–∞ –ø–ª–∞–Ω–∏—Ä—É—é —Ä–µ–ª–∏–∑ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏',
      '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –¥–µ–ø–ª–æ–µ–º? –ú–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è',
      '–û—Ç–ª–∏—á–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç—Å—è! –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
      '–ê —á—Ç–æ –µ—Å–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥?',
      '–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º üëç',
      '–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ API? –ú–æ–≥—É –ø–æ–º–æ—á—å',
      '–ü–æ—Å–º–æ—Ç—Ä–µ–ª –ª–æ–≥–∏ - –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ',
      '–ú–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º–Ω—É—é —Ç–µ–º—É? üëÄ',
    ];

    final newMessage = ChatMessage(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      text: responses[_random.nextInt(responses.length)],
      author: user,
      timestamp: DateTime.now(),
      status: MessageStatus.delivered,
    );

    _mockMessages.add(newMessage);
    _messageStreamController.add(newMessage);

    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ 2-4 —Å–µ–∫—É–Ω–¥—ã
    Timer(Duration(seconds: 2 + _random.nextInt(3)), () {
      final index = _mockMessages.indexWhere((msg) => msg.id == newMessage.id);
      if (index != -1) {
        _mockMessages[index] = _mockMessages[index].copyWith(status: MessageStatus.read);
        _messageStreamController.add(_mockMessages[index]);
      }
    });
  }

  void _notifyTypingUpdate() {
    _typingStreamController.add(_typingUsers.toList());
  }

  // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–∞ –ø–µ—á–∞—Ç–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Stream<List<String>> get typingStream => _typingStreamController.stream;

  // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  Stream<ChatMessage> get messageStream => _messageStreamController.stream;

  // === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ API ===

  @override
  String get baseUrl => 'mock://localhost';

  @override
  String get authToken => 'mock-token';

  @override
  Future<ChatRoom> getRoom(String roomId) async {
    await Future.delayed(Duration(milliseconds: 400 + _random.nextInt(400)));

    final participants = [..._mockUsers, _currentUser];
    final lastMessage = _mockMessages.isNotEmpty ? _mockMessages.last : null;

    return ChatRoom(
      id: roomId,
      name: '–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
      participants: participants,
      createdAt: DateTime.now().subtract(const Duration(days: 30)),
      isGroup: true,
      createdBy: participants.first,
      lastMessage: lastMessage,
    );
  }

  @override
  Future<PaginationResponse<ChatMessage>> getMessages({
    required String roomId,
    required int page,
    required int limit,
  }) async {
    await Future.delayed(Duration(milliseconds: 300 + _random.nextInt(500)));

    final startIndex = (page - 1) * limit;
    final endIndex = startIndex + limit;

    List<ChatMessage> paginatedMessages = [];

    if (startIndex < _mockMessages.length) {
      final reversedMessages = _mockMessages.reversed.toList();
      paginatedMessages = reversedMessages.sublist(
        startIndex,
        endIndex > _mockMessages.length ? _mockMessages.length : endIndex,
      );
    }

    return PaginationResponse(
      messages: paginatedMessages,
      currentPage: page,
      totalPages: (_mockMessages.length / limit).ceil(),
      totalCount: _mockMessages.length,
      hasMore: endIndex < _mockMessages.length,
    );
  }

  @override
  Future<ChatMessage> sendMessage({
    required String roomId,
    required String text,
    String? replyToId,
  }) async {
    await Future.delayed(const Duration(milliseconds: 400));

    final newMessage = ChatMessage(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      text: text,
      author: _currentUser,
      timestamp: DateTime.now(),
      status: MessageStatus.sent,
      replyTo: replyToId != null
          ? _mockMessages.firstWhere(
              (msg) => msg.id == replyToId,
          orElse: () => _mockMessages.first
      )
          : null,
    );

    _mockMessages.add(newMessage);
    _messageStreamController.add(newMessage);

    // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–æ–≤
    Timer(const Duration(seconds: 1), () {
      final index = _mockMessages.indexWhere((msg) => msg.id == newMessage.id);
      if (index != -1) {
        _mockMessages[index] = _mockMessages[index].copyWith(status: MessageStatus.delivered);
        _messageStreamController.add(_mockMessages[index]);
      }
    });

    Timer(const Duration(seconds: 3), () {
      final index = _mockMessages.indexWhere((msg) => msg.id == newMessage.id);
      if (index != -1) {
        _mockMessages[index] = _mockMessages[index].copyWith(status: MessageStatus.read);
        _messageStreamController.add(_mockMessages[index]);
      }
    });

    return newMessage;
  }

  @override
  Future<void> toggleReaction({
    required String messageId,
    required String emoji,
  }) async {
    await Future.delayed(const Duration(milliseconds: 300));

    final index = _mockMessages.indexWhere((msg) => msg.id == messageId);
    if (index != -1) {
      final message = _mockMessages[index];
      final existingReactionIndex = message.reactions
          .indexWhere((r) => r.emoji == emoji && r.user.id == _currentUser.id);

      List<Reaction> updatedReactions;

      if (existingReactionIndex != -1) {
        updatedReactions = List<Reaction>.from(message.reactions);
        updatedReactions.removeAt(existingReactionIndex);
      } else {
        updatedReactions = [
          ...message.reactions,
          Reaction(
            emoji: emoji,
            user: _currentUser,
            timestamp: DateTime.now(),
          ),
        ];
      }

      _mockMessages[index] = message.copyWith(reactions: updatedReactions);
      _messageStreamController.add(_mockMessages[index]);
    }
  }

  @override
  Future<void> pinMessage({
    required String messageId,
    required bool pinned,
  }) async {
    await Future.delayed(const Duration(milliseconds: 400));

    final index = _mockMessages.indexWhere((msg) => msg.id == messageId);
    if (index != -1) {
      final updatedMessage = _mockMessages[index].copyWith(isPinned: pinned);
      _mockMessages[index] = updatedMessage;
      _messageStreamController.add(updatedMessage);
    }
  }

  @override
  Future<List<ChatMessage>> searchMessages({
    required String roomId,
    required String query,
  }) async {
    await Future.delayed(const Duration(milliseconds: 800));

    final searchTerm = query.toLowerCase();
    return _mockMessages.where((message) {
      return message.text.toLowerCase().contains(searchTerm) ||
          message.author.name.toLowerCase().contains(searchTerm);
    }).toList();
  }

  @override
  Future<void> sendTypingIndicator({
    required String roomId,
    required bool isTyping,
  }) async {
    if (isTyping) {
      _typingTimers[roomId]?.cancel();
      _typingTimers[roomId] = Timer(const Duration(seconds: 3), () {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        _typingTimers.remove(roomId);
      });
    } else {
      _typingTimers[roomId]?.cancel();
      _typingTimers.remove(roomId);
    }
    await Future.delayed(const Duration(milliseconds: 100));
  }

  @override
  Future<void> deleteMessage(String messageId) async {
    await Future.delayed(const Duration(milliseconds: 500));
    _mockMessages.removeWhere((msg) => msg.id == messageId);
  }

  @override
  Future<ChatMessage> editMessage({
    required String messageId,
    required String newText,
  }) async {
    await Future.delayed(const Duration(milliseconds: 400));

    final index = _mockMessages.indexWhere((msg) => msg.id == messageId);
    if (index != -1) {
      final updatedMessage = _mockMessages[index].copyWith(text: newText);
      _mockMessages[index] = updatedMessage;
      _messageStreamController.add(updatedMessage);
      return updatedMessage;
    }

    throw Exception('Message not found');
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _typingTimers.forEach((_, timer) => timer.cancel());
    _typingTimers.clear();
    _typingStreamController.close();
    _messageStreamController.close();
  }
}