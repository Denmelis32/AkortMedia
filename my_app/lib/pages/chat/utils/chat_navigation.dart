import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';
import 'package:shimmer/shimmer.dart';
import 'dart:math';
import '../../rooms_pages/models/room.dart';
import '../models/chat_message.dart';
import '../models/chat_member.dart';
import '../models/enums.dart';

class ChatNavigation {
  final BuildContext context;
  final Room room;
  final String userName;
  final String userAvatar;
  final List<ChatMessage> messages;
  final Function(void Function()) updateState;
  final VoidCallback scrollToBottom;

  final Random _random = Random();
  final List<String> _availableReactions = ['‚ù§Ô∏è', 'üòÇ', 'üòÆ', 'üò¢', 'üëç', 'üëé', 'üî•', 'üéâ'];

  ChatNavigation({
    required this.context,
    required this.room,
    required this.userName,
    required this.userAvatar,
    required this.messages,
    required this.updateState,
    required this.scrollToBottom,
  });

  List<String> get availableReactions => _availableReactions;

  Color _getUserColor(String userName, Map<String, Color> userColors) {
    if (!userColors.containsKey(userName)) {
      userColors[userName] = Colors.primaries[_random.nextInt(Colors.primaries.length)].shade600;
    }
    return userColors[userName]!;
  }

  void loadSampleMessages(Map<String, Color> userColors) {
    messages.addAll([
      ChatMessage(
        id: '1',
        text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "${room.title}"! üéâ\n–ó–¥–µ—Å—å –æ–±—Å—É–∂–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –º–∞—Ç—á–∏. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏—è–º–∏!',
        sender: '–°–∏—Å—Ç–µ–º–∞',
        time: DateTime.now().subtract(const Duration(minutes: 2)),
        isMe: false,
        messageType: MessageType.system,
      ),
      ChatMessage(
        id: '2',
        text: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –†–∞–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é! üëã',
        sender: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
        time: DateTime.now().subtract(const Duration(minutes: 1)),
        isMe: false,
        reactions: {'üëç': 2, '‚ù§Ô∏è': 1},
        userColor: _getUserColor('–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤', userColors),
        userAvatar: 'https://i.pravatar.cc/150?img=1',
      ),
      ChatMessage(
        id: '3',
        text: '–ö—Ç–æ —É–∂–µ —Å–º–æ—Ç—Ä–µ–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á? –ö–∞–∫–∏–µ –º—ã—Å–ª–∏? ‚öΩ',
        sender: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        time: DateTime.now().subtract(const Duration(minutes: 1)),
        isMe: false,
        reactions: {'‚ù§Ô∏è': 1, 'üî•': 1},
        userColor: _getUserColor('–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞', userColors),
        userAvatar: 'https://i.pravatar.cc/150?img=2',
      ),
      ChatMessage(
        id: '4',
        text: '–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞ –±—ã–ª–∞! –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞—â–∏—Ç–µ. –ù–∞ –º–æ–π –≤–∑–≥–ª—è–¥, –∫–ª—é—á–µ–≤—ã–º –º–æ–º–µ–Ω—Ç–æ–º —Å—Ç–∞–ª–∞ –∑–∞–º–µ–Ω–∞ –Ω–∞ 70-–π –º–∏–Ω—É—Ç–µ.',
        sender: '–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤',
        time: DateTime.now().subtract(const Duration(minutes: 1)),
        isMe: false,
        userColor: _getUserColor('–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤', userColors),
        userAvatar: 'https://i.pravatar.cc/150?img=3',
      ),
      ChatMessage(
        id: '5',
        text: '–ê –∫–∞–∫ –≤–∞–º –≥–æ–ª –Ω–∞ 89-–π –º–∏–Ω—É—Ç–µ? –ü—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! ü•Ö',
        sender: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
        time: DateTime.now().subtract(const Duration(minutes: 1)),
        isMe: false,
        isEdited: true,
        userColor: _getUserColor('–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤', userColors),
        userAvatar: 'https://i.pravatar.cc/150?img=1',
      ),
      ChatMessage(
        id: '6',
        text: '–ö—Å—Ç–∞—Ç–∏, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –º–∞—Ç—á! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 20:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏. –ë—É–¥–µ—Ç –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üèÜ',
        sender: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        time: DateTime.now().subtract(const Duration(minutes: 1)),
        isMe: false,
        userColor: _getUserColor('–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞', userColors),
        userAvatar: 'https://i.pravatar.cc/150?img=2',
        isPinned: true,
      ),
      ChatMessage(
        id: '7',
        text: 'üéµ',
        sender: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
        time: DateTime.now().subtract(const Duration(minutes: 1)),
        isMe: false,
        messageType: MessageType.voice,
        userColor: _getUserColor('–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤', userColors),
        userAvatar: 'https://i.pravatar.cc/150?img=1',
        voiceDuration: 30,
      ),
    ]);
  }

  Future<RoomMembers> loadRoomMembers() async {
    await Future.delayed(const Duration(milliseconds: 500));

    // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –¥–ª—è onlineMembers
    final List<ChatMember> onlineMembers = [
      ChatMember(
        id: '1',
        name: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
        avatar: 'https://i.pravatar.cc/150?img=1',
        isOnline: true,
        role: MemberRole.admin,
        lastSeen: DateTime.now(),
      ),
      ChatMember(
        id: '2',
        name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        avatar: 'https://i.pravatar.cc/150?img=2',
        isOnline: true,
        role: MemberRole.moderator,
        lastSeen: DateTime.now(),
      ),
      ChatMember(
        id: '3',
        name: '–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤',
        avatar: 'https://i.pravatar.cc/150?img=3',
        isOnline: true,
        role: MemberRole.member,
        lastSeen: DateTime.now(),
      ),
      ChatMember(
        id: '4',
        name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
        avatar: 'https://i.pravatar.cc/150?img=4',
        isOnline: false,
        role: MemberRole.member,
        lastSeen: DateTime.now().subtract(const Duration(hours: 2)),
      ),
    ];

    // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –¥–ª—è allMembers –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    final List<ChatMember> allMembers = [
      ...onlineMembers,
      ChatMember(
        id: '5',
        name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
        avatar: 'https://i.pravatar.cc/150?img=5',
        isOnline: false,
        role: MemberRole.member,
        lastSeen: DateTime.now().subtract(const Duration(days: 1)),
      ),
    ];

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º RoomMembers —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    return RoomMembers(
      onlineMembers: onlineMembers,
      allMembers: allMembers,
    );
  }

  void sendMessage({
    required TextEditingController messageController,
    required ChatMessage? replyingTo,
    required ChatMessage? editingMessage,
    required VoidCallback onMessageSent,
  }) {
    final text = messageController.text.trim();
    if (text.isEmpty) return;

    final newMessage = ChatMessage(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      text: text,
      sender: userName,
      time: DateTime.now(),
      isMe: true,
      replyTo: replyingTo,
      userColor: _getUserColor(userName, {}),
      userAvatar: userAvatar,
    );

    updateState(() {
      if (editingMessage != null) {
        final index = messages.indexWhere((msg) => msg.id == editingMessage.id);
        if (index != -1) {
          messages[index] = messages[index].copyWith(text: text, isEdited: true);
        }
      } else {
        messages.add(newMessage);
      }
      messageController.clear();
      onMessageSent();
    });

    if (editingMessage == null) {
      _simulateAIResponse(text);
    }
    scrollToBottom();
  }

  void _simulateAIResponse(String userMessage) {
    String response = '';

    if (userMessage.toLowerCase().contains('–ø—Ä–∏–≤–µ—Ç')) {
      response = '–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ —á–∞—Ç–µ! üòä';
    } else if (userMessage.toLowerCase().contains('–º–∞—Ç—á')) {
      response = '–î–∞, –º–∞—Ç—á –±—ã–ª –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π! –û—Å–æ–±–µ–Ω–Ω–æ –≤–ø–µ—á–∞—Ç–ª–∏–ª–∞ –∏–≥—Ä–∞ –ø–æ–ª—É–∑–∞—â–∏—Ç—ã.';
    } else {
      final responses = [
        '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! –ß—Ç–æ –µ—â–µ –¥—É–º–∞–µ—Ç–µ –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É?',
        '–°–æ–≥–ª–∞—Å–µ–Ω —Å –≤–∞–º–∏! –î–æ–±–∞–≤–ª—é, —á—Ç–æ –≤–∞–∂–Ω–∞ —Ç–∞–∫–∂–µ –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞.',
        '–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.',
        '–û—Ç–ª–∏—á–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ! –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –≤–∞—à—É —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è.',
      ];
      response = responses[DateTime.now().millisecond % responses.length];
    }

    Future.delayed(Duration(seconds: 1 + _random.nextInt(2)), () {
      if (!context.mounted) return;

      final aiUsers = ['–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤', '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞', '–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤'];
      final aiUser = aiUsers[DateTime.now().second % aiUsers.length];

      final aiMessage = ChatMessage(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        text: response,
        sender: aiUser,
        time: DateTime.now().add(const Duration(seconds: 1)),
        isMe: false,
        userColor: _getUserColor(aiUser, {}),
        userAvatar: 'https://i.pravatar.cc/150?img=${aiUsers.indexOf(aiUser) + 1}',
      );

      updateState(() {
        messages.add(aiMessage);
      });
      scrollToBottom();
    });
  }

  void sendSticker(String sticker) {
    final newMessage = ChatMessage(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      text: sticker,
      sender: userName,
      time: DateTime.now(),
      isMe: true,
      messageType: MessageType.sticker,
      userColor: _getUserColor(userName, {}),
      userAvatar: userAvatar,
    );

    updateState(() {
      messages.add(newMessage);
    });
  }

  Future<void> sendVoiceMessage(double recordingTime) async {
    final newMessage = ChatMessage(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      text: 'üéµ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      sender: userName,
      time: DateTime.now(),
      isMe: true,
      messageType: MessageType.voice,
      userColor: _getUserColor(userName, {}),
      userAvatar: userAvatar,
      voiceDuration: recordingTime.round(),
    );

    updateState(() {
      messages.add(newMessage);
    });
  }

  void startVoiceRecording(Function(double) onTimeUpdate) {
    double recordingTime = 0.0;

    void updateRecordingTime() {
      if (context.mounted) {
        recordingTime += 0.1;
        onTimeUpdate(recordingTime);

        Future.delayed(const Duration(milliseconds: 100), () {
          if (context.mounted) {
            updateRecordingTime();
          }
        });
      }
    }

    updateRecordingTime();
  }

  void simulateVoicePlayback(int duration, Function(double) onProgressUpdate) {
    double progress = 0.0;

    void updateProgress() {
      if (context.mounted && progress < 1.0) {
        progress += 0.1 / duration;
        onProgressUpdate(progress);

        Future.delayed(const Duration(milliseconds: 100), () {
          if (context.mounted && progress < 1.0) {
            updateProgress();
          }
        });
      }
    }

    updateProgress();
  }

  Future<String?> translateMessage(ChatMessage message) async {
    final translations = {
      '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –†–∞–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é! üëã': 'Hello everyone! Glad to join the discussion! üëã',
      '–ö—Ç–æ —É–∂–µ —Å–º–æ—Ç—Ä–µ–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á? –ö–∞–∫–∏–µ –º—ã—Å–ª–∏? ‚öΩ': 'Who has already watched the last match? Any thoughts? ‚öΩ',
      '–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞ –±—ã–ª–∞!': 'It was a great game!',
      '–ê –∫–∞–∫ –≤–∞–º –≥–æ–ª –Ω–∞ 89-–π –º–∏–Ω—É—Ç–µ? –ü—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! ü•Ö': 'What about the goal at the 89th minute? Just great! ü•Ö',
    };

    await Future.delayed(const Duration(milliseconds: 500));
    return translations[message.text] ?? 'Translation not available';
  }

  void addEmojiToMessage(TextEditingController messageController, String emoji) {
    final currentText = messageController.text;
    final selection = messageController.selection;
    final newText = currentText.replaceRange(
      selection.start,
      selection.end,
      emoji,
    );
    messageController.value = messageController.value.copyWith(
      text: newText,
      selection: TextSelection.collapsed(offset: selection.start + emoji.length),
    );
  }

  void showEnhancedMessageOptions({
    required ChatMessage message,
    required ThemeData theme,
    required VoidCallback onReply,
    required VoidCallback onEdit,
    required VoidCallback onDelete,
    required VoidCallback onToggleSelection,
    required Function(String) onToggleExpansion,
    required VoidCallback onTranslate,
    required VoidCallback onPin,
    required VoidCallback onUnpin,
    required Function(String) onAddReaction,
  }) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => _buildMessageOptionsDialog(
        message: message,
        theme: theme,
        onReply: onReply,
        onEdit: onEdit,
        onDelete: onDelete,
        onToggleSelection: onToggleSelection,
        onToggleExpansion: onToggleExpansion,
        onTranslate: onTranslate,
        onPin: onPin,
        onUnpin: onUnpin,
        onAddReaction: onAddReaction,
      ),
    );
  }

  Widget _buildMessageOptionsDialog({
    required ChatMessage message,
    required ThemeData theme,
    required VoidCallback onReply,
    required VoidCallback onEdit,
    required VoidCallback onDelete,
    required VoidCallback onToggleSelection,
    required Function(String) onToggleExpansion,
    required VoidCallback onTranslate,
    required VoidCallback onPin,
    required VoidCallback onUnpin,
    required Function(String) onAddReaction,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: theme.colorScheme.surface,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
      ),
      child: SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const SizedBox(height: 12),
            Container(
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: theme.dividerColor,
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            const SizedBox(height: 16),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 24),
              child: Row(
                children: [
                  _buildUserAvatar(message, theme),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          message.sender,
                          style: theme.textTheme.bodyLarge?.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        Text(
                          DateFormat('dd MMMM yyyy, HH:mm').format(message.time),
                          style: theme.textTheme.bodySmall?.copyWith(
                            color: theme.colorScheme.onSurface.withOpacity(0.6),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            const Divider(),
            if (!message.isMe)
              _buildOptionTile(
                Icons.reply,
                '–û—Ç–≤–µ—Ç–∏—Ç—å',
                '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                onReply,
                theme,
              ),
            _buildOptionTile(
              Icons.copy,
              '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç',
              '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
                  () => _copyMessageText(message),
              theme,
            ),
            if (message.messageType == MessageType.text)
              _buildOptionTile(
                Icons.translate,
                '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏',
                '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π',
                onTranslate,
                theme,
              ),
            _buildOptionTile(
              Icons.emoji_emotions_outlined,
              '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é',
              '–í—ã–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏',
                  () => _showReactionPicker(message, onAddReaction, theme),
              theme,
            ),
            if (message.isPinned)
              _buildOptionTile(
                Icons.push_pin,
                '–û—Ç–∫—Ä–µ–ø–∏—Ç—å',
                '–£–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö',
                onUnpin,
                theme,
              )
            else
              _buildOptionTile(
                Icons.push_pin,
                '–ó–∞–∫—Ä–µ–ø–∏—Ç—å',
                '–ó–∞–∫—Ä–µ–ø–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                onPin,
                theme,
              ),
            _buildOptionTile(
              Icons.select_all,
              '–í—ã–±—Ä–∞—Ç—å',
              '–í—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π',
              onToggleSelection,
              theme,
            ),
            if (message.isMe)
              _buildOptionTile(
                Icons.edit,
                '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
                onEdit,
                theme,
              ),
            if (message.isMe)
              _buildOptionTile(
                Icons.delete,
                '–£–¥–∞–ª–∏—Ç—å',
                '–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                onDelete,
                theme,
                isDestructive: true,
              ),
            const SizedBox(height: 8),
            Padding(
              padding: const EdgeInsets.all(16),
              child: OutlinedButton(
                onPressed: () => Navigator.pop(context),
                style: OutlinedButton.styleFrom(
                  foregroundColor: theme.colorScheme.onSurface,
                  side: BorderSide(color: theme.dividerColor),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                  minimumSize: const Size(double.infinity, 50),
                ),
                child: const Text('–û—Ç–º–µ–Ω–∞'),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOptionTile(IconData icon, String title, String subtitle, VoidCallback onTap, ThemeData theme, {bool isDestructive = false}) {
    final color = isDestructive ? theme.colorScheme.error : theme.primaryColor;

    return ListTile(
      leading: Container(
        width: 40,
        height: 40,
        decoration: BoxDecoration(
          color: color.withOpacity(0.1),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Icon(icon, color: color, size: 20),
      ),
      title: Text(title, style: TextStyle(color: isDestructive ? theme.colorScheme.error : null)),
      subtitle: Text(subtitle, style: theme.textTheme.bodySmall?.copyWith(
        color: theme.colorScheme.onSurface.withOpacity(0.6),
      )),
      onTap: () {
        Navigator.pop(context);
        onTap();
      },
    );
  }

  void _showReactionPicker(ChatMessage message, Function(String) onAddReaction, ThemeData theme) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        decoration: BoxDecoration(
          color: theme.colorScheme.surface,
          borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
        ),
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(
                  '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 20),
                Wrap(
                  spacing: 16,
                  runSpacing: 16,
                  children: _availableReactions.map((emoji) {
                    return GestureDetector(
                      onTap: () {
                        Navigator.pop(context);
                        onAddReaction(emoji);
                      },
                      child: Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: theme.colorScheme.background,
                          borderRadius: BorderRadius.circular(16),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black.withOpacity(0.1),
                              blurRadius: 4,
                              offset: const Offset(0, 2),
                            ),
                          ],
                        ),
                        child: Text(
                          emoji,
                          style: const TextStyle(fontSize: 28),
                        ),
                      ),
                    );
                  }).toList(),
                ),
                const SizedBox(height: 24),
                OutlinedButton(
                  onPressed: () => Navigator.pop(context),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: theme.colorScheme.onSurface,
                    side: BorderSide(color: theme.dividerColor),
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                    minimumSize: const Size(double.infinity, 50),
                  ),
                  child: const Text('–û—Ç–º–µ–Ω–∞'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildUserAvatar(ChatMessage message, ThemeData theme) {
    if (message.userAvatar?.isNotEmpty == true) {
      return Container(
        width: 36,
        height: 36,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          gradient: LinearGradient(
            colors: [
              message.userColor ?? theme.primaryColor,
              message.userColor?.withOpacity(0.7) ?? theme.primaryColor.withOpacity(0.7),
            ],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Center(
          child: Text(
            message.sender[0].toUpperCase(),
            style: const TextStyle(
              fontSize: 14,
              color: Colors.white,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      );
    } else {
      return Container(
        width: 36,
        height: 36,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          gradient: LinearGradient(
            colors: [
              message.userColor ?? theme.primaryColor,
              message.userColor?.withOpacity(0.7) ?? theme.primaryColor.withOpacity(0.7),
            ],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Center(
          child: Text(
            message.sender[0].toUpperCase(),
            style: const TextStyle(
              fontSize: 14,
              color: Colors.white,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      );
    }
  }

  void _copyMessageText(ChatMessage message) {
    Clipboard.setData(ClipboardData(text: message.text));
    showSnackBar('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω');
  }

  void deleteMessage({
    required ChatMessage message,
    required VoidCallback onDelete,
  }) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?'),
        content: const Text('–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          TextButton(
            onPressed: () {
              onDelete();
              Navigator.pop(context);
              showSnackBar('–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
            },
            child: const Text('–£–¥–∞–ª–∏—Ç—å', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );
  }

  void forwardSelectedMessages(int selectedCount) {
    showSnackBar('$selectedCount —Å–æ–æ–±—â–µ–Ω–∏–π –≥–æ—Ç–æ–≤—ã –∫ –ø–µ—Ä–µ—Å—ã–ª–∫–µ');
  }

  void deleteSelectedMessages(int selectedCount, VoidCallback onDelete) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è?'),
        content: Text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å $selectedCount —Å–æ–æ–±—â–µ–Ω–∏–π? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          TextButton(
            onPressed: () {
              onDelete();
              Navigator.pop(context);
              showSnackBar('–£–¥–∞–ª–µ–Ω–æ $selectedCount —Å–æ–æ–±—â–µ–Ω–∏–π');
            },
            child: const Text('–£–¥–∞–ª–∏—Ç—å', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );
  }

  void showSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Theme.of(context).primaryColor,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  // Placeholder methods for other navigation actions
  void showEnhancedRoomInfo() {}
  void showRoomSettings() {}
  void inviteUsers() {}
  void showEnhancedAttachmentMenu() {}

  Widget buildStickersPanel({required Function(String) onStickerSelected}) {
    final stickerPacks = [
      ['üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ'],
      ['üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ'],
      ['üòå', 'üòç', 'ü•∞', 'üòò', 'üòó'],
      ['üòô', 'üòö', 'üòã', 'üòõ', 'üòù'],
    ];

    return Container(
      height: 180,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        border: Border(
          top: BorderSide(color: Theme.of(context).dividerColor.withOpacity(0.3)),
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: Column(
        children: [
          TabBar(
            controller: TabController(length: 4, vsync: Navigator.of(context)),
            isScrollable: true,
            tabs: List.generate(stickerPacks.length, (index) => Tab(text: 'Pack ${index + 1}')),
          ),
          const SizedBox(height: 12),
          Expanded(
            child: GridView.builder(
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 5,
                crossAxisSpacing: 8,
                mainAxisSpacing: 8,
              ),
              itemCount: stickerPacks[0].length,
              itemBuilder: (context, index) {
                return GestureDetector(
                  onTap: () => onStickerSelected(stickerPacks[0][index]),
                  child: Container(
                    decoration: BoxDecoration(
                      color: Theme.of(context).colorScheme.background,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Center(
                      child: Text(
                        stickerPacks[0][index],
                        style: const TextStyle(fontSize: 24),
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget buildLoadingShimmer() {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: 10,
      itemBuilder: (context, index) {
        return Shimmer.fromColors(
          baseColor: Colors.grey[300]!,
          highlightColor: Colors.grey[100]!,
          child: Container(
            margin: const EdgeInsets.only(bottom: 16),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  width: 40,
                  height: 40,
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(20),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Container(
                        width: 120,
                        height: 16,
                        color: Colors.white,
                      ),
                      const SizedBox(height: 8),
                      Container(
                        width: double.infinity,
                        height: 60,
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}

class RoomMembers {
  final List<ChatMember> onlineMembers;
  final List<ChatMember> allMembers;

  RoomMembers({
    required this.onlineMembers,
    required this.allMembers,
  });
}