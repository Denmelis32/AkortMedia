// utils/chat_navigation.dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';
import 'package:shimmer/shimmer.dart';
import 'dart:math';

import '../../../services/chat_service.dart';
import '../../rooms_pages/models/room.dart';
import '../models/chat_message.dart';
import '../models/chat_member.dart';
import '../models/chat_settings.dart';
import '../models/enums.dart';

class ChatNavigation {
  final BuildContext context;
  final Room room;
  final String userName;
  final String userAvatar;
  final List<ChatMessage> messages;
  final Function(void Function()) updateState;
  final VoidCallback scrollToBottom;
  final VoidCallback? onMessagesUpdated;

  final Random _random = Random();
  final List<String> _availableReactions = ['‚ù§Ô∏è', 'üòÇ', 'üòÆ', 'üò¢', 'üëç', 'üëé', 'üî•', 'üéâ'];
  final Map<String, String> _translationCache = {};
  final Map<String, Color> _userColors = {};
  final ChatService _chatService = ChatService();

  // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏
  List<ChatBot> _availableBots = [];
  List<ChatBot> _activeBots = [];
  ChatSettings _chatSettings = ChatSettings(
    id: 'default',
    enableBotResponses: true,
    translationEnabled: false,
    soundEnabled: true,
    vibrationEnabled: true,
    fontSize: 16.0,
    theme: ThemeMode.light,
  );

  ChatNavigation({
    required this.context,
    required this.room,
    required this.userName,
    required this.userAvatar,
    required this.messages,
    required this.updateState,
    required this.scrollToBottom,
    this.onMessagesUpdated,
  }) {
    _initializeChatService();
  }

  Future<void> _initializeChatService() async {
    try {
      await _chatService.initialize();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –±–æ—Ç–æ–≤
      _chatSettings = await _chatService.getChatSettings(room.id);
      _availableBots = _chatService.getAvailableBots();
      _activeBots = await _chatService.getActiveBots(room.id);

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
      _setupMessageStream();

      print('‚úÖ ChatService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${room.id}');
      print('ü§ñ –î–æ—Å—Ç—É–ø–Ω–æ –±–æ—Ç–æ–≤: ${_availableBots.length}, –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${_activeBots.length}');

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChatService: $e');
    }
  }

  void _setupMessageStream() {
    _chatService.watchRoomMessages(room.id).listen((newMessages) {
      print('üì® –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–æ—Ç–æ–∫–∞: ${newMessages.length}');

      updateState(() {
        messages.clear();
        messages.addAll(newMessages);
      });

      onMessagesUpdated?.call();
      scrollToBottom();
    });
  }

  List<String> get availableReactions => _availableReactions;

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –±–æ—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  List<ChatBot> get availableBots => _availableBots;
  List<ChatBot> get activeBots => _activeBots;
  ChatSettings get chatSettings => _chatSettings;

  Color _getUserColor(String userName, Map<String, Color> userColors) {
    if (!userColors.containsKey(userName)) {
      userColors[userName] = Colors.primaries[_random.nextInt(Colors.primaries.length)].shade600;
    }
    return userColors[userName]!;
  }

  // === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ß–ê–¢–ê ===

  Future<void> loadInitialData() async {
    try {
      print('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${room.id}');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
      final loadedMessages = await _chatService.loadMessages(room.id, limit: 50);

      updateState(() {
        messages.clear();
        messages.addAll(loadedMessages);
      });

      print('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π');

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $e');
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      _loadDemoMessages();
    }
  }

  void _loadDemoMessages() {
    final demoMessages = [
      ChatMessage(
        id: '1',
        roomId: room.id,
        text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "${room.title}"! üéâ\n–ó–¥–µ—Å—å –æ–±—Å—É–∂–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –º–∞—Ç—á–∏.',
        sender: '–°–∏—Å—Ç–µ–º–∞',
        time: DateTime.now().subtract(const Duration(minutes: 2)),
        isMe: false,
        messageType: MessageType.system,
      ),
      ChatMessage(
        id: '2',
        roomId: room.id,
        text: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –†–∞–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é! üëã',
        sender: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
        time: DateTime.now().subtract(const Duration(minutes: 1)),
        isMe: false,
        userColor: _getUserColor('–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤', _userColors),
        userAvatar: 'https://i.pravatar.cc/150?img=1',
      ),
      ChatMessage(
        id: '3',
        roomId: room.id,
        text: '–ö–∞–∫ –≤–∞–º –≤—á–µ—Ä–∞—à–Ω–∏–π –º–∞—Ç—á? –û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞ –±—ã–ª–∞! ‚öΩ',
        sender: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        time: DateTime.now().subtract(const Duration(minutes: 1)),
        isMe: false,
        userColor: _getUserColor('–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞', _userColors),
        userAvatar: 'https://i.pravatar.cc/150?img=2',
      ),
    ];

    updateState(() {
      messages.clear();
      messages.addAll(demoMessages);
    });
  }

  Future<List<ChatMember>> loadRoomMembers() async {
    try {
      return await _chatService.loadRoomMembers(room.id);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: $e');
      return _loadDemoMembers();
    }
  }

  List<ChatMember> _loadDemoMembers() {
    return [
      ChatMember(
        id: '1',
        name: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
        avatar: 'https://i.pravatar.cc/150?img=1',
        isOnline: true,
        role: MemberRole.admin,
        lastSeen: DateTime.now(),
        joinDate: DateTime.now().subtract(const Duration(days: 30)),
      ),
      ChatMember(
        id: '2',
        name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        avatar: 'https://i.pravatar.cc/150?img=2',
        isOnline: true,
        role: MemberRole.moderator,
        lastSeen: DateTime.now(),
        joinDate: DateTime.now().subtract(const Duration(days: 25)),
      ),
      ChatMember(
        id: '3',
        name: '–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤',
        avatar: 'https://i.pravatar.cc/150?img=3',
        isOnline: false,
        role: MemberRole.member,
        lastSeen: DateTime.now().subtract(const Duration(hours: 2)),
        joinDate: DateTime.now().subtract(const Duration(days: 15)),
      ),
    ];
  }

  // === –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–ê–ú–ò ===

  Future<void> sendMessage({
    required TextEditingController messageController,
    required ChatMessage? replyingTo,
    required ChatMessage? editingMessage,
    required VoidCallback onMessageSent,
  }) async {
    final text = messageController.text.trim();
    if (text.isEmpty) return;

    print('üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "$userName" –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: "$text"');

    try {
      ChatMessage sentMessage;

      if (editingMessage != null) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        sentMessage = await _chatService.editMessage(
            editingMessage.id,
            text,
            room.id
        );

        updateState(() {
          final index = messages.indexWhere((msg) => msg.id == editingMessage.id);
          if (index != -1) {
            messages[index] = sentMessage;
          }
        });

      } else {
        // –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final newMessage = ChatMessage(
          id: 'temp-${DateTime.now().millisecondsSinceEpoch}',
          roomId: room.id,
          text: text,
          sender: userName,
          time: DateTime.now(),
          isMe: true,
          replyTo: replyingTo,
          userColor: _getUserColor(userName, _userColors),
          userAvatar: userAvatar,
          status: MessageStatus.sending,
        );

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ —Å—Ä–∞–∑—É
        updateState(() {
          messages.add(newMessage);
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        sentMessage = await _chatService.sendMessage(newMessage);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        updateState(() {
          final index = messages.indexWhere((msg) => msg.id == newMessage.id);
          if (index != -1) {
            messages[index] = sentMessage;
          }
        });
      }

      messageController.clear();
      onMessageSent();
      scrollToBottom();

      print('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentMessage.text}');

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      showSnackBar('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');

      // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
      if (editingMessage == null) {
        updateState(() {
          final lastMessage = messages.lastWhere(
                  (msg) => msg.id.startsWith('temp-'),
              orElse: () => messages.last
          );
          final errorIndex = messages.indexOf(lastMessage);
          if (errorIndex != -1) {
            messages[errorIndex] = lastMessage.copyWith(
                status: MessageStatus.error
            );
          }
        });
      }
    }
  }

  // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–ê–ú–ò ===

  Future<void> toggleBot(String botId, bool active) async {
    try {
      await _chatService.toggleBot(botId, active);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
      _activeBots = await _chatService.getActiveBots(room.id);

      updateState(() {}); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º UI

      showSnackBar(active ?
      'ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' :
      'ü§ñ –ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
      );

      print('${active ? '‚úÖ' : '‚ùå'} –ë–æ—Ç $botId ${active ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}');

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞: $e');
      showSnackBar('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–æ–º');
    }
  }

  Future<void> updateChatSettings(ChatSettings newSettings) async {
    try {
      await _chatService.updateChatSettings(room.id, newSettings);
      _chatSettings = newSettings;

      updateState(() {}); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º UI

      showSnackBar('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      print('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: $e');
      showSnackBar('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
  }

  // === –†–ï–ê–ö–¶–ò–ò –ò –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

  Future<void> addReaction(String messageId, String reaction) async {
    try {
      final updatedReactions = await _chatService.addReaction(
          messageId,
          room.id,
          reaction,
          userName
      );

      if (updatedReactions != null) {
        updateState(() {
          final index = messages.indexWhere((msg) => msg.id == messageId);
          if (index != -1) {
            messages[index] = messages[index].copyWith(
                reactions: updatedReactions
            );
          }
        });

        print('‚úÖ –†–µ–∞–∫—Ü–∏—è $reaction –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é $messageId');
      }

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: $e');
      showSnackBar('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏');
    }
  }

  Future<void> toggleMessagePin(String messageId) async {
    try {
      final success = await _chatService.toggleMessagePin(messageId, room.id);

      if (success) {
        updateState(() {
          final index = messages.indexWhere((msg) => msg.id == messageId);
          if (index != -1) {
            messages[index] = messages[index].copyWith(
                isPinned: !messages[index].isPinned
            );
          }
        });

        showSnackBar(messages.firstWhere((msg) => msg.id == messageId).isPinned ?
        'üìå –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ' :
        'üìå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ'
        );
      }

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      showSnackBar('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }

  Future<void> deleteMessage(String messageId) async {
    try {
      final success = await _chatService.deleteMessage(messageId, room.id);

      if (success) {
        updateState(() {
          messages.removeWhere((msg) => msg.id == messageId);
        });

        showSnackBar('üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
        print('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ $messageId —É–¥–∞–ª–µ–Ω–æ');
      }

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      showSnackBar('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }

  // === –ü–û–ò–°–ö –ò –ü–ï–†–ï–í–û–î ===

  Future<List<ChatMessage>> searchMessages(String query) async {
    try {
      return await _chatService.searchMessages(room.id, query);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: $e');
      return [];
    }
  }

  Future<List<ChatMessage>> getPinnedMessages() async {
    try {
      return await _chatService.getPinnedMessages(room.id);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: $e');
      return [];
    }
  }

  Future<String?> translateMessage(ChatMessage message) async {
    try {
      return await _chatService.translateMessage(message.text, 'en');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      return null;
    }
  }

  // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê ===

  Future<Map<String, dynamic>> getRoomStats() async {
    try {
      return await _chatService.getRoomStats(room.id);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      return {
        'totalMessages': messages.length,
        'totalMembers': 0,
        'onlineMembers': 0,
        'todayMessages': 0,
        'pinnedMessages': 0,
        'activeBots': _activeBots.length,
      };
    }
  }

  // === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò –î–ï–ú–û-–§–£–ù–ö–¶–ò–ò ===

  void triggerTestBotResponse(String testMessage) {
    print('üîß –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ –±–æ—Ç–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: "$testMessage"');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –±–æ—Ç–æ–≤
    final testUserMessage = ChatMessage(
      id: 'test-${DateTime.now().millisecondsSinceEpoch}',
      roomId: room.id,
      text: testMessage,
      sender: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      time: DateTime.now(),
      isMe: false,
      userColor: Colors.grey,
      userAvatar: 'üë§',
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–æ–≤
    _chatService.sendMessage(testUserMessage);
  }

  void sendSticker(String sticker) {
    final newMessage = ChatMessage(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      roomId: room.id,
      text: sticker,
      sender: userName,
      time: DateTime.now(),
      isMe: true,
      messageType: MessageType.sticker,
      userColor: _getUserColor(userName, _userColors),
      userAvatar: userAvatar,
    );

    _chatService.sendMessage(newMessage);
  }

  Future<void> sendVoiceMessage(double recordingTime) async {
    final newMessage = ChatMessage(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      roomId: room.id,
      text: 'üéµ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      sender: userName,
      time: DateTime.now(),
      isMe: true,
      messageType: MessageType.voice,
      userColor: _getUserColor(userName, _userColors),
      userAvatar: userAvatar,
      voiceDuration: recordingTime,
    );

    _chatService.sendMessage(newMessage);
  }

  // === UI –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  void showEnhancedMessageOptions({
    required ChatMessage message,
    required ThemeData theme,
    required VoidCallback onReply,
    required VoidCallback onEdit,
    required VoidCallback onDelete,
    required VoidCallback onToggleSelection,
    required Function(String) onToggleExpansion,
    required VoidCallback onTranslate,
    required VoidCallback onPin,
    required VoidCallback onUnpin,
    required Function(String) onAddReaction,
  }) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => _buildMessageOptionsDialog(
        message: message,
        theme: theme,
        onReply: onReply,
        onEdit: onEdit,
        onDelete: onDelete,
        onToggleSelection: onToggleSelection,
        onToggleExpansion: onToggleExpansion,
        onTranslate: onTranslate,
        onPin: onPin,
        onUnpin: onUnpin,
        onAddReaction: onAddReaction,
      ),
    );
  }

  Widget _buildMessageOptionsDialog({
    required ChatMessage message,
    required ThemeData theme,
    required VoidCallback onReply,
    required VoidCallback onEdit,
    required VoidCallback onDelete,
    required VoidCallback onToggleSelection,
    required Function(String) onToggleExpansion,
    required VoidCallback onTranslate,
    required VoidCallback onPin,
    required VoidCallback onUnpin,
    required Function(String) onAddReaction,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: theme.colorScheme.surface,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
      ),
      child: SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const SizedBox(height: 12),
            Container(
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: theme.dividerColor,
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            const SizedBox(height: 16),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 24),
              child: Row(
                children: [
                  _buildUserAvatar(message, theme),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          message.sender,
                          style: theme.textTheme.bodyLarge?.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        Text(
                          DateFormat('dd MMMM yyyy, HH:mm').format(message.time),
                          style: theme.textTheme.bodySmall?.copyWith(
                            color: theme.colorScheme.onSurface.withOpacity(0.6),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            const Divider(),
            if (!message.isMe)
              _buildOptionTile(
                Icons.reply,
                '–û—Ç–≤–µ—Ç–∏—Ç—å',
                '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                onReply,
                theme,
              ),
            _buildOptionTile(
              Icons.copy,
              '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç',
              '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
                  () => _copyMessageText(message),
              theme,
            ),
            if (message.messageType == MessageType.text)
              _buildOptionTile(
                Icons.translate,
                '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏',
                '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
                onTranslate,
                theme,
              ),
            _buildOptionTile(
              Icons.emoji_emotions_outlined,
              '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é',
              '–í—ã–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏',
                  () => _showReactionPicker(message, onAddReaction, theme),
              theme,
            ),
            if (message.isPinned)
              _buildOptionTile(
                Icons.push_pin,
                '–û—Ç–∫—Ä–µ–ø–∏—Ç—å',
                '–£–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö',
                onUnpin,
                theme,
              )
            else
              _buildOptionTile(
                Icons.push_pin,
                '–ó–∞–∫—Ä–µ–ø–∏—Ç—å',
                '–ó–∞–∫—Ä–µ–ø–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                onPin,
                theme,
              ),
            _buildOptionTile(
              Icons.select_all,
              '–í—ã–±—Ä–∞—Ç—å',
              '–í—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π',
              onToggleSelection,
              theme,
            ),
            if (message.isMe)
              _buildOptionTile(
                Icons.edit,
                '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
                onEdit,
                theme,
              ),
            if (message.isMe)
              _buildOptionTile(
                Icons.delete,
                '–£–¥–∞–ª–∏—Ç—å',
                '–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                onDelete,
                theme,
                isDestructive: true,
              ),
            const SizedBox(height: 8),
            Padding(
              padding: const EdgeInsets.all(16),
              child: OutlinedButton(
                onPressed: () => Navigator.pop(context),
                style: OutlinedButton.styleFrom(
                  foregroundColor: theme.colorScheme.onSurface,
                  side: BorderSide(color: theme.dividerColor),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16),
                  ),
                  minimumSize: const Size(double.infinity, 50),
                ),
                child: const Text('–û—Ç–º–µ–Ω–∞'),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOptionTile(
      IconData icon,
      String title,
      String subtitle,
      VoidCallback onTap,
      ThemeData theme,
      {bool isDestructive = false}
      ) {
    final color = isDestructive ? theme.colorScheme.error : theme.primaryColor;

    return ListTile(
      leading: Container(
        width: 40,
        height: 40,
        decoration: BoxDecoration(
          color: color.withOpacity(0.1),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Icon(icon, color: color, size: 20),
      ),
      title: Text(
          title,
          style: TextStyle(color: isDestructive ? theme.colorScheme.error : null)
      ),
      subtitle: Text(
          subtitle,
          style: theme.textTheme.bodySmall?.copyWith(
            color: theme.colorScheme.onSurface.withOpacity(0.6),
          )
      ),
      onTap: () {
        Navigator.pop(context);
        onTap();
      },
    );
  }

  void _showReactionPicker(
      ChatMessage message,
      Function(String) onAddReaction,
      ThemeData theme
      ) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        decoration: BoxDecoration(
          color: theme.colorScheme.surface,
          borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
        ),
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(
                  '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 20),
                Wrap(
                  spacing: 16,
                  runSpacing: 16,
                  children: _availableReactions.map((emoji) {
                    return GestureDetector(
                      onTap: () {
                        Navigator.pop(context);
                        onAddReaction(emoji);
                      },
                      child: Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: theme.colorScheme.background,
                          borderRadius: BorderRadius.circular(16),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black.withOpacity(0.1),
                              blurRadius: 4,
                              offset: const Offset(0, 2),
                            ),
                          ],
                        ),
                        child: Text(
                          emoji,
                          style: const TextStyle(fontSize: 28),
                        ),
                      ),
                    );
                  }).toList(),
                ),
                const SizedBox(height: 24),
                OutlinedButton(
                  onPressed: () => Navigator.pop(context),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: theme.colorScheme.onSurface,
                    side: BorderSide(color: theme.dividerColor),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                    minimumSize: const Size(double.infinity, 50),
                  ),
                  child: const Text('–û—Ç–º–µ–Ω–∞'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildUserAvatar(ChatMessage message, ThemeData theme) {
    if (message.userAvatar?.isNotEmpty == true && !message.userAvatar!.startsWith('http')) {
      // –î–ª—è —ç–º–æ–¥–∑–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ –±–æ—Ç–æ–≤
      return Container(
        width: 36,
        height: 36,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          gradient: LinearGradient(
            colors: [
              message.userColor ?? theme.primaryColor,
              message.userColor?.withOpacity(0.7) ?? theme.primaryColor.withOpacity(0.7),
            ],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Center(
          child: Text(
            message.userAvatar!,
            style: const TextStyle(fontSize: 18),
          ),
        ),
      );
    } else if (message.userAvatar?.isNotEmpty == true) {
      // –î–ª—è URL –∞–≤–∞—Ç–∞—Ä–æ–≤
      return Container(
        width: 36,
        height: 36,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          image: DecorationImage(
            image: NetworkImage(message.userAvatar!),
            fit: BoxFit.cover,
          ),
        ),
      );
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      return Container(
        width: 36,
        height: 36,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          gradient: LinearGradient(
            colors: [
              message.userColor ?? theme.primaryColor,
              message.userColor?.withOpacity(0.7) ?? theme.primaryColor.withOpacity(0.7),
            ],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Center(
          child: Text(
            message.sender[0].toUpperCase(),
            style: const TextStyle(
              fontSize: 14,
              color: Colors.white,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      );
    }
  }

  void _copyMessageText(ChatMessage message) {
    Clipboard.setData(ClipboardData(text: message.text));
    showSnackBar('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω');
  }

  void showBotManagementDialog() {
    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) {
          return AlertDialog(
            title: const Row(
              children: [
                Icon(Icons.smart_toy),
                SizedBox(width: 8),
                Text('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏'),
              ],
            ),
            content: SizedBox(
              width: double.maxFinite,
              child: ListView.builder(
                shrinkWrap: true,
                itemCount: _availableBots.length,
                itemBuilder: (context, index) {
                  final bot = _availableBots[index];
                  final isActive = _activeBots.any((b) => b.id == bot.id);

                  return ListTile(
                    leading: Container(
                      width: 40,
                      height: 40,
                      decoration: BoxDecoration(
                        color: bot.color.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: Center(
                        child: Text(
                          bot.avatar,
                          style: const TextStyle(fontSize: 20),
                        ),
                      ),
                    ),
                    title: Text(bot.name),
                    subtitle: Text(
                      bot.description,
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: Switch(
                      value: isActive,
                      onChanged: (value) {
                        toggleBot(bot.id, value);
                        setState(() {});
                      },
                    ),
                  );
                },
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
              ),
            ],
          );
        },
      ),
    );
  }

  void showSettingsDialog() {
    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) {
          return AlertDialog(
            title: const Row(
              children: [
                Icon(Icons.settings),
                SizedBox(width: 8),
                Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞'),
              ],
            ),
            content: SizedBox(
              width: double.maxFinite,
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  SwitchListTile(
                    title: const Text('–û—Ç–≤–µ—Ç—ã –±–æ—Ç–æ–≤'),
                    subtitle: const Text('–†–∞–∑—Ä–µ—à–∏—Ç—å –±–æ—Ç–∞–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è'),
                    value: _chatSettings.enableBotResponses,
                    onChanged: (value) {
                      final newSettings = _chatSettings.copyWith(enableBotResponses: value);
                      updateChatSettings(newSettings);
                      setState(() {});
                    },
                  ),
                  SwitchListTile(
                    title: const Text('–ü–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π'),
                    subtitle: const Text('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π'),
                    value: _chatSettings.translationEnabled,
                    onChanged: (value) {
                      final newSettings = _chatSettings.copyWith(translationEnabled: value);
                      updateChatSettings(newSettings);
                      setState(() {});
                    },
                  ),
                  SwitchListTile(
                    title: const Text('–ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
                    subtitle: const Text('–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∑–≤—É–∫ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö'),
                    value: _chatSettings.soundEnabled,
                    onChanged: (value) {
                      final newSettings = _chatSettings.copyWith(soundEnabled: value);
                      updateChatSettings(newSettings);
                      setState(() {});
                    },
                  ),
                  const SizedBox(height: 16),
                  const Text(
                    '–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞',
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                  Slider(
                    value: _chatSettings.fontSize,
                    min: 12.0,
                    max: 24.0,
                    divisions: 6,
                    onChanged: (value) {
                      final newSettings = _chatSettings.copyWith(fontSize: value);
                      updateChatSettings(newSettings);
                      setState(() {});
                    },
                  ),
                ],
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
              ),
            ],
          );
        },
      ),
    );
  }

  // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï UI –ú–ï–¢–û–î–´ ===

  void showEnhancedAttachmentMenu() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        decoration: BoxDecoration(
          color: Theme.of(context).colorScheme.surface,
          borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
        ),
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(
                  '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 20),
                Wrap(
                  spacing: 16,
                  runSpacing: 16,
                  children: [
                    _buildAttachmentOption(Icons.photo, '–§–æ—Ç–æ', () {}),
                    _buildAttachmentOption(Icons.videocam, '–í–∏–¥–µ–æ', () {}),
                    _buildAttachmentOption(Icons.audio_file, '–ê—É–¥–∏–æ', () {}),
                    _buildAttachmentOption(Icons.insert_drive_file, '–î–æ–∫—É–º–µ–Ω—Ç', () {}),
                    _buildAttachmentOption(Icons.location_on, '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', () {}),
                    _buildAttachmentOption(Icons.contact_page, '–ö–æ–Ω—Ç–∞–∫—Ç', () {}),
                  ],
                ),
                const SizedBox(height: 24),
                OutlinedButton(
                  onPressed: () => Navigator.pop(context),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Theme.of(context).colorScheme.onSurface,
                    side: BorderSide(color: Theme.of(context).dividerColor),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                    minimumSize: const Size(double.infinity, 50),
                  ),
                  child: const Text('–û—Ç–º–µ–Ω–∞'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildAttachmentOption(IconData icon, String label, VoidCallback onTap) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        width: 80,
        height: 80,
        decoration: BoxDecoration(
          color: Theme.of(context).colorScheme.background,
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 4,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 30, color: Theme.of(context).primaryColor),
            const SizedBox(height: 8),
            Text(
              label,
              style: Theme.of(context).textTheme.bodySmall,
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  Widget buildStickersPanel({required Function(String) onStickerSelected}) {
    final stickerPacks = [
      ['üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ'],
      ['üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ'],
      ['üòå', 'üòç', 'ü•∞', 'üòò', 'üòó'],
      ['üòô', 'üòö', 'üòã', 'üòõ', 'üòù'],
    ];

    return Container(
      height: 180,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        border: Border(
          top: BorderSide(color: Theme.of(context).dividerColor.withOpacity(0.3)),
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: Column(
        children: [
          TabBar(
            controller: TabController(length: 4, vsync: Navigator.of(context)),
            isScrollable: true,
            tabs: List.generate(
                stickerPacks.length,
                    (index) => Tab(text: 'Pack ${index + 1}')
            ),
          ),
          const SizedBox(height: 12),
          Expanded(
            child: GridView.builder(
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 5,
                crossAxisSpacing: 8,
                mainAxisSpacing: 8,
              ),
              itemCount: stickerPacks[0].length,
              itemBuilder: (context, index) {
                return GestureDetector(
                  onTap: () => onStickerSelected(stickerPacks[0][index]),
                  child: Container(
                    decoration: BoxDecoration(
                      color: Theme.of(context).colorScheme.background,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Center(
                      child: Text(
                        stickerPacks[0][index],
                        style: const TextStyle(fontSize: 24),
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget buildLoadingShimmer() {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: 10,
      itemBuilder: (context, index) {
        return Shimmer.fromColors(
          baseColor: Colors.grey[300]!,
          highlightColor: Colors.grey[100]!,
          child: Container(
            margin: const EdgeInsets.only(bottom: 16),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  width: 40,
                  height: 40,
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(20),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Container(
                        width: 120,
                        height: 16,
                        color: Colors.white,
                      ),
                      const SizedBox(height: 8),
                      Container(
                        width: double.infinity,
                        height: 60,
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  void showSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Theme.of(context).primaryColor,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void dispose() {
    _translationCache.clear();
    _userColors.clear();
  }
}