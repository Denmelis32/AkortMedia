// utils/community_navigation.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../rooms_pages/community_detail_page.dart';
import '../models/community.dart';
import '../../../providers/user_provider.dart';
import '../widgets/create_community_bottom_sheet.dart';

class CommunityNavigation {
  void createNewCommunity(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => CreateCommunityBottomSheet(
        onCommunityCreated: (newCommunity) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('–°–æ–æ–±—â–µ—Å—Ç–≤–æ "${newCommunity.name}" —Å–æ–∑–¥–∞–Ω–æ! üéâ'),
              backgroundColor: Colors.green,
              duration: const Duration(seconds: 3),
              action: SnackBarAction(
                label: '–û—Ç–∫—Ä—ã—Ç—å',
                onPressed: () {
                  openCommunityDetail(
                    context: context,
                    community: newCommunity,
                    selectedTab: 0,
                  );
                },
              ),
            ),
          );
        },
      ),
    );
  }

  void openCommunityDetail({
    required BuildContext context,
    required Community community,
    required int selectedTab,
  }) {
    Navigator.push(
      context,
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) => CommunityDetailPage(
          community: community,
          initialTab: selectedTab,
        ),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          const begin = Offset(1.0, 0.0);
          const end = Offset.zero;
          const curve = Curves.easeInOutQuart;

          var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));
          var offsetAnimation = animation.drive(tween);

          return SlideTransition(position: offsetAnimation, child: child);
        },
        transitionDuration: const Duration(milliseconds: 400),
      ),
    );
  }

  void joinCommunity(BuildContext context, Community community) {
    final userProvider = context.read<UserProvider>();

    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É "${community.name}" üéâ'),
        backgroundColor: Colors.green,
        duration: const Duration(seconds: 3),
        action: SnackBarAction(
          label: '–û—Ç–∫—Ä—ã—Ç—å',
          onPressed: () {
            openCommunityDetail(
              context: context,
              community: community,
              selectedTab: 0,
            );
          },
        ),
      ),
    );
  }

  void leaveCommunity(BuildContext context, Community community) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ü–æ–∫–∏–Ω—É—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ'),
        content: Text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ "${community.name}"?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ "${community.name}"'),
                  backgroundColor: Colors.orange,
                  duration: const Duration(seconds: 2),
                ),
              );
            },
            style: TextButton.styleFrom(
              foregroundColor: Colors.red,
            ),
            child: const Text('–ü–æ–∫–∏–Ω—É—Ç—å'),
          ),
        ],
      ),
    );
  }

  void shareCommunity(BuildContext context, Community community) {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —à–∞—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ "${community.name}" —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞'),
        duration: const Duration(seconds: 2),
      ),
    );
  }

  void reportCommunity(BuildContext context, Community community) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ'),
        content: const Text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º'),
                  backgroundColor: Colors.orange,
                ),
              );
            },
            child: const Text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å'),
          ),
        ],
      ),
    );
  }
}