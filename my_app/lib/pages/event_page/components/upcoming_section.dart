import 'package:flutter/material.dart';
import '../event_model.dart';
import '../widgets/event/adaptive_event_card.dart';

class UpcomingSection extends StatelessWidget {
  final List<Event> events;
  final Set<String> favoriteEvents;
  final Set<String> attendingEvents;
  final Map<String, int> eventViews;
  final ValueChanged<Event> onEventTap;
  final ValueChanged<String> onFavorite;
  final ValueChanged<String> onAttend;
  final VoidCallback onCreateEvent;

  const UpcomingSection({
    Key? key,
    required this.events,
    required this.favoriteEvents,
    required this.attendingEvents,
    required this.eventViews,
    required this.onEventTap,
    required this.onFavorite,
    required this.onAttend,
    required this.onCreateEvent,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final bool isMobile = screenWidth < 600;

    // üéØ –ê–î–ê–ü–¢–ò–í–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ö–û–õ–û–ù–û–ö –° –ó–ê–©–ò–¢–û–ô –û–¢ OVERFLOW
    final crossAxisCount = _getAdaptiveCrossAxisCount(screenWidth);

    // üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
    if (events.isEmpty) {
      return _buildEmptyState(context);
    }

    return SliverPadding(
      padding: _getAdaptivePadding(screenWidth, isMobile),
      sliver: SliverGrid(
        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: crossAxisCount,
          crossAxisSpacing: _getCrossAxisSpacing(screenWidth),
          mainAxisSpacing: _getMainAxisSpacing(screenWidth),
          childAspectRatio: _getChildAspectRatio(screenWidth, crossAxisCount),
        ),
        delegate: SliverChildBuilderDelegate(
              (context, index) {
            // üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞
            if (index >= events.length) return const SizedBox.shrink();

            final event = events[index];
            return Container(
              // üõ°Ô∏è –û–ì–†–ê–ù–ò–ß–ò–¢–ï–õ–¨ –î–õ–Ø –ö–ê–†–¢–û–ß–ö–ò
              constraints: BoxConstraints(
                maxWidth: _getMaxCardWidth(screenWidth, crossAxisCount),
              ),
              child: AdaptiveEventCard(
                event: event,
                isFavorite: favoriteEvents.contains(event.id),
                isAttending: attendingEvents.contains(event.id),
                onTap: () => onEventTap(event),
                onFavorite: () => onFavorite(event.id),
                onAttend: () => onAttend(event.id),
                viewCount: eventViews[event.id] ?? 0,
              ),
            );
          },
          childCount: events.length,
        ),
      ),
    );
  }

  // üéØ –ê–î–ê–ü–¢–ò–í–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ö–û–õ–û–ù–û–ö
  int _getAdaptiveCrossAxisCount(double screenWidth) {
    if (screenWidth < 600) return 1; // üì± –ú–æ–±–∏–ª—å–Ω—ã–µ
    if (screenWidth < 800) return 2; // üíª –ú–∞–ª–µ–Ω—å–∫–∏–µ –¥–µ—Å–∫—Ç–æ–ø—ã
    if (screenWidth < 1200) return 2; // üíª –°—Ä–µ–¥–Ω–∏–µ –¥–µ—Å–∫—Ç–æ–ø—ã
    return 2; // üñ•Ô∏è –ë–æ–ª—å—à–∏–µ –¥–µ—Å–∫—Ç–æ–ø—ã (–º–∞–∫—Å–∏–º—É–º 2 –∫–æ–ª–æ–Ω–∫–∏)
  }

  // üéØ –ê–î–ê–ü–¢–ò–í–ù–´–ï –û–¢–°–¢–£–ü–´
  EdgeInsets _getAdaptivePadding(double screenWidth, bool isMobile) {
    if (screenWidth < 600) {
      return const EdgeInsets.symmetric(horizontal: 12, vertical: 16);
    } else if (screenWidth < 800) {
      return const EdgeInsets.symmetric(horizontal: 16, vertical: 16);
    } else if (screenWidth < 1200) {
      return const EdgeInsets.symmetric(horizontal: 20, vertical: 16);
    } else {
      return const EdgeInsets.symmetric(horizontal: 24, vertical: 16);
    }
  }

  // üéØ –ê–î–ê–ü–¢–ò–í–ù–´–ï –†–ê–°–°–¢–û–Ø–ù–ò–Ø –ú–ï–ñ–î–£ –ö–û–õ–û–ù–ö–ê–ú–ò
  double _getCrossAxisSpacing(double screenWidth) {
    if (screenWidth < 600) return 12;
    if (screenWidth < 800) return 16;
    if (screenWidth < 1200) return 20;
    return 24;
  }

  // üéØ –ê–î–ê–ü–¢–ò–í–ù–´–ï –†–ê–°–°–¢–û–Ø–ù–ò–Ø –ú–ï–ñ–î–£ –°–¢–†–û–ö–ê–ú–ò
  double _getMainAxisSpacing(double screenWidth) {
    if (screenWidth < 600) return 16;
    if (screenWidth < 800) return 20;
    if (screenWidth < 1200) return 24;
    return 28;
  }

  // üéØ –ê–î–ê–ü–¢–ò–í–ù–û–ï –°–û–û–¢–ù–û–®–ï–ù–ò–ï –°–¢–û–†–û–ù
  double _getChildAspectRatio(double screenWidth, int crossAxisCount) {
    if (screenWidth < 600) {
      return 2.5; // üì± –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    }

    // üíª –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    if (screenWidth < 800) return 1.8;  // –ú–µ–Ω—å—à–∏–µ —ç–∫—Ä–∞–Ω—ã
    if (screenWidth < 1200) return 1.9; // –°—Ä–µ–¥–Ω–∏–µ —ç–∫—Ä–∞–Ω—ã
    return 2.1; // –ë–æ–ª—å—à–∏–µ —ç–∫—Ä–∞–Ω—ã
  }

  // üõ°Ô∏è –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –®–ò–†–ò–ù–ê –ö–ê–†–¢–û–ß–ö–ò –î–õ–Ø –ó–ê–©–ò–¢–´ –û–¢ OVERFLOW
  double _getMaxCardWidth(double screenWidth, int crossAxisCount) {
    final horizontalPadding = _getAdaptivePadding(screenWidth, false).horizontal;
    final crossAxisSpacing = _getCrossAxisSpacing(screenWidth);

    // üéØ –†–ê–°–ß–ï–¢ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –®–ò–†–ò–ù–´ –° –£–ß–ï–¢–û–ú –û–¢–°–¢–£–ü–û–í
    final availableWidth = screenWidth - horizontalPadding - (crossAxisSpacing * (crossAxisCount - 1));
    final maxWidth = availableWidth / crossAxisCount;

    // üõ°Ô∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê - –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï 400px
    return maxWidth.clamp(300, 400);
  }

  Widget _buildEmptyState(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final isMobile = screenWidth < 600;

    return SliverToBoxAdapter(
      child: Container(
        height: isMobile ? 200 : 240,
        margin: EdgeInsets.symmetric(
          horizontal: _getEmptyStateHorizontalMargin(screenWidth),
          vertical: 32,
        ),
        padding: const EdgeInsets.all(24),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              blurRadius: 12,
              offset: const Offset(0, 4),
            ),
          ],
          border: Border.all(color: Colors.grey[200]!),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // üéØ –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–∫–æ–Ω–∫–∞
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.blue[50],
                shape: BoxShape.circle,
              ),
              child: Icon(
                Icons.event_available_outlined,
                size: isMobile ? 32 : 40,
                color: Colors.blue[600],
              ),
            ),
            const SizedBox(height: 20),

            // üõ°Ô∏è –¢–µ–∫—Å—Ç —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç overflow
            Container(
              constraints: BoxConstraints(
                maxWidth: _getEmptyStateMaxTextWidth(screenWidth),
              ),
              child: Column(
                children: [
                  Text(
                    '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç',
                    style: TextStyle(
                      fontSize: _getEmptyStateTitleSize(screenWidth),
                      fontWeight: FontWeight.w700,
                      color: Colors.grey[800],
                    ),
                    textAlign: TextAlign.center,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ',
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      color: Colors.grey[600],
                      fontSize: _getEmptyStateSubtitleSize(screenWidth),
                      height: 1.4,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),

            if (!isMobile) ...[
              const SizedBox(height: 24),
              // üéØ –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
              ElevatedButton.icon(
                onPressed: onCreateEvent,
                icon: const Icon(Icons.add_circle_outline, size: 20),
                label: const Text(
                  '–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ',
                  style: TextStyle(fontSize: 15, fontWeight: FontWeight.w600),
                ),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue[600],
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  elevation: 2,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  // üéØ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø EMPTY STATE
  double _getEmptyStateHorizontalMargin(double screenWidth) {
    if (screenWidth < 600) return 16;
    if (screenWidth < 800) return 20;
    return 24;
  }

  double _getEmptyStateMaxTextWidth(double screenWidth) {
    if (screenWidth < 600) return 250;
    if (screenWidth < 800) return 280;
    return 300;
  }

  double _getEmptyStateTitleSize(double screenWidth) {
    if (screenWidth < 600) return 18;
    if (screenWidth < 800) return 19;
    return 20;
  }

  double _getEmptyStateSubtitleSize(double screenWidth) {
    if (screenWidth < 600) return 14;
    if (screenWidth < 800) return 14.5;
    return 15;
  }
}