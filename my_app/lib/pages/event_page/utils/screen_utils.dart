import 'package:flutter/material.dart';

enum ScreenSize {
  small,      // < 360px
  medium,     // 360-420px
  large,      // 420-600px
  tablet,     // 600-900px
  desktop,    // 900-1200px
  largeDesktop, // > 1200px
}

class ScreenUtils {
  static ScreenSize getScreenSize(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    if (width < 360) return ScreenSize.small;
    if (width < 420) return ScreenSize.medium;
    if (width < 600) return ScreenSize.large;
    if (width < 900) return ScreenSize.tablet;
    if (width < 1200) return ScreenSize.desktop;
    return ScreenSize.largeDesktop;
  }

  // üÜï –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î - –¢–ê–ö–ò–ï –ñ–ï –û–¢–°–¢–£–ü–´ –ö–ê–ö –í CARDS_PAGE
  static double getHorizontalPadding(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    if (width > 1200) return 200;
    if (width > 800) return 100;
    if (width > 600) return 60;
    return 0;
  }

  // üÜï –ü–†–û–°–¢–û–ô –ú–ï–¢–û–î –î–õ–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ú–û–ë–ò–õ–¨–ù–û–ì–û –£–°–¢–†–û–ô–°–¢–í–ê
  static bool isMobileDevice(BuildContext context) {
    return MediaQuery.of(context).size.width <= 600;
  }

  static int getCrossAxisCount(BuildContext context) {
    final screenSize = getScreenSize(context);
    switch (screenSize) {
      case ScreenSize.small:
      case ScreenSize.medium:
      case ScreenSize.large: return 1;
      case ScreenSize.tablet: return 2;
      case ScreenSize.desktop: return 3;
      case ScreenSize.largeDesktop: return 4;
    }
  }

  // üÜï –£–ü–†–û–©–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ú–ê–õ–ï–ù–¨–ö–ò–• –≠–ö–†–ê–ù–û–í
  static bool isSmallScreen(BuildContext context) {
    final screenSize = getScreenSize(context);
    return screenSize == ScreenSize.small || screenSize == ScreenSize.medium;
  }

  // üÜï –í–´–°–û–¢–ê –ö–ê–†–¢–û–ß–ö–ò –î–õ–Ø FEATURED SECTION
  static double getFeaturedCardHeight(BuildContext context) {
    final screenSize = getScreenSize(context);
    switch (screenSize) {
      case ScreenSize.small: return 180;
      case ScreenSize.medium: return 200;
      case ScreenSize.large: return 220;
      case ScreenSize.tablet: return 240;
      case ScreenSize.desktop: return 260;
      case ScreenSize.largeDesktop: return 280;
    }
  }

  // üÜï –®–ò–†–ò–ù–ê –ö–ê–†–¢–û–ß–ö–ò –î–õ–Ø FEATURED SECTION
  static double getFeaturedCardWidth(BuildContext context) {
    final screenSize = getScreenSize(context);
    switch (screenSize) {
      case ScreenSize.small: return 260;
      case ScreenSize.medium: return 280;
      case ScreenSize.large: return 300;
      case ScreenSize.tablet: return 320;
      case ScreenSize.desktop: return 340;
      case ScreenSize.largeDesktop: return 360;
    }
  }

  // üÜï –°–û–û–¢–ù–û–®–ï–ù–ò–ï –°–¢–û–†–û–ù –î–õ–Ø –°–ï–¢–ö–ò
  static double getChildAspectRatio(BuildContext context) {
    final screenSize = getScreenSize(context);

    switch (screenSize) {
      case ScreenSize.small:
      case ScreenSize.medium:
      case ScreenSize.large:
        return 0.75; // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
      case ScreenSize.tablet:
        return 0.9; // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è 2 –∫–æ–ª–æ–Ω–æ–∫
      case ScreenSize.desktop:
      case ScreenSize.largeDesktop:
        return 0.8; // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è 3-4 –∫–æ–ª–æ–Ω–æ–∫
    }
  }

  // üÜï –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø –í–´–°–û–¢–ê –ö–ê–†–¢–û–ß–ö–ò
  static double getRecommendedCardHeight(BuildContext context) {
    final screenSize = getScreenSize(context);

    switch (screenSize) {
      case ScreenSize.small:
        return 140;
      case ScreenSize.medium:
        return 150;
      case ScreenSize.large:
        return 160;
      case ScreenSize.tablet:
        return 120;
      case ScreenSize.desktop:
        return 140;
      case ScreenSize.largeDesktop:
        return 160;
    }
  }

  // üÜï –û–¢–°–¢–£–ü–´ –î–õ–Ø –°–ï–¢–ö–ò
  static EdgeInsets getGridPadding(BuildContext context) {
    final isMobile = isMobileDevice(context);
    final horizontalPadding = getHorizontalPadding(context);

    if (isMobile) {
      return const EdgeInsets.symmetric(horizontal: 16, vertical: 8);
    } else {
      return EdgeInsets.symmetric(
        horizontal: horizontalPadding,
        vertical: 16,
      );
    }
  }

  // üÜï –í–´–°–û–¢–ê –ö–ê–†–¢–û–ß–ö–ò
  static double getCardHeight(BuildContext context) {
    final screenSize = getScreenSize(context);

    switch (screenSize) {
      case ScreenSize.small:
        return 140;
      case ScreenSize.medium:
        return 150;
      case ScreenSize.large:
        return 160;
      case ScreenSize.tablet:
        return 180;
      case ScreenSize.desktop:
        return 200;
      case ScreenSize.largeDesktop:
        return 220;
    }
  }

  // üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –û–¢–°–¢–£–ü–´ –î–õ–Ø –°–ï–ö–¶–ò–ô –ö–ê–ö –í CARDS_PAGE
  static EdgeInsets getSectionPadding(BuildContext context) {
    final isMobile = isMobileDevice(context);
    final horizontalPadding = getHorizontalPadding(context);

    return EdgeInsets.symmetric(
      horizontal: isMobile ? 0 : horizontalPadding,
      vertical: 16,
    );
  }

  // üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –í–ù–£–¢–†–ï–ù–ù–ò–ï –û–¢–°–¢–£–ü–´ –î–õ–Ø –ö–û–ù–¢–ï–ù–¢–ê
  static EdgeInsets getContentPadding(BuildContext context) {
    final isMobile = isMobileDevice(context);

    return EdgeInsets.symmetric(
      horizontal: isMobile ? 16 : 0,
    );
  }

  // üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –®–ò–†–ò–ù–ê –ö–û–ù–¢–ï–ù–¢–ê
  static double getMaxContentWidth(BuildContext context) {
    return 1400; // –¢–∞–∫–∞—è –∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞–∫ –≤ CardsPage
  }

  // üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: PADDING –î–õ–Ø –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–´–• –°–ü–ò–°–ö–û–í
  static EdgeInsets getHorizontalListPadding(BuildContext context) {
    final isMobile = isMobileDevice(context);
    final horizontalPadding = getHorizontalPadding(context);

    return EdgeInsets.only(
      left: isMobile ? 16 : 0,
      right: isMobile ? 16 : horizontalPadding,
    );
  }

  // üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê –ú–û–ë–ò–õ–¨–ù–û–ï –£–°–¢–†–û–ô–°–¢–í–û
  static bool isMobile(BuildContext context) {
    return MediaQuery.of(context).size.width <= 600;
  }
}