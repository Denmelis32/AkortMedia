// üë§ –ö–û–ú–ü–û–ù–ï–ù–¢ –®–ê–ü–ö–ò –û–ë–´–ß–ù–û–ì–û –ü–û–°–¢–ê
// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä, –∏–º—è –∞–≤—Ç–æ—Ä–∞, –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../../providers/user_tags_provider.dart';
import '../../../../providers/user_provider.dart';
import '../../dialogs/tag_edit_dialog.dart';
import '../../models/news_card_enums.dart';
import '../../utils/image_utils.dart';
import '../../utils/layout_utils.dart';
import '../tags/personal_tags.dart';

class NewsCardHeader extends StatelessWidget {
  final Map<String, dynamic> news;
  final VoidCallback onUserProfile;
  final Function(String) onMenuPressed;
  final String Function(String) formatDate;
  final String Function(String) getTimeAgo;
  final UserTagsProvider? userTagsProvider;
  final bool isChannelPost;
  final bool isRepost;

  const NewsCardHeader({
    super.key,
    required this.news,
    required this.onUserProfile,
    required this.onMenuPressed,
    required this.formatDate,
    required this.getTimeAgo,
    this.userTagsProvider,
    this.isChannelPost = false,
    this.isRepost = false,
  });

  @override
  Widget build(BuildContext context) {
    final userProvider = Provider.of<UserProvider>(context, listen: false);

    // üìä –ü–û–õ–£–ß–ê–ï–ú –î–ê–ù–ù–´–ï –ê–í–¢–û–†–ê
    final authorName = _getStringValue(news['author_name']);
    final channelName = _getStringValue(news['channel_name']);
    final channelId = _getStringValue(news['channel_id']);
    final createdAt = _getStringValue(news['created_at']);

    // üéØ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –û–¢–û–ë–†–ê–ñ–ê–ï–ú–û–ï –ò–ú–Ø –ò –¢–ò–ü
    final displayName = isChannelPost && channelName.isNotEmpty ? channelName : authorName;
    final isCurrentUser = authorName == userProvider.userName;

    // üñºÔ∏è –ü–û–õ–£–ß–ê–ï–ú –ê–í–ê–¢–ê–†–ö–£
    final avatarUrl = ImageUtils.getUserAvatarUrl(
      news: news,
      userName: displayName,
      isCurrentUser: isCurrentUser,
    );

    // üè∑Ô∏è –ü–û–õ–£–ß–ê–ï–ú –ü–ï–†–í–´–ô –¢–ï–ì –ò–õ–ò –ü–£–°–¢–û–ô –ú–ê–°–°–ò–í
    final userTags = _getUserTags();

    return Padding(
      padding: const EdgeInsets.fromLTRB(20, 16, 20, 0),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // üñºÔ∏è –ê–í–ê–¢–ê–†–ö–ê
          ImageUtils.buildUserAvatarWidget(
            avatarUrl: avatarUrl,
            displayName: displayName,
            size: LayoutUtils.getAvatarSize(context),
            onTap: onUserProfile,
          ),

          const SizedBox(width: 16),

          // üìù –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–í–¢–û–†–ï –ò –ú–ï–¢–ê-–î–ê–ù–ù–´–ï
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisSize: MainAxisSize.min,
              children: [
                // üë§ –ò–ú–Ø –ê–í–¢–û–†–ê –ò –ö–ù–û–ü–ö–ê –ú–ï–ù–Æ
                Row(
                  children: [
                    Expanded(
                      child: GestureDetector(
                        onTap: onUserProfile,
                        child: Text(
                          displayName,
                          style: TextStyle(
                            fontWeight: FontWeight.w800,
                            fontSize: LayoutUtils.getTitleFontSize(context),
                            color: Colors.black87,
                            letterSpacing: -0.3,
                            height: 1.1,
                          ),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                    ),

                    // üéØ –ö–ù–û–ü–ö–ê –ú–ï–ù–Æ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö –ø–æ—Å—Ç–æ–≤ –∏–ª–∏ –Ω–µ-–∫–∞–Ω–∞–ª–æ–≤)
                    if (!isRepost || displayName == userProvider.userName)
                      _buildMenuButton(context),
                  ],
                ),

                const SizedBox(height: 4),

                // üìä –ú–ï–¢–ê-–ò–ù–§–û–†–ú–ê–¶–ò–Ø
                _buildMetaInfo(
                  context: context,
                  isRepost: isRepost,
                  isChannelPost: isChannelPost,
                  createdAt: createdAt,
                  userTags: userTags,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// üìä –°–û–ó–î–ê–ï–¢ –°–ï–ö–¶–ò–Æ –ú–ï–¢–ê-–ò–ù–§–û–†–ú–ê–¶–ò–ò
  /// üìä –°–û–ó–î–ê–ï–¢ –°–ï–ö–¶–ò–Æ –ú–ï–¢–ê-–ò–ù–§–û–†–ú–ê–¶–ò–ò
  /// üìä –°–û–ó–î–ê–ï–¢ –°–ï–ö–¶–ò–Æ –ú–ï–¢–ê-–ò–ù–§–û–†–ú–ê–¶–ò–ò
  Widget _buildMetaInfo({
    required BuildContext context,
    required bool isRepost,
    required bool isChannelPost,
    required String createdAt,
    required Map<String, String> userTags,
  }) {
    // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–≥–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–≥
    final hasPersonalTags = userTags.isNotEmpty &&
        userTags.values.any((tag) => tag.isNotEmpty && tag != '–ù–æ–≤—ã–π —Ç–µ–≥') &&
        !isRepost;

    // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    final shouldShowContentType = !isRepost && _shouldShowContentType();

    return Container(
      height: LayoutUtils.getTagsSectionHeight(context),
      child: SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            // ‚è∞ –í–†–ï–ú–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò
            Row(
              children: [
                Icon(Icons.access_time_rounded, size: 12, color: Colors.grey[600]),
                const SizedBox(width: 4),
                Text(
                  getTimeAgo(createdAt),
                  style: TextStyle(
                    color: Colors.grey[600],
                    fontSize: 11,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),

            // üè∑Ô∏è –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –¢–ï–ì–ò (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-—Ä–µ–ø–æ—Å—Ç–æ–≤ –∏ –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Ç–µ–≥–∏)
            if (hasPersonalTags) ...[
              const SizedBox(width: 12),
              Container(
                width: 3,
                height: 3,
                decoration: BoxDecoration(
                    color: Colors.grey.withOpacity(0.5),
                    shape: BoxShape.circle
                ),
              ),
              const SizedBox(width: 8),

              // üéØ –ö–û–ú–ü–û–ù–ï–ù–¢ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–• –¢–ï–ì–û–í (–¢–û–õ–¨–ö–û –û–î–ò–ù –¢–ï–ì)
              PersonalTagsSection(
                userTags: userTags,
                news: news,
                userTagsProvider: userTagsProvider,
                showOnlyFirstTag: true,
              ),
            ],

            // ‚ûï –ö–ù–û–ü–ö–ê –î–û–ë–ê–í–ò–¢–¨ –¢–ï–ì (–µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–æ–≤ –ò —ç—Ç–æ –Ω–µ —Ä–µ–ø–æ—Å—Ç/–∫–∞–Ω–∞–ª)
            if (!hasPersonalTags && !isRepost && !isChannelPost) ...[
              const SizedBox(width: 12),
              Container(
                width: 3,
                height: 3,
                decoration: BoxDecoration(
                    color: Colors.grey.withOpacity(0.5),
                    shape: BoxShape.circle
                ),
              ),
              const SizedBox(width: 8),
              _buildAddTagButton(context),
            ],

            // üì¢ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ò–ü–ï –ö–û–ù–¢–ï–ù–¢–ê (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-—Ä–µ–ø–æ—Å—Ç–æ–≤)
            if (!isRepost) ...[
              if (isChannelPost) ...[
                const SizedBox(width: 12),
                Container(
                  width: 3,
                  height: 3,
                  decoration: BoxDecoration(
                      color: Colors.grey.withOpacity(0.5),
                      shape: BoxShape.circle
                  ),
                ),
                const SizedBox(width: 8),
                Icon(Icons.group_rounded, size: 12, color: Colors.blue),
                const SizedBox(width: 4),
                Text(
                  '–ö–∞–Ω–∞–ª',
                  style: TextStyle(
                      color: Colors.blue,
                      fontSize: 11,
                      fontWeight: FontWeight.w700
                  ),
                ),
              ] else if (shouldShowContentType) ...[
                // üé™ –¢–ò–ü –ö–û–ù–¢–ï–ù–¢–ê –î–õ–Ø –û–ë–´–ß–ù–´–• –ü–û–°–¢–û–í
                _buildContentTypeInfo(context),
              ],
            ],
          ],
        ),
      ),
    );
  }

  /// üé™ –û–ü–†–ï–î–ï–õ–Ø–ï–¢ –ù–£–ñ–ù–û –õ–ò –ü–û–ö–ê–ó–´–í–ê–¢–¨ –¢–ò–ü –ö–û–ù–¢–ï–ù–¢–ê
  bool _shouldShowContentType() {
    final contentType = LayoutUtils.getContentType(news);
    return contentType != ContentType.general;
  }

  /// üé™ –°–û–ó–î–ê–ï–¢ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –¢–ò–ü–ï –ö–û–ù–¢–ï–ù–¢–ê
  Widget _buildContentTypeInfo(BuildContext context) {
    final contentType = LayoutUtils.getContentType(news);
    final contentColor = LayoutUtils.getContentColor(contentType, LayoutUtils.getCardDesign(news));
    final contentIcon = LayoutUtils.getContentIcon(contentType);
    final contentTypeText = LayoutUtils.getContentTypeText(contentType);

    return Row(
      children: [
        const SizedBox(width: 12),
        Container(
          width: 3,
          height: 3,
          decoration: BoxDecoration(
              color: Colors.grey.withOpacity(0.5),
              shape: BoxShape.circle
          ),
        ),
        const SizedBox(width: 8),
        Icon(contentIcon, size: 12, color: contentColor),
        const SizedBox(width: 4),
        Text(
          contentTypeText,
          style: TextStyle(
            color: contentColor,
            fontSize: 11,
            fontWeight: FontWeight.w700,
          ),
        ),
      ],
    );
  }

  /// ‚ûï –°–û–ó–î–ê–ï–¢ –ö–ù–û–ü–ö–£ "–î–û–ë–ê–í–ò–¢–¨ –¢–ï–ì"
  Widget _buildAddTagButton(BuildContext context) {
    return GestureDetector(
      onTap: () {
        print('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥');
        _showAddTagDialog(context);
      },
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
        decoration: BoxDecoration(
          color: Colors.grey.withOpacity(0.08),
          borderRadius: BorderRadius.circular(6),
          border: Border.all(color: Colors.grey.withOpacity(0.2)),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(Icons.add, size: 12, color: Colors.grey[600]),
            const SizedBox(width: 4),
            Text(
              '–¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥',
              style: TextStyle(
                color: Colors.grey[600],
                fontSize: 11,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// üé™ –ü–û–ö–ê–ó–´–í–ê–ï–¢ –î–ò–ê–õ–û–ì –î–û–ë–ê–í–õ–ï–ù–ò–Ø –¢–ï–ì–ê
  /// üé™ –ü–û–ö–ê–ó–´–í–ê–ï–¢ –î–ò–ê–õ–û–ì –î–û–ë–ê–í–õ–ï–ù–ò–Ø –¢–ï–ì–ê
  void _showAddTagDialog(BuildContext context) {
    final postId = _getStringValue(news['id']);
    final cardDesign = LayoutUtils.getCardDesign(news);

    print('‚ûï –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞ –¥–ª—è –ø–æ—Å—Ç–∞ $postId');

    showDialog(
      context: context,
      builder: (context) => TagEditDialog(
        initialTagName: '–ù–æ–≤—ã–π —Ç–µ–≥', // –ù–∞—á–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        tagId: 'tag1', // ID –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–≥–∞
        initialColor: cardDesign.accentColor, // –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        news: news,
        userTagsProvider: userTagsProvider,
        cardDesign: cardDesign,
      ),
    );
  }



  /// üéØ –°–û–ó–î–ê–ï–¢ –ö–ù–û–ü–ö–£ –ú–ï–ù–Æ
  Widget _buildMenuButton(BuildContext context) {
    return Container(
      width: 32,
      height: 32,
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: BorderRadius.circular(10),
        border: Border.all(color: Colors.grey[200]!),
      ),
      child: PopupMenuButton<String>(
        icon: Icon(Icons.more_vert_rounded, color: Colors.grey[600], size: 18),
        onSelected: onMenuPressed,
        itemBuilder: (BuildContext context) => [
          PopupMenuItem(
            value: 'share',
            child: Row(
              children: [
                Container(
                  width: 20,
                  height: 20,
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(6),
                  ),
                  child: Icon(Icons.share_rounded, color: Colors.blue, size: 14),
                ),
                const SizedBox(width: 12),
                Text('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', style: TextStyle(fontSize: 14, fontWeight: FontWeight.w500)),
              ],
            ),
          ),
        ],
        padding: EdgeInsets.zero,
        constraints: const BoxConstraints(minWidth: 160),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  /// üè∑Ô∏è –ü–û–õ–£–ß–ê–ï–¢ –ü–ï–†–í–´–ô –¢–ï–ì –ò–ó –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–• –¢–ï–ì–û–í
  /// üè∑Ô∏è –ü–û–õ–£–ß–ê–ï–¢ –ü–ï–†–í–´–ô –¢–ï–ì –ò–ó –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–• –¢–ï–ì–û–í
  Map<String, String> _getUserTags() {
    try {
      final isChannelPost = _getBoolValue(news['is_channel_post']);
      final postId = _getStringValue(news['id']);

      print('üîç NewsCardHeader - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤:');
      print('   - postId: $postId');
      print('   - isChannelPost: $isChannelPost');
      print('   - isRepost: $isRepost');

      // üö´ –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
      if (isRepost || isChannelPost) {
        return <String, String>{};
      }

      if (userTagsProvider != null && userTagsProvider!.isInitialized) {
        final allTags = userTagsProvider!.getTagsForPost(postId);

        print('‚úÖ –í—Å–µ —Ç–µ–≥–∏ –∏–∑ provider: $allTags');

        // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–≥, –Ω–æ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        final firstNonEmptyTag = allTags.entries
            .firstWhere(
              (entry) => entry.value.isNotEmpty && entry.value != '–ù–æ–≤—ã–π —Ç–µ–≥',
          orElse: () => MapEntry('', ''),
        );

        if (firstNonEmptyTag.key.isNotEmpty) {
          final singleTag = {firstNonEmptyTag.key: firstNonEmptyTag.value};
          print('‚úÖ –ü–æ–∫–∞–∑–∞–Ω –ø–µ—Ä–≤—ã–π —Ç–µ–≥: $singleTag');
          return singleTag;
        }

        // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ï—Å–ª–∏ –≤—Å–µ —Ç–µ–≥–∏ –ø—É—Å—Ç—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        // —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "+–¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥"
        print('‚ÑπÔ∏è –í—Å–µ —Ç–µ–≥–∏ –ø—É—Å—Ç—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
        return <String, String>{};
      }

      return <String, String>{};
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤: $e');
      return <String, String>{};
    }
  }

  // üéØ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  bool _getBoolValue(dynamic value) {
    if (value is bool) return value;
    if (value is String) return value.toLowerCase() == 'true';
    return false;
  }

  String _getStringValue(dynamic value) {
    if (value is String) return value;
    if (value != null) return value.toString();
    return '';
  }
}