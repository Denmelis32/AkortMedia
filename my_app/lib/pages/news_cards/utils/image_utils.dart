// üñºÔ∏è –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò –ò –ê–í–ê–¢–ê–†–ö–ê–ú–ò

import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'dart:io';

/// üñºÔ∏è –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ê–ó–õ–ò–ß–ù–´–ú–ò –¢–ò–ü–ê–ú–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
/// —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
class ImageUtils {

  // üì¶ –õ–û–ö–ê–õ–¨–ù–´–ï –ê–í–ê–¢–ê–†–ö–ò –î–õ–Ø FALLBACK
  static final List<String> _localAvatars = [
    'assets/images/ava_news/ava1.png',
    'assets/images/ava_news/ava2.png',
    'assets/images/ava_news/ava3.png',
    'assets/images/ava_news/ava4.png',
    'assets/images/ava_news/ava5.png',
    'assets/images/ava_news/ava6.png',
    'assets/images/ava_news/ava7.png',
    'assets/images/ava_news/ava8.png',
    'assets/images/ava_news/ava9.png',
    'assets/images/ava_news/ava10.png',
    'assets/images/ava_news/ava11.png',
    'assets/images/ava_news/ava12.png',
    'assets/images/ava_news/ava13.png',
    'assets/images/ava_news/ava14.png',
    'assets/images/ava_news/ava15.png',
    'assets/images/ava_news/ava16.png',
    'assets/images/ava_news/ava17.png',
    'assets/images/ava_news/ava18.png',
    'assets/images/ava_news/ava19.png',
    'assets/images/ava_news/ava20.png',
    'assets/images/ava_news/ava21.png',
    'assets/images/ava_news/ava22.png',
    'assets/images/ava_news/ava23.png',
    'assets/images/ava_news/ava24.png',
    'assets/images/ava_news/ava25.png',
    'assets/images/ava_news/ava26.png',
    'assets/images/ava_news/ava27.png',
    'assets/images/ava_news/ava28.png',
    'assets/images/ava_news/ava29.png',
    'assets/images/ava_news/ava30.png',
  ];

  // üíæ –ö–≠–® –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
  static final _avatarCache = <String, String>{};

  /// üñºÔ∏è –°–û–ó–î–ê–ï–¢ –í–ò–î–ñ–ï–¢ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –° –ü–û–î–î–ï–†–ñ–ö–û–ô –†–ê–ó–ù–´–• –ò–°–¢–û–ß–ù–ò–ö–û–í
  /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (asset, network, file)
  /// –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∏–¥–∂–µ—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  static Widget buildImageWidget(
      String imageUrl, {
        double? width,
        double? height,
        BoxFit fit = BoxFit.cover,
      }) {
    // üö´ –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–£–°–¢–û–ô URL
    if (imageUrl.isEmpty) {
      return _buildErrorImage(width: width, height: height);
    }

    print('üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $imageUrl');

    try {
      // üì± ASSET –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
      if (_isAssetImage(imageUrl)) {
        return Image.asset(
          imageUrl,
          width: width,
          height: height,
          fit: fit,
          cacheWidth: width != null ? (width * 2).toInt() : null,
          cacheHeight: height != null ? (height * 2).toInt() : null,
          errorBuilder: (context, error, stackTrace) {
            print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ asset –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $error –¥–ª—è –ø—É—Ç–∏: $imageUrl');
            return _buildErrorImage(width: width, height: height);
          },
        );
      }
      // üåê –°–ï–¢–ï–í–´–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
      else if (_isNetworkImage(imageUrl)) {
        return CachedNetworkImage(
          imageUrl: imageUrl,
          width: width,
          height: height,
          fit: fit,
          placeholder: (context, url) => _buildLoadingPlaceholder(width: width, height: height),
          errorWidget: (context, url, error) {
            print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ network –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $error –¥–ª—è URL: $imageUrl');
            return _buildErrorImage(width: width, height: height);
          },
        );
      }
      // üìÅ –§–ê–ô–õ–û–í–´–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
      else if (_isFileImage(imageUrl)) {
        return Image.file(
          File(imageUrl),
          width: width,
          height: height,
          fit: fit,
          errorBuilder: (context, error, stackTrace) {
            print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ file –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $error –¥–ª—è –ø—É—Ç–∏: $imageUrl');
            return _buildErrorImage(width: width, height: height);
          },
        );
      }
      // ‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü
      else {
        print('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $imageUrl');
        return _buildErrorImage(width: width, height: height);
      }
    } catch (e) {
      print('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e');
      return _buildErrorImage(width: width, height: height);
    }
  }

  /// üë§ –ü–û–õ–£–ß–ê–ï–¢ URL –ê–í–ê–¢–ê–†–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø/–ö–ê–ù–ê–õ–ê
  /// –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏:
  /// 1. ChannelStateProvider –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
  /// 2. –î–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å—Ç–∞
  /// 3. Fallback –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã
  static String getUserAvatarUrl({
    required Map<String, dynamic> news,
    required String userName,
    bool isCurrentUser = false,
    bool isOriginalPost = false,
  }) {
    try {
      print('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è: $userName, —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $isCurrentUser, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç: $isOriginalPost');

      // üîÑ –î–õ–Ø –†–ï–ü–û–°–¢–û–í - –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ê–í–¢–û–†/–ö–ê–ù–ê–õ
      if (isOriginalPost) {
        return _getOriginalPostAvatar(news, userName);
      }

      // üì¢ –î–õ–Ø –û–°–ù–û–í–ù–´–• –ü–û–°–¢–û–í - –ö–ê–ù–ê–õ–´
      final isChannelPost = _getBoolValue(news['is_channel_post']);
      final channelId = _getStringValue(news['channel_id']);
      final channelName = _getStringValue(news['channel_name']);

      if (isChannelPost && channelId.isNotEmpty) {
        return _getChannelAvatar(news, channelId, channelName);
      }

      // üë§ –î–õ–Ø –û–ë–´–ß–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
      return _getUserAvatar(news, userName, isCurrentUser);

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return _getFallbackAvatarUrl(userName);
    }
  }

  /// üë§ –ü–û–õ–£–ß–ê–ï–¢ –ê–í–ê–¢–ê–†–ö–£ –î–õ–Ø –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ü–û–°–¢–ê –í –†–ï–ü–û–°–¢–ï
  static String _getOriginalPostAvatar(Map<String, dynamic> news, String userName) {
    final isOriginalChannelPost = _getBoolValue(news['is_original_channel_post']);

    if (isOriginalChannelPost) {
      // üì¢ –ê–í–ê–¢–ê–† –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–ê–ù–ê–õ–ê
      final originalChannelId = _getStringValue(news['original_channel_id']);
      final originalChannelName = _getStringValue(news['original_channel_name']);
      final originalChannelAvatar = _getStringValue(news['original_channel_avatar']);

      print('   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: $originalChannelName, ID: $originalChannelId');

      // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ ChannelStateProvider –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç
      if (originalChannelAvatar.isNotEmpty) {
        print('   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä –∫–∞–Ω–∞–ª–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞: $originalChannelAvatar');
        return originalChannelAvatar;
      }

      print('   üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∞–≤–∞—Ç–∞—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞: $originalChannelName');
      return _getFallbackAvatarUrl(originalChannelName);
    } else {
      // üë§ –ê–í–ê–¢–ê–† –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
      final originalAuthorAvatar = _getStringValue(news['original_author_avatar']);
      final originalAuthorName = _getStringValue(news['original_author_name']);

      print('   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä: $originalAuthorName');

      if (originalAuthorAvatar.isNotEmpty) {
        print('   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä –∞–≤—Ç–æ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞: $originalAuthorAvatar');
        return originalAuthorAvatar;
      }

      print('   üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∞–≤–∞—Ç–∞—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∞: $originalAuthorName');
      return _getFallbackAvatarUrl(originalAuthorName);
    }
  }

  /// üì¢ –ü–û–õ–£–ß–ê–ï–¢ –ê–í–ê–¢–ê–†–ö–£ –ö–ê–ù–ê–õ–ê
  static String _getChannelAvatar(Map<String, dynamic> news, String channelId, String channelName) {
    print('   üîç –≠—Ç–æ –∫–∞–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç, –∫–∞–Ω–∞–ª: $channelName, ID: $channelId');

    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ ChannelStateProvider –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç
    final channelAvatar = _getStringValue(news['channel_avatar']);
    if (channelAvatar.isNotEmpty) {
      print('   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä –∫–∞–Ω–∞–ª–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞: $channelAvatar');
      return channelAvatar;
    }

    print('   üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∞–≤–∞—Ç–∞—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞: $channelName');
    return _getFallbackAvatarUrl(channelName);
  }

  /// üë§ –ü–û–õ–£–ß–ê–ï–¢ –ê–í–ê–¢–ê–†–ö–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
  static String _getUserAvatar(Map<String, dynamic> news, String userName, bool isCurrentUser) {
    final authorAvatar = _getStringValue(news['author_avatar']);
    final authorName = _getStringValue(news['author_name']);

    print('   –ê–≤—Ç–æ—Ä: $authorName');
    print('   –ê–≤–∞—Ç–∞—Ä –∞–≤—Ç–æ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö: $authorAvatar');

    if (authorAvatar.isNotEmpty) {
      return authorAvatar;
    }

    print('   üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∞–≤–∞—Ç–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $authorName');
    return _getFallbackAvatarUrl(authorName);
  }

  /// üéØ –ü–û–õ–£–ß–ê–ï–¢ FALLBACK –ê–í–ê–¢–ê–†–ö–£ –ò–ó –õ–û–ö–ê–õ–¨–ù–´–• –†–ï–°–£–†–°–û–í
  static String _getFallbackAvatarUrl(String userName) {
    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã –∏–∑ assets
    final index = userName.hashCode.abs() % _localAvatars.length;
    return _localAvatars[index];
  }

  /// üë§ –°–û–ó–î–ê–ï–¢ –í–ò–î–ñ–ï–¢ –ê–í–ê–¢–ê–†–ö–ò –° FALLBACK
  static Widget buildUserAvatarWidget({
    required String avatarUrl,
    required String displayName,
    required double size,
    VoidCallback? onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        width: size,
        height: size,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          border: Border.all(
            color: Colors.white.withOpacity(0.6),
            width: 2.5,
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.15),
              blurRadius: 12,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: ClipOval(
          child: _buildImageWidgetWithFallback(avatarUrl, displayName, size: size),
        ),
      ),
    );
  }

  /// üñºÔ∏è –°–û–ó–î–ê–ï–¢ –í–ò–î–ñ–ï–¢ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –° FALLBACK
  static Widget _buildImageWidgetWithFallback(String imageUrl, String displayName, {double? size}) {
    if (imageUrl.isEmpty) {
      return _buildGradientFallbackAvatar(displayName, size ?? 40);
    }

    return buildImageWidget(
      imageUrl,
      width: size,
      height: size,
      fit: BoxFit.cover,
    );
  }

  /// üåà –°–û–ó–î–ê–ï–¢ –ì–†–ê–î–ò–ï–ù–¢–ù–´–ô FALLBACK –î–õ–Ø –ê–í–ê–¢–ê–†–ö–ò
  static Widget _buildGradientFallbackAvatar(String name, double size) {
    final gradientColors = _getAvatarGradient(name);

    return Container(
      width: size,
      height: size,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: gradientColors,
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Center(
        child: name.isNotEmpty
            ? Text(
          name.substring(0, 1).toUpperCase(),
          style: TextStyle(
            color: Colors.white,
            fontSize: size * 0.3,
            fontWeight: FontWeight.bold,
          ),
        )
            : Icon(
          Icons.group_rounded,
          color: Colors.white,
          size: size * 0.4,
        ),
      ),
    );
  }

  /// ‚è≥ –°–û–ó–î–ê–ï–¢ –í–ò–î–ñ–ï–¢ –ó–ê–ì–†–£–ó–ö–ò
  static Widget _buildLoadingPlaceholder({double? width, double? height}) {
    return Container(
      width: width,
      height: height,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            Colors.grey[200]!,
            Colors.grey[300]!,
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
      ),
      child: Center(
        child: Container(
          width: 24,
          height: 24,
          decoration: BoxDecoration(
            color: Colors.white,
            shape: BoxShape.circle,
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                blurRadius: 8,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: CircularProgressIndicator(
            strokeWidth: 2,
            valueColor: AlwaysStoppedAnimation<Color>(Colors.blue), // TODO: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–≤–µ—Ç –∏–∑ –¥–∏–∑–∞–π–Ω–∞
          ),
        ),
      ),
    );
  }

  /// ‚ùå –°–û–ó–î–ê–ï–¢ –í–ò–î–ñ–ï–¢ –û–®–ò–ë–ö–ò –ó–ê–ì–†–£–ó–ö–ò
  static Widget _buildErrorImage({double? width, double? height}) {
    return Container(
      width: width,
      height: height,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            Colors.grey[300]!,
            Colors.grey[400]!,
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.error_outline_rounded,
            color: Colors.grey[500],
            size: 28,
          ),
          const SizedBox(height: 8),
          Text(
            '–û—à–∏–±–∫–∞\n–∑–∞–≥—Ä—É–∑–∫–∏',
            textAlign: TextAlign.center,
            style: TextStyle(
              color: Colors.grey[600],
              fontSize: 11,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }

  /// üîç –ü–†–û–í–ï–†–Ø–ï–¢ –Ø–í–õ–Ø–ï–¢–°–Ø –õ–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï ASSET
  static bool _isAssetImage(String imageUrl) {
    if (imageUrl.isEmpty) return false;
    return imageUrl.startsWith('assets/') ||
        imageUrl.startsWith('assets/images/') ||
        (imageUrl.contains('.png') && !imageUrl.contains('://')) ||
        (imageUrl.contains('.jpg') && !imageUrl.contains('://')) ||
        (imageUrl.contains('.jpeg') && !imageUrl.contains('://'));
  }

  /// üåê –ü–†–û–í–ï–†–Ø–ï–¢ –Ø–í–õ–Ø–ï–¢–°–Ø –õ–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –°–ï–¢–ï–í–´–ú
  static bool _isNetworkImage(String imageUrl) {
    if (imageUrl.isEmpty) return false;
    return imageUrl.startsWith('http://') ||
        imageUrl.startsWith('https://') ||
        imageUrl.contains('ui-avatars.com') ||
        imageUrl.contains('://');
  }

  /// üìÅ –ü–†–û–í–ï–†–Ø–ï–¢ –Ø–í–õ–Ø–ï–¢–°–Ø –õ–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –§–ê–ô–õ–û–ú
  static bool _isFileImage(String imageUrl) {
    if (imageUrl.isEmpty) return false;
    return imageUrl.startsWith('/') ||
        (imageUrl.contains(RegExp(r'\.(jpg|jpeg|png|gif)$', caseSensitive: false)) &&
            !_isAssetImage(imageUrl) &&
            !_isNetworkImage(imageUrl));
  }

  /// üåà –ü–û–õ–£–ß–ê–ï–¢ –ì–†–ê–î–ò–ï–ù–¢ –î–õ–Ø FALLBACK –ê–í–ê–¢–ê–†–ö–ò
  static List<Color> _getAvatarGradient(String name) {
    final colors = [
      [const Color(0xFF667eea), const Color(0xFF764ba2)],
      [const Color(0xFFf093fb), const Color(0xFFf5576c)],
      [const Color(0xFF4facfe), const Color(0xFF00f2fe)],
      [const Color(0xFF43e97b), const Color(0xFF38f9d7)],
      [const Color(0xFFfa709a), const Color(0xFFfee140)],
      [const Color(0xFF30cfd0), const Color(0xFF330867)],
    ];

    final index = name.isEmpty ? 0 : name.codeUnits.reduce((a, b) => a + b) % colors.length;
    return colors[index];
  }

  // üéØ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  static bool _getBoolValue(dynamic value) {
    if (value is bool) return value;
    if (value is String) return value.toLowerCase() == 'true';
    return false;
  }

  static String _getStringValue(dynamic value) {
    if (value is String) return value;
    if (value != null) return value.toString();
    return '';
  }
}