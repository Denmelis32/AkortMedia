import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../providers/news_providers/news_provider.dart';
import '../../providers/user_provider.dart';
import 'fixed_news_card.dart';

class NewsPage extends StatefulWidget {
  final VoidCallback onLogout;

  const NewsPage({
    super.key,
    required this.onLogout,
  });

  @override
  State<NewsPage> createState() => _NewsPageState();
}

class _NewsPageState extends State<NewsPage> {
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _hashtagsController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  bool _isCreatingPost = false;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _initializeApp();
    });
  }

  void _initializeApp() async {
    print('üöÄ Initializing app...');

    final newsProvider = context.read<NewsProvider>();
    final userProvider = context.read<UserProvider>();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    if (userProvider.isLoggedIn) {
      print('‚úÖ User is logged in: ${userProvider.userName} (ID: ${userProvider.userId})');

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ—Å—Ç–µ–π
      await userProvider.syncWithServer();
      print('üîÑ User data synced with server');
    } else {
      print('‚ö†Ô∏è User not logged in, checking auth status...');
      final isAuthenticated = await userProvider.checkAuthStatus();
      if (isAuthenticated) {
        await userProvider.syncWithServer();
        print('üîÑ User data synced after auth check');
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    await newsProvider.loadNews();
  }

  // üéØ –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –¢–ò–ü–û–í
  Map<String, dynamic> _ensureStringMap(dynamic data) {
    if (data == null) return <String, dynamic>{};
    if (data is Map<String, dynamic>) return data;
    if (data is Map<dynamic, dynamic>) {
      final result = <String, dynamic>{};
      data.forEach((key, value) {
        result[key.toString()] = value;
      });
      return result;
    }
    return <String, dynamic>{};
  }

  // üÜï –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –•–ï–®–¢–ï–ì–û–í
  List<String> _parseHashtags(String hashtagsText) {
    if (hashtagsText.trim().isEmpty) return [];

    return hashtagsText
        .split(',')
        .map((tag) => tag.trim())
        .where((tag) => tag.isNotEmpty)
        .map((tag) => tag.startsWith('#') ? tag.substring(1) : tag)
        .map((tag) => tag.toLowerCase())
        .where((tag) => tag.length <= 20)
        .toList();
  }

  // üÜï –ú–ï–¢–û–î –î–õ–Ø –û–ß–ò–°–¢–ö–ò –§–û–†–ú–´
  void _clearForm() {
    _titleController.clear();
    _descriptionController.clear();
    _hashtagsController.clear();
  }

  Future<void> _createNews() async {
    if (_titleController.text.isEmpty) return;

    final newsProvider = context.read<NewsProvider>();
    final userProvider = context.read<UserProvider>();

    // üÜï –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ò –î–ê–ù–ù–´–•
    if (!userProvider.isLoggedIn) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }

    // üÜï –ü–†–û–í–ï–†–ö–ê –ß–¢–û –ò–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ó–ê–ì–†–£–ñ–ï–ù–û
    if (userProvider.userName.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'),
          backgroundColor: Colors.orange,
        ),
      );
      await userProvider.syncWithServer(); // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
      return;
    }

    setState(() => _isCreatingPost = true);

    try {
      // üÜï –ü–ê–†–°–ò–ú –•–ï–®–¢–ï–ì–ò
      final hashtags = _parseHashtags(_hashtagsController.text);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ UserProvider
      final newsData = {
        'title': _titleController.text.trim(),
        'content': _descriptionController.text.trim(), // ‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ–º content
        'hashtags': hashtags,
      };

      print('üéØ Creating post as: ${userProvider.userName} (ID: ${userProvider.userId})');
      print('üè∑Ô∏è Hashtags: $hashtags');

      // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç —á–µ—Ä–µ–∑ NewsProvider
      await newsProvider.addNews(newsData);

      // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
      _clearForm();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!'),
          backgroundColor: Colors.green,
        ),
      );

    } catch (e) {
      print('‚ùå Error creating post: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() => _isCreatingPost = false);
    }
  }

  void _showCreatePostDialog() {
    final newsProvider = context.read<NewsProvider>();
    final userProvider = context.read<UserProvider>();

    // üÜï –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
    if (!userProvider.isLoggedIn) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.create_rounded, color: Color(0xFF7E57C2)),
            SizedBox(width: 8),
            Text('–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç'),
          ],
        ),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // üÜï –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  children: [
                    CircleAvatar(
                      radius: 16,
                      backgroundColor: Color(0xFF7E57C2),
                      child: Text(
                        userProvider.userName.isNotEmpty
                            ? userProvider.userName[0].toUpperCase()
                            : '?',
                        style: TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                          fontSize: 12,
                        ),
                      ),
                    ),
                    SizedBox(width: 8),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            userProvider.userName,
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 14,
                            ),
                          ),
                          Text(
                            'ID: ${userProvider.userId}',
                            style: TextStyle(
                              fontSize: 10,
                              color: Colors.grey[600],
                            ),
                          ),
                          Text(
                            '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç',
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.grey[600],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              SizedBox(height: 12),

              // üÜï –ò–ù–î–ò–ö–ê–¢–û–† –°–¢–ê–¢–£–°–ê –°–ï–†–í–ï–†–ê
              if (!newsProvider.serverAvailable)
                Container(
                  padding: EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.orange.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.orange),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.wifi_off_rounded, size: 16, color: Colors.orange),
                      SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          '–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º. –ü–æ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ.',
                          style: TextStyle(fontSize: 12, color: Colors.orange),
                        ),
                      ),
                    ],
                  ),
                ),
              SizedBox(height: 12),

              TextField(
                controller: _titleController,
                decoration: InputDecoration(
                  labelText: '–ó–∞–≥–æ–ª–æ–≤–æ–∫*',
                  hintText: '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.title_rounded),
                  counterText: '${_titleController.text.length}/200',
                ),
                maxLines: 2,
                maxLength: 200,
              ),
              SizedBox(height: 16),
              TextField(
                controller: _descriptionController,
                decoration: InputDecoration(
                  labelText: '–û–ø–∏—Å–∞–Ω–∏–µ',
                  hintText: '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.description_rounded),
                  counterText: '${_descriptionController.text.length}/2000',
                ),
                maxLines: 4,
                maxLength: 2000,
              ),
              SizedBox(height: 16),
              TextField(
                controller: _hashtagsController,
                decoration: InputDecoration(
                  labelText: '–•–µ—à—Ç–µ–≥–∏',
                  hintText: '—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: –Ω–æ–≤–æ—Å—Ç–∏, —Å–ø–æ—Ä—Ç, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.tag_rounded),
                ),
                maxLines: 1,
              ),
              SizedBox(height: 8),
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.blue.withOpacity(0.05),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.blue.withOpacity(0.1)),
                ),
                child: Row(
                  children: [
                    Icon(Icons.info_outline_rounded, size: 16, color: Colors.blue),
                    SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        '–í–≤–æ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä: "—Ñ—É—Ç–±–æ–ª, —Å–ø–æ—Ä—Ç, –ª–∏–≥–∞"',
                        style: TextStyle(fontSize: 12, color: Colors.blue),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () {
              _clearForm();
              Navigator.pop(context);
            },
            child: Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: _isCreatingPost ? null : () {
              final title = _titleController.text.trim();
              if (title.isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'),
                    backgroundColor: Colors.red,
                  ),
                );
                return;
              }

              if (title.length < 5) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤'),
                    backgroundColor: Colors.red,
                  ),
                );
                return;
              }

              Navigator.pop(context);
              _createNews();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Color(0xFF7E57C2),
              foregroundColor: Colors.white,
            ),
            child: _isCreatingPost
                ? SizedBox(
              width: 16,
              height: 16,
              child: CircularProgressIndicator(strokeWidth: 2),
            )
                : Text('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'),
          ),
        ],
      ),
    );
  }

  // üéØ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ö–ê–†–¢–û–ß–ï–ö
  String _formatDate(String dateString) {
    try {
      final date = DateTime.parse(dateString);
      return '${date.day.toString().padLeft(2, '0')}.${date.month.toString().padLeft(2, '0')}.${date.year}';
    } catch (e) {
      return '–ù–µ–¥–∞–≤–Ω–æ';
    }
  }

  String _getTimeAgo(String dateString) {
    try {
      final date = DateTime.parse(dateString);
      final now = DateTime.now();
      final difference = now.difference(date);

      if (difference.inMinutes < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
      if (difference.inMinutes < 60) return '${difference.inMinutes} –º–∏–Ω';
      if (difference.inHours < 24) return '${difference.inHours} —á';
      if (difference.inDays < 7) return '${difference.inDays} –¥';
      if (difference.inDays < 30) return '${(difference.inDays / 7).floor()} –Ω–µ–¥';
      if (difference.inDays < 365) return '${(difference.inDays / 30).floor()} –º–µ—Å';
      return '${(difference.inDays / 365).floor()} –≥';
    } catch (e) {
      return '–ù–µ–¥–∞–≤–Ω–æ';
    }
  }

  // üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ô
  void _handleLike(String postId) {
    print('üéØ HANDLE LIKE: $postId');
    final newsProvider = context.read<NewsProvider>();
    newsProvider.toggleLike(postId);
  }

  void _handleBookmark(String postId) {
    print('üéØ HANDLE BOOKMARK: $postId');
    final newsProvider = context.read<NewsProvider>();
    newsProvider.toggleBookmark(postId);
  }

  void _handleRepost(String postId) {
    print('üéØ HANDLE REPOST: $postId');
    final newsProvider = context.read<NewsProvider>();
    newsProvider.toggleRepost(postId);
  }

  // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í
  void _handleComment(String postId, String text) {
    print('üéØ HANDLE COMMENT: $postId - "$text"');
    final newsProvider = context.read<NewsProvider>();
    newsProvider.addComment(postId, text);
  }

  void _handleFollow(String authorId) {
    print('üì¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∞: $authorId');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!'),
        backgroundColor: Colors.green,
        duration: Duration(seconds: 1),
      ),
    );
  }

  void _handleShare(String postId) {
    print('üì§ –®–∞—Ä–∏–Ω–≥ –ø–æ—Å—Ç–∞: $postId');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!'),
        backgroundColor: Colors.orange,
        duration: Duration(seconds: 2),
      ),
    );
  }

  Widget _buildLoadingIndicator() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(
            valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF7E57C2)),
          ),
          SizedBox(height: 16),
          Text(
            '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...',
            style: TextStyle(
              fontSize: 16,
              color: Colors.grey,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.article_rounded, size: 80, color: Colors.grey[400]),
          SizedBox(height: 20),
          Text(
            '–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.grey,
            ),
          ),
          SizedBox(height: 8),
          Padding(
            padding: EdgeInsets.symmetric(horizontal: 40),
            child: Text(
              '–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è –Ω–æ–≤–æ—Å—Ç—å—é —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º!',
              style: TextStyle(
                fontSize: 14,
                color: Colors.grey,
              ),
              textAlign: TextAlign.center,
            ),
          ),
          SizedBox(height: 24),
          Consumer<UserProvider>(
            builder: (context, userProvider, child) {
              return ElevatedButton(
                onPressed: userProvider.isLoggedIn ? _showCreatePostDialog : null,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFF7E57C2),
                  foregroundColor: Colors.white,
                  padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
                child: Text(
                  userProvider.isLoggedIn
                      ? '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç'
                      : '–í–æ–π–¥–∏—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞',
                  style: TextStyle(fontSize: 16),
                ),
              );
            },
          ),
        ],
      ),
    );
  }

  Widget _buildErrorState(String errorMessage) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.error_outline_rounded, size: 80, color: Colors.orange),
          SizedBox(height: 20),
          Text(
            '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.grey,
            ),
          ),
          SizedBox(height: 8),
          Padding(
            padding: EdgeInsets.symmetric(horizontal: 40),
            child: Text(
              errorMessage,
              style: TextStyle(
                fontSize: 14,
                color: Colors.grey,
              ),
              textAlign: TextAlign.center,
            ),
          ),
          SizedBox(height: 24),
          ElevatedButton(
            onPressed: () => context.read<NewsProvider>().loadNews(),
            style: ElevatedButton.styleFrom(
              backgroundColor: Color(0xFF7E57C2),
              foregroundColor: Colors.white,
            ),
            child: Text('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'),
          ),
        ],
      ),
    );
  }

  // üéØ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ö–ê–†–¢–û–ß–ï–ö
  Widget _buildNewsList(NewsProvider newsProvider) {
    return Column(
      children: [
        // üÜï –ò–ù–î–ò–ö–ê–¢–û–† –°–¢–ê–¢–£–°–ê –°–ï–†–í–ï–†–ê
        if (!newsProvider.serverAvailable)
          Container(
            width: double.infinity,
            padding: EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.orange.withOpacity(0.1),
              border: Border(bottom: BorderSide(color: Colors.orange)),
            ),
            child: Row(
              children: [
                Icon(Icons.wifi_off_rounded, size: 16, color: Colors.orange),
                SizedBox(width: 8),
                Expanded(
                  child: Text(
                    '–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã.',
                    style: TextStyle(fontSize: 12, color: Colors.orange),
                  ),
                ),
              ],
            ),
          ),

        // üÜï –ò–ù–î–ò–ö–ê–¢–û–† –û–®–ò–ë–ö–ò
        if (newsProvider.errorMessage != null)
          Container(
            width: double.infinity,
            padding: EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.orange.withOpacity(0.1),
              border: Border(bottom: BorderSide(color: Colors.orange)),
            ),
            child: Row(
              children: [
                Icon(Icons.warning_amber_rounded, size: 16, color: Colors.orange),
                SizedBox(width: 8),
                Expanded(
                  child: Text(
                    newsProvider.errorMessage!,
                    style: TextStyle(fontSize: 12, color: Colors.orange),
                  ),
                ),
                IconButton(
                  onPressed: () => newsProvider.clearError(),
                  icon: Icon(Icons.close_rounded, size: 16),
                  padding: EdgeInsets.zero,
                ),
              ],
            ),
          ),

        Expanded(
          child: RefreshIndicator(
            onRefresh: () => newsProvider.refreshNews(),
            child: ListView.builder(
              controller: _scrollController,
              padding: EdgeInsets.only(bottom: 80),
              itemCount: newsProvider.news.length,
              itemBuilder: (context, index) {
                final post = newsProvider.news[index];
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                final safePost = _ensureStringMap(post);
                final postId = safePost['id']?.toString() ?? '';

                return FixedNewsCard(
                  key: ValueKey('news-$postId-$index'),
                  news: safePost,
                  onLike: () => _handleLike(postId),
                  onBookmark: () => _handleBookmark(postId),
                  onRepost: () => _handleRepost(postId),
                  onComment: (text) => _handleComment(postId, text), // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–´–ó–û–í
                  onFollow: () => _handleFollow(safePost['author_id']?.toString() ?? ''),
                  onShare: () => _handleShare(postId),
                  formatDate: _formatDate,
                  getTimeAgo: _getTimeAgo,
                  scrollController: _scrollController,
                  onLogout: widget.onLogout,
                );
              },
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildScrollToTopButton() {
    return AnimatedBuilder(
      animation: _scrollController,
      builder: (context, child) {
        final showButton = _scrollController.hasClients &&
            _scrollController.offset > 200;

        return AnimatedOpacity(
          duration: Duration(milliseconds: 200),
          opacity: showButton ? 1.0 : 0.0,
          child: Visibility(
            visible: showButton,
            child: FloatingActionButton.small(
              onPressed: () {
                _scrollController.animateTo(
                  0,
                  duration: Duration(milliseconds: 400),
                  curve: Curves.easeOut,
                );
              },
              backgroundColor: Color(0xFF7E57C2),
              foregroundColor: Colors.white,
              child: Icon(Icons.arrow_upward_rounded),
              heroTag: 'scroll_to_top',
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFF8F9FA),
      appBar: AppBar(
        title: Text(
          '–õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 20,
          ),
        ),
        backgroundColor: Colors.white,
        elevation: 0,
        centerTitle: false,
        actions: [
          Consumer<NewsProvider>(
            builder: (context, newsProvider, child) {
              return Row(
                children: [
                  // üÜï –ò–ù–î–ò–ö–ê–¢–û–† –°–¢–ê–¢–£–°–ê –°–ï–†–í–ï–†–ê –í APP BAR
                  Icon(
                    newsProvider.serverAvailable
                        ? Icons.cloud_done_rounded
                        : Icons.cloud_off_rounded,
                    color: newsProvider.serverAvailable ? Colors.green : Colors.orange,
                  ),
                  SizedBox(width: 8),
                  IconButton(
                    onPressed: newsProvider.refreshNews,
                    icon: Icon(Icons.refresh_rounded),
                    tooltip: '–û–±–Ω–æ–≤–∏—Ç—å',
                    color: Color(0xFF7E57C2),
                  ),
                ],
              );
            },
          ),
        ],
      ),
      body: Consumer<NewsProvider>(
        builder: (context, newsProvider, child) {
          if (newsProvider.isLoading) {
            return _buildLoadingIndicator();
          } else if (newsProvider.errorMessage != null && newsProvider.news.isEmpty) {
            return _buildErrorState(newsProvider.errorMessage!);
          } else if (newsProvider.news.isEmpty) {
            return _buildEmptyState();
          } else {
            return _buildNewsList(newsProvider);
          }
        },
      ),
      floatingActionButton: Consumer<UserProvider>(
        builder: (context, userProvider, child) {
          return Column(
            mainAxisAlignment: MainAxisAlignment.end,
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              _buildScrollToTopButton(),
              SizedBox(height: 16),
              FloatingActionButton(
                onPressed: userProvider.isLoggedIn ? _showCreatePostDialog : null,
                backgroundColor: userProvider.isLoggedIn ? Color(0xFF7E57C2) : Colors.grey,
                foregroundColor: Colors.white,
                elevation: 4,
                tooltip: userProvider.isLoggedIn ? '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç' : '–í–æ–π–¥–∏—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞',
                child: Icon(Icons.add_rounded),
              ),
            ],
          );
        },
      ),
    );
  }
  @override
  void dispose() {
    _scrollController.dispose();
    _titleController.dispose();
    _descriptionController.dispose();
    _hashtagsController.dispose();
    super.dispose();
  }
}