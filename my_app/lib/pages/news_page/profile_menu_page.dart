import 'dart:io';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:image_picker/image_picker.dart';
import 'package:my_app/pages/news_page/theme/news_theme.dart';
import 'package:my_app/providers/news_provider.dart';
import 'package:path_provider/path_provider.dart';
import 'package:provider/provider.dart';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏–∑ news_page
import 'news_card.dart';
import 'utils.dart';
import '../../services/interaction_manager.dart'; // –î–û–ë–ê–í–ò–¢–¨
import '../../providers/channel_state_provider.dart'; // –î–û–ë–ê–í–ò–¢–¨

class ProfilePage extends StatefulWidget {
  final String userName;
  final String userEmail;
  final VoidCallback onLogout;
  final int? newMessagesCount;
  final String? profileImageUrl;
  final File? profileImageFile;
  final Function(String?)? onProfileImageUrlChanged;
  final Function(File?)? onProfileImageFileChanged;
  final Function(String?)? onCoverImageUrlChanged;
  final Function(File?)? onCoverImageFileChanged;
  final VoidCallback? onMessagesTap;
  final VoidCallback? onSettingsTap;
  final VoidCallback? onHelpTap;
  final VoidCallback? onAboutTap;

  const ProfilePage({
    super.key,
    required this.userName,
    required this.userEmail,
    required this.onLogout,
    this.newMessagesCount = 0,
    this.profileImageUrl,
    this.profileImageFile,
    this.onProfileImageUrlChanged,
    this.onProfileImageFileChanged,
    this.onCoverImageUrlChanged,
    this.onCoverImageFileChanged,
    this.onMessagesTap,
    this.onSettingsTap,
    this.onHelpTap,
    this.onAboutTap,
  });

  @override
  State<ProfilePage> createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  final ScrollController _scrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();
  bool _showSearchBar = false;
  String _searchQuery = '';
  int _selectedSection = 0; // 0 - –ú–æ–∏ –ø–æ—Å—Ç—ã, 1 - –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, 2 - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è



  // –¢–ê–ö–ò–ï –ñ–ï –û–¢–°–¢–£–ü–´ –ö–ê–ö –í –ö–ê–†–¢–û–ß–ö–ê–• –ù–û–í–û–°–¢–ï–ô
  double _getHorizontalPadding(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    if (width > 1000) return 280;
    if (width > 700) return 80;
    return 16;
  }

  double _getContentMaxWidth(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    if (width > 1400) return 600;
    if (width > 1000) return 600;
    if (width > 700) return 600;
    return double.infinity;
  }

  @override
  void initState() {
    super.initState();
    _setCurrentUser();
    _searchController.addListener(() {
      setState(() {
        _searchQuery = _searchController.text.toLowerCase().trim();
      });
    });

    // –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ê–í–ê–¢–ê–†–ö–£ –ò –û–ë–õ–û–ñ–ö–£ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï
    _setDefaultImages();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _debugReposts(); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    });
  }



  void _debugReposts() {
    final newsProvider = Provider.of<NewsProvider>(context, listen: false);
    final userId = _generateUserId(widget.userEmail);

    print('=== DEBUG REPOSTS ===');
    print('User ID: $userId');
    print('Total news: ${newsProvider.news.length}');

    final allReposts = newsProvider.news.where((item) {
      final newsItem = Map<String, dynamic>.from(item);
      return newsItem['is_repost'] == true;
    }).toList();

    print('Total reposts in system: ${allReposts.length}');

    for (final repost in allReposts) {
      final repostItem = Map<String, dynamic>.from(repost);
      print('Repost: ${repostItem['id']} by ${repostItem['reposted_by']}');
    }

    final userReposts = _getUserReposts(newsProvider.news);
    print('User reposts count: ${userReposts.length}');
    print('=== END DEBUG ===');
  }



  void _setCurrentUser() {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ email
    final userId = _generateUserId(widget.userEmail);

    WidgetsBinding.instance.addPostFrameCallback((_) {
      final newsProvider = Provider.of<NewsProvider>(context, listen: false);
      newsProvider.setCurrentUser(userId, widget.userName, widget.userEmail);
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String _generateUserId(String email) {
    // –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return 'user_${email.hashCode.abs()}';
  }


  List<dynamic> _getUserReposts(List<dynamic> news) {
    final userId = _generateUserId(widget.userEmail);

    print('üîç Searching reposts for user: $userId');
    print('üìä Total news items: ${news.length}');

    final reposts = news.where((item) {
      try {
        final newsItem = Map<String, dynamic>.from(item);
        final isRepost = newsItem['is_repost'] == true;
        final repostedBy = newsItem['reposted_by']?.toString();

        final isUserRepost = isRepost && repostedBy == userId;

        if (isUserRepost) {
          print('‚úÖ Found user repost: ${newsItem['id']} - ${newsItem['title']}');
        }

        return isUserRepost;
      } catch (e) {
        print('‚ùå Error checking repost: $e');
        return false;
      }
    }).toList();

    print('üìä Total reposts found for user $userId: ${reposts.length}');

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ—Å—Ç—ã
    for (final repost in reposts) {
      final repostItem = Map<String, dynamic>.from(repost);
      print('üìã Repost details:');
      print('   ID: ${repostItem['id']}');
      print('   Title: ${repostItem['title']}');
      print('   Reposted by: ${repostItem['reposted_by']}');
      print('   Original post: ${repostItem['original_post_id']}');
    }

    return reposts;
  }

  void _showCoverPickerModal(BuildContext context) async {
    final newsProvider = Provider.of<NewsProvider>(context, listen: false);
    final userId = _generateUserId(widget.userEmail);

    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => Container(
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
        ),
        padding: const EdgeInsets.all(20),
        child: SafeArea(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Container(
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
              const SizedBox(height: 12),
              const Text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–æ–∂–∫—É –ø—Ä–æ—Ñ–∏–ª—è',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.black87,
                ),
              ),
              const SizedBox(height: 20),
              _buildCoverSourceButton(
                context,
                Icons.link_rounded,
                '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ',
                Colors.purple,
                    () => _showCoverUrlInputDialog(context),
              ),
              const SizedBox(height: 12),
              _buildCoverSourceButton(
                context,
                Icons.photo_library_rounded,
                '–í—ã–±—Ä–∞—Ç—å –∏–∑ –≥–∞–ª–µ—Ä–µ–∏',
                Colors.blue,
                    () => _pickCoverImage(ImageSource.gallery, context),
              ),
              const SizedBox(height: 12),
              _buildCoverSourceButton(
                context,
                Icons.photo_camera_rounded,
                '–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ',
                Colors.green,
                    () => _pickCoverImage(ImageSource.camera, context),
              ),
              const SizedBox(height: 12),
              if (_getUserCoverUrl() != null) // –ò–°–ü–†–ê–í–¨–¢–ï –≠–¢–£ –ü–†–û–í–ï–†–ö–£
                _buildCoverSourceButton(
                  context,
                  Icons.delete_rounded,
                  '–£–¥–∞–ª–∏—Ç—å –æ–±–ª–æ–∂–∫—É',
                  Colors.red,
                      () async {
                    await newsProvider.updateCoverImageUrl(null);
                    await newsProvider.updateCoverImageFile(null);
                    Navigator.pop(context);
                    if (context.mounted) {
                      _showSuccessSnackBar('–û–±–ª–æ–∂–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —É–¥–∞–ª–µ–Ω–∞');
                    }
                  },
                ),
              const SizedBox(height: 20),
              SizedBox(
                width: double.infinity,
                child: OutlinedButton(
                  onPressed: () => Navigator.pop(context),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.grey[700],
                    side: BorderSide(color: Colors.grey[300]!),
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                    padding: const EdgeInsets.symmetric(vertical: 12),
                  ),
                  child: const Text('–û—Ç–º–µ–Ω–∞'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }


  void _showImagePickerModal(BuildContext context) {
    final newsProvider = Provider.of<NewsProvider>(context, listen: false);
    final userId = _generateUserId(widget.userEmail);

    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => Container(
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
        ),
        padding: const EdgeInsets.all(20),
        child: SafeArea(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Container(
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
              const SizedBox(height: 12),
              const Text(
                '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.black87,
                ),
              ),
              const SizedBox(height: 20),
              _buildImageSourceButton(
                context,
                Icons.link_rounded,
                '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ',
                Colors.purple,
                    () => _showUrlInputDialog(context),
              ),
              const SizedBox(height: 12),
              _buildImageSourceButton(
                context,
                Icons.photo_library_rounded,
                '–í—ã–±—Ä–∞—Ç—å –∏–∑ –≥–∞–ª–µ—Ä–µ–∏',
                Colors.blue,
                    () => _pickImage(ImageSource.gallery, context),
              ),
              const SizedBox(height: 12),
              _buildImageSourceButton(
                context,
                Icons.photo_camera_rounded,
                '–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ',
                Colors.green,
                    () => _pickImage(ImageSource.camera, context),
              ),
              const SizedBox(height: 12),
              if (widget.profileImageUrl != null || widget.profileImageFile != null)
                _buildImageSourceButton(
                  context,
                  Icons.delete_rounded,
                  '–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ',
                  Colors.red,
                      () async {
                    await newsProvider.updateProfileImageUrl(null);
                    await newsProvider.updateProfileImageFile(null);
                    Navigator.pop(context);
                    if (context.mounted) {
                      _showSuccessSnackBar('–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É–¥–∞–ª–µ–Ω–æ');
                    }
                  },
                ),
              const SizedBox(height: 20),
              SizedBox(
                width: double.infinity,
                child: OutlinedButton(
                  onPressed: () => Navigator.pop(context),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.grey[700],
                    side: BorderSide(color: Colors.grey[300]!),
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                    padding: const EdgeInsets.symmetric(vertical: 12),
                  ),
                  child: const Text('–û—Ç–º–µ–Ω–∞'),
                ),
              ),
            ],
          ),
        ),
      ),
    ).then((_) {
      if (mounted) {
        setState(() {});
      }
    });
  }




  // –ú–ï–¢–û–î –î–õ–Ø –£–°–¢–ê–ù–û–í–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
  void _setDefaultImages() {

  }

  @override
  void dispose() {
    _scrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Map<String, int> _getUserStats(List<dynamic> news) {
    final myNews = news.where((item) {
      final newsItem = Map<String, dynamic>.from(item);
      return newsItem['author_name'] == widget.userName;
    }).toList();

    final totalLikes = myNews.fold<int>(0, (sum, item) {
      final newsItem = Map<String, dynamic>.from(item);
      final likes = newsItem['likes'] ?? 0;
      return sum + (likes is int ? likes : int.tryParse(likes.toString()) ?? 0);
    });

    final totalComments = myNews.fold<int>(0, (sum, item) {
      final newsItem = Map<String, dynamic>.from(item);
      final comments = newsItem['comments'] ?? [];
      return sum + (comments is List ? comments.length : 0);
    });

    return {
      'posts': myNews.length,
      'likes': totalLikes,
      'comments': totalComments,
    };
  }

  // –í–∏–¥–∂–µ—Ç –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ –¥–ª—è AppBar
  Widget _buildSearchField() {
    return Container(
      height: 40,
      decoration: BoxDecoration(
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(20),
      ),
      child: TextField(
        controller: _searchController,
        autofocus: true,
        decoration: InputDecoration(
          hintText: '–ü–æ–∏—Å–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ...',
          prefixIcon: const Icon(Icons.search, size: 20, color: Colors.grey),
          suffixIcon: _searchQuery.isNotEmpty
              ? IconButton(
            icon: const Icon(Icons.clear, size: 18, color: Colors.grey),
            onPressed: () => _searchController.clear(),
          )
              : null,
          border: InputBorder.none,
          contentPadding: const EdgeInsets.symmetric(horizontal: 16),
        ),
        style: const TextStyle(fontSize: 16),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final newsProvider = Provider.of<NewsProvider>(context);
    final userStats = _getUserStats(newsProvider.news);
    final horizontalPadding = _getHorizontalPadding(context);
    final contentMaxWidth = _getContentMaxWidth(context);

    return Scaffold(
      backgroundColor: Colors.transparent,
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              Color(0xFFF5F5F5),
              Color(0xFFE8E8E8),
            ],
          ),
        ),
        child: SafeArea(
          child: Column(
            children: [
              // AppBar –ö–ê–ö –í CHANNEL DETAIL PAGE
              _buildAppBar(horizontalPadding),

              // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
              Expanded(
                child: CustomScrollView(
                  controller: _scrollController,
                  physics: const BouncingScrollPhysics(),
                  slivers: [
                    // –û–ë–õ–û–ñ–ö–ê –° –ê–í–ê–¢–ê–†–ö–û–ô
                    SliverToBoxAdapter(
                      child: _buildCoverWithAvatar(context, userStats, horizontalPadding),
                    ),

                    // –ö–û–ù–¢–ï–ù–¢ –ü–†–û–§–ò–õ–Ø
                    SliverToBoxAdapter(
                      child: Container(
                        margin: EdgeInsets.only(
                          left: horizontalPadding,
                          right: horizontalPadding,
                          top: 0,
                          bottom: 16,
                        ),
                        child: Column(
                          children: [
                            // –ö–ê–†–¢–û–ß–ö–ê –° –û–ü–ò–°–ê–ù–ò–ï–ú
                            Container(
                              constraints: BoxConstraints(maxWidth: contentMaxWidth),
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.circular(16),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withOpacity(0.08),
                                    blurRadius: 12,
                                    offset: const Offset(0, 4),
                                  ),
                                ],
                              ),
                              child: _buildDescriptionCard(),
                            ),

                            const SizedBox(height: 16),

                            // –°–¢–ê–¢–ò–°–¢–ò–ö–ê
                            Container(
                              constraints: BoxConstraints(maxWidth: contentMaxWidth),
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.circular(16),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withOpacity(0.08),
                                    blurRadius: 12,
                                    offset: const Offset(0, 4),
                                  ),
                                ],
                              ),
                              child: _buildEnhancedStatsSection(userStats),
                            ),

                            const SizedBox(height: 16),

                            // –í–ö–õ–ê–î–ö–ò –ö–û–ù–¢–ï–ù–¢–ê
                            Container(
                              constraints: BoxConstraints(maxWidth: contentMaxWidth),
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.circular(16),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withOpacity(0.08),
                                    blurRadius: 12,
                                    offset: const Offset(0, 4),
                                  ),
                                ],
                              ),
                              child: _buildContentTabs(),
                            ),
                          ],
                        ),
                      ),
                    ),

                    // –ö–û–ù–¢–ï–ù–¢ –í–´–ë–†–ê–ù–ù–û–ì–û –†–ê–ó–î–ï–õ–ê (–ü–û–°–¢–´ –ò–õ–ò –ò–ù–§–û–†–ú–ê–¶–ò–Ø)
                    _buildSelectedSectionSliver(newsProvider),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSelectedSectionSliver(NewsProvider newsProvider) {
    final myPosts = newsProvider.news.where((item) {
      final newsItem = Map<String, dynamic>.from(item);
      return newsItem['author_name'] == widget.userName &&
          newsItem['is_repost'] != true; // –ò—Å–∫–ª—é—á–∞–µ–º —Ä–µ–ø–æ—Å—Ç—ã –∏–∑ "–ú–æ–∏ –ø–æ—Å—Ç—ã"
    }).toList();

    final likedPosts = newsProvider.news.where((item) {
      final newsItem = Map<String, dynamic>.from(item);
      return newsItem['isLiked'] == true;
    }).toList();

    final repostedPosts = _getUserReposts(newsProvider.news); // –†–µ–ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    switch (_selectedSection) {
      case 0:
        return _buildPostsSectionSliver(myPosts, newsProvider);
      case 1:
        return _buildLikedPostsSectionSliver(likedPosts, newsProvider);
      case 2: // –ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è —Ä–µ–ø–æ—Å—Ç–æ–≤
        return _buildRepostsSectionSliver(repostedPosts, newsProvider);
      case 3:
        return _buildInfoSectionSliver();
      default:
        return _buildPostsSectionSliver(myPosts, newsProvider);
    }
  }


  Widget _buildRepostsSectionSliver(List<dynamic> reposts, NewsProvider newsProvider) {
    if (reposts.isEmpty) {
      return SliverToBoxAdapter(
        child: Container(
          margin: EdgeInsets.only(
            left: _getHorizontalPadding(context),
            right: _getHorizontalPadding(context),
            bottom: 16,
          ),
          constraints: BoxConstraints(maxWidth: _getContentMaxWidth(context)),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(16),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.08),
                blurRadius: 12,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: _buildEmptyState(
            icon: Icons.repeat_rounded,
            title: '–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–ø–æ—Å—Ç–æ–≤',
            subtitle: '–†–µ–ø–æ—Å—Ç–Ω–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–æ—Å—Ç—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∑–¥–µ—Å—å',
          ),
        ),
      );
    }

    return SliverList(
      delegate: SliverChildBuilderDelegate(
            (context, index) {
          final newsItem = Map<String, dynamic>.from(reposts[index]);

          return NewsCard(
            key: ValueKey('repost-${newsItem['id']}-$index'),
            news: newsItem,
            onLike: () => _handleLike(_getSafeNewsIndex(newsItem, newsProvider), newsProvider),
            onBookmark: () => _handleBookmark(_getSafeNewsIndex(newsItem, newsProvider), newsProvider),
            onFollow: () => _handleFollow(_getSafeNewsIndex(newsItem, newsProvider), newsProvider),
            onComment: (text, userName, userAvatar) => _handleComment(
              _getSafeNewsIndex(newsItem, newsProvider),
              text,
              userName,
              userAvatar,
              newsProvider,
            ),
            onRepost: () => _handleRepost(_getSafeNewsIndex(newsItem, newsProvider), newsProvider),
            onEdit: () => _handleEdit(_getSafeNewsIndex(newsItem, newsProvider), context),
            onDelete: () => _handleDelete(_getSafeNewsIndex(newsItem, newsProvider), newsProvider),
            onShare: () => _handleShare(_getSafeNewsIndex(newsItem, newsProvider), context),
            onTagEdit: (tagId, newTagName, color) => _handleTagEdit(
              _getSafeNewsIndex(newsItem, newsProvider),
              tagId,
              newTagName,
              color,
              newsProvider,
            ),
            formatDate: formatDate,
            getTimeAgo: getTimeAgo,
            scrollController: _scrollController,
            onLogout: widget.onLogout,
          );
        },
        childCount: reposts.length,
      ),
    );
  }


  Widget _buildPostsSectionSliver(List<dynamic> posts, NewsProvider newsProvider) {
    if (posts.isEmpty) {
      return SliverToBoxAdapter(
        child: Container(
          margin: EdgeInsets.only(
            left: _getHorizontalPadding(context),
            right: _getHorizontalPadding(context),
            bottom: 16,
          ),
          constraints: BoxConstraints(maxWidth: _getContentMaxWidth(context)),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(16),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.08),
                blurRadius: 12,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: _buildEmptyState(
            icon: Icons.article_outlined,
            title: '–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤',
            subtitle: '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç, —á—Ç–æ–±—ã –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –∑–¥–µ—Å—å',
          ),
        ),
      );
    }

    return SliverList(
      delegate: SliverChildBuilderDelegate(
            (context, index) {
          return NewsCard(
            key: ValueKey('profile-post-${posts[index]['id']}-$index'),
            news: Map<String, dynamic>.from(posts[index]),
            onLike: () => _handleLike(_getSafeNewsIndex(posts[index], newsProvider), newsProvider),
            onBookmark: () => _handleBookmark(_getSafeNewsIndex(posts[index], newsProvider), newsProvider),
            onFollow: () => _handleFollow(_getSafeNewsIndex(posts[index], newsProvider), newsProvider),
            onComment: (text, userName, userAvatar) => _handleComment(
              _getSafeNewsIndex(posts[index], newsProvider),
              text,
              userName,
              userAvatar,
              newsProvider,
            ),
            onRepost: () => _handleRepost(_getSafeNewsIndex(posts[index], newsProvider), newsProvider),
            onEdit: () => _handleEdit(_getSafeNewsIndex(posts[index], newsProvider), context),
            onDelete: () => _handleDelete(_getSafeNewsIndex(posts[index], newsProvider), newsProvider),
            onShare: () => _handleShare(_getSafeNewsIndex(posts[index], newsProvider), context),
            onTagEdit: (tagId, newTagName, color) => _handleTagEdit(
              _getSafeNewsIndex(posts[index], newsProvider),
              tagId,
              newTagName,
              color,
              newsProvider,
            ),
            formatDate: formatDate,
            getTimeAgo: getTimeAgo,
            scrollController: _scrollController,
            onLogout: widget.onLogout,
          );
        },
        childCount: posts.length,
      ),
    );
  }

  Widget _buildLikedPostsSectionSliver(List<dynamic> likedPosts, NewsProvider newsProvider) {
    if (likedPosts.isEmpty) {
      return SliverToBoxAdapter(
        child: Container(
          margin: EdgeInsets.only(
            left: _getHorizontalPadding(context),
            right: _getHorizontalPadding(context),
            bottom: 16,
          ),
          constraints: BoxConstraints(maxWidth: _getContentMaxWidth(context)),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(16),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.08),
                blurRadius: 12,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: _buildEmptyState(
            icon: Icons.favorite_border_rounded,
            title: '–ü–æ–∫–∞ –Ω–µ—Ç –ª–∞–π–∫–æ–≤',
            subtitle: '–ü–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–º—Å—è –ø–æ—Å—Ç–∞–º, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∑–¥–µ—Å—å',
          ),
        ),
      );
    }

    return SliverList(
      delegate: SliverChildBuilderDelegate(
            (context, index) {
          return NewsCard(
            key: ValueKey('liked-post-${likedPosts[index]['id']}-$index'),
            news: Map<String, dynamic>.from(likedPosts[index]),
            onLike: () => _handleLike(_getSafeNewsIndex(likedPosts[index], newsProvider), newsProvider),
            onBookmark: () => _handleBookmark(_getSafeNewsIndex(likedPosts[index], newsProvider), newsProvider),
            onFollow: () => _handleFollow(_getSafeNewsIndex(likedPosts[index], newsProvider), newsProvider),
            onComment: (text, userName, userAvatar) => _handleComment(
              _getSafeNewsIndex(likedPosts[index], newsProvider),
              text,
              userName,
              userAvatar,
              newsProvider,
            ),
            onRepost: () => _handleRepost(_getSafeNewsIndex(likedPosts[index], newsProvider), newsProvider),
            onEdit: () => _handleEdit(_getSafeNewsIndex(likedPosts[index], newsProvider), context),
            onDelete: () => _handleDelete(_getSafeNewsIndex(likedPosts[index], newsProvider), newsProvider),
            onShare: () => _handleShare(_getSafeNewsIndex(likedPosts[index], newsProvider), context),
            onTagEdit: (tagId, newTagName, color) => _handleTagEdit(
              _getSafeNewsIndex(likedPosts[index], newsProvider),
              tagId,
              newTagName,
              color,
              newsProvider,
            ),
            formatDate: formatDate,
            getTimeAgo: getTimeAgo,
            scrollController: _scrollController,
            onLogout: widget.onLogout,
          );
        },
        childCount: likedPosts.length,
      ),
    );
  }

  Widget _buildInfoSectionSliver() {
    final contentMaxWidth = _getContentMaxWidth(context);
    final horizontalPadding = _getHorizontalPadding(context);

    return SliverToBoxAdapter(
      child: Container(
        margin: EdgeInsets.only(
          left: horizontalPadding,
          right: horizontalPadding,
          bottom: 16,
        ),
        child: Container(
          constraints: BoxConstraints(maxWidth: contentMaxWidth),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(16),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.08),
                blurRadius: 12,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(16),
            child: _buildInfoSection(),
          ),
        ),
      ),
    );
  }

  // APP BAR –ö–ê–ö –í CHANNEL DETAIL PAGE
  Widget _buildAppBar(double horizontalPadding) {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.symmetric(horizontal: horizontalPadding, vertical: 8),
      decoration: const BoxDecoration(
        color: Colors.white,
      ),
      child: Row(
        children: [
          // –ö–ù–û–ü–ö–ê BACK –°–õ–ï–í–ê
          IconButton(
            icon: Container(
              padding: const EdgeInsets.all(6),
              decoration: BoxDecoration(
                color: Colors.grey[100],
                shape: BoxShape.circle,
              ),
              child: const Icon(
                Icons.arrow_back,
                color: Colors.black,
                size: 18,
              ),
            ),
            onPressed: () => Navigator.pop(context),
          ),
          const SizedBox(width: 8),

          // –ó–∞–≥–æ–ª–æ–≤–æ–∫
          if (!_showSearchBar) ...[
            const Text(
              '–ü—Ä–æ—Ñ–∏–ª—å',
              style: TextStyle(
                color: Colors.black,
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
            const Spacer(),
          ],

          // –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏
          if (_showSearchBar)
            Expanded(
              child: Row(
                children: [
                  Expanded(
                    child: _buildSearchField(),
                  ),
                  const SizedBox(width: 8),
                  IconButton(
                    icon: Container(
                      padding: const EdgeInsets.all(6),
                      decoration: BoxDecoration(
                        color: Colors.grey[100],
                        shape: BoxShape.circle,
                      ),
                      child: const Icon(
                        Icons.close,
                        color: Colors.black,
                        size: 18,
                      ),
                    ),
                    onPressed: () => setState(() => _showSearchBar = false),
                  ),
                ],
              ),
            )
          else
            Row(
              children: [
                IconButton(
                  icon: Container(
                    padding: const EdgeInsets.all(6),
                    decoration: BoxDecoration(
                      color: Colors.grey[100],
                      shape: BoxShape.circle,
                    ),
                    child: const Icon(
                      Icons.search,
                      color: Colors.black,
                      size: 18,
                    ),
                  ),
                  onPressed: () => setState(() => _showSearchBar = true),
                ),
                IconButton(
                  icon: Container(
                    padding: const EdgeInsets.all(6),
                    decoration: BoxDecoration(
                      color: Colors.grey[100],
                      shape: BoxShape.circle,
                    ),
                    child: const Icon(
                      Icons.more_vert,
                      color: Colors.black,
                      size: 18,
                    ),
                  ),
                  onPressed: () => _showProfileMenu(context),
                ),
              ],
            ),
        ],
      ),
    );
  }

  // –û–ë–õ–û–ñ–ö–ê –° –ê–í–ê–¢–ê–†–ö–û–ô –í–´–†–û–í–ù–ï–ù–ù–û–ô –ü–û –ù–ê–ó–í–ê–ù–ò–Æ
  Widget _buildCoverWithAvatar(BuildContext context, Map<String, int> stats, double horizontalPadding) {
    final coverUrl = _getUserCoverUrl();

    return Container(
      margin: EdgeInsets.symmetric(horizontal: horizontalPadding, vertical: 16),
      child: Card(
        elevation: 4,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        color: Colors.white,
        clipBehavior: Clip.antiAlias,
        child: Stack(
          children: [
            // –û–ë–õ–û–ñ–ö–ê –° –í–û–ó–ú–û–ñ–ù–û–°–¢–¨–Æ –ò–ó–ú–ï–ù–ï–ù–ò–Ø
            GestureDetector(
              onTap: () => _showCoverPickerModal(context),
              child: Container(
                height: 140,
                width: double.infinity,
                decoration: BoxDecoration(
                  image: coverUrl != null && coverUrl.isNotEmpty
                      ? DecorationImage(
                    image: coverUrl.startsWith('http')
                        ? NetworkImage(coverUrl)
                        : FileImage(File(coverUrl)) as ImageProvider,
                    fit: BoxFit.cover,
                  )
                      : null,
                  gradient: coverUrl == null || coverUrl.isEmpty
                      ? LinearGradient(
                    colors: [
                      _getUserColor(),
                      _darkenColor(_getUserColor(), 0.3),
                    ],
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                  )
                      : null,
                ),
                child: Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.bottomCenter,
                      end: Alignment.topCenter,
                      colors: [
                        Colors.black.withOpacity(0.4),
                        Colors.transparent,
                      ],
                    ),
                  ),
                  // –ò–ö–û–ù–ö–ê –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –û–ë–õ–û–ñ–ö–ò
                  child: Align(
                    alignment: Alignment.topRight,
                    child: Container(
                      margin: const EdgeInsets.all(12),
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: Colors.black.withOpacity(0.6),
                        shape: BoxShape.circle,
                      ),
                      child: const Icon(
                        Icons.edit_rounded,
                        color: Colors.white,
                        size: 18,
                      ),
                    ),
                  ),
                ),
              ),
            ),

            // –ê–í–ê–¢–ê–†–ö–ê –ò –ò–ù–§–û–†–ú–ê–¶–ò–Ø - –í–´–†–û–í–ù–ï–ù–´ –ü–û –¶–ï–ù–¢–†–£
            Positioned(
              bottom: 16,
              left: 16,
              right: 16,
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  // –ê–í–ê–¢–ê–†–ö–ê
                  GestureDetector(
                    onTap: () => _showImagePickerModal(context),
                    child: Container(
                      width: 80,
                      height: 80,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        border: Border.all(
                          color: Colors.white,
                          width: 3,
                        ),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.3),
                            blurRadius: 8,
                            offset: const Offset(0, 3),
                          ),
                        ],
                      ),
                      child: ClipOval(
                        child: _getProfileImageWidget(),
                      ),
                    ),
                  ),

                  const SizedBox(width: 16),

                  // –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Text(
                          widget.userName,
                          style: const TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.w800,
                            color: Colors.white,
                            height: 1.2,
                          ),
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
                        ),
                        const SizedBox(height: 4),
                        Text(
                          '@${widget.userName.toLowerCase().replaceAll(' ', '')}',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.white.withOpacity(0.9),
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  // –ö–ê–†–¢–û–ß–ö–ê –° –û–ü–ò–°–ê–ù–ò–ï–ú
  Widget _buildDescriptionCard() {
    return Padding(
      padding: const EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
          Row(
            children: [
              Icon(
                Icons.info_outline_rounded,
                color: _getUserColor(),
                size: 20,
              ),
              const SizedBox(width: 8),
              const Text(
                '–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w700,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),

          // –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.grey[50],
              borderRadius: BorderRadius.circular(12),
              border: Border.all(
                color: Colors.grey[200]!,
                width: 1,
              ),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  widget.userEmail,
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.black87.withOpacity(0.8),
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å 2024 –≥–æ–¥–∞',
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.black87.withOpacity(0.6),
                    height: 1.4,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // –°–ï–ö–¶–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò
  Widget _buildEnhancedStatsSection(Map<String, int> stats) {
    return Padding(
      padding: const EdgeInsets.all(20),
      child: Column(
        children: [
          // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
          Row(
            children: [
              Icon(
                Icons.analytics_rounded,
                color: _getUserColor(),
                size: 20,
              ),
              const SizedBox(width: 8),
              const Text(
                '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w700,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),

          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.grey[50],
              borderRadius: BorderRadius.circular(12),
              border: Border.all(
                color: Colors.grey[200]!,
                width: 1,
              ),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildStatItem(
                  '${stats['posts'] ?? 0}',
                  '–ü–æ—Å—Ç–æ–≤',
                  Icons.article_rounded,
                  _getUserColor(),
                ),
                _buildStatItem(
                  '${stats['likes'] ?? 0}',
                  '–õ–∞–π–∫–æ–≤',
                  Icons.favorite_rounded,
                  _getUserColor(),
                ),
                _buildStatItem(
                  '${stats['comments'] ?? 0}',
                  '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
                  Icons.chat_rounded,
                  _getUserColor(),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatItem(String value, String label, IconData icon, Color color) {
    return Column(
      children: [
        Container(
          width: 40,
          height: 40,
          decoration: BoxDecoration(
            color: color.withOpacity(0.1),
            shape: BoxShape.circle,
          ),
          child: Icon(
            icon,
            color: color,
            size: 20,
          ),
        ),
        const SizedBox(height: 6),
        Text(
          value,
          style: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w700,
            color: Colors.black87,
          ),
        ),
        Text(
          label,
          style: TextStyle(
            fontSize: 11,
            color: Colors.grey[600],
            fontWeight: FontWeight.w500,
          ),
        ),
      ],
    );
  }

  // –í–ö–õ–ê–î–ö–ò –ö–û–ù–¢–ï–ù–¢–ê
  Widget _buildContentTabs() {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
          Row(
            children: [
              Icon(
                Icons.dynamic_feed_rounded,
                color: _getUserColor(),
                size: 20,
              ),
              const SizedBox(width: 8),
              const Text(
                '–ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w700,
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),

          // –í–∫–ª–∞–¥–∫–∏ - –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É "–†–µ–ø–æ—Å—Ç—ã"
          Container(
            height: 44,
            decoration: BoxDecoration(
              color: Colors.grey[50],
              borderRadius: BorderRadius.circular(12),
              border: Border.all(
                color: Colors.grey[200]!,
                width: 1,
              ),
            ),
            child: Row(
              children: [
                _buildTab('–ú–æ–∏ –ø–æ—Å—Ç—ã', 0),
                _buildTab('–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å', 1),
                _buildTab('–†–µ–ø–æ—Å—Ç—ã', 2),
                _buildTab('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 3),
              ],
            ),
          ),
        ],
      ),
    );
  }


  Widget _buildTab(String text, int index) {
    final isActive = _selectedSection == index;
    return Expanded(
      child: Container(
        margin: const EdgeInsets.all(4),
        decoration: BoxDecoration(
          color: isActive ? _getUserColor() : Colors.transparent,
          borderRadius: BorderRadius.circular(8),
          boxShadow: isActive
              ? [
            BoxShadow(
              color: _getUserColor().withOpacity(0.3),
              blurRadius: 4,
              offset: const Offset(0, 2),
            ),
          ]
              : [],
        ),
        child: Material(
          color: Colors.transparent,
          child: InkWell(
            onTap: () {
              setState(() => _selectedSection = index);
              // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–ø–æ—Å—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
              if (index == 2) {
                _debugReposts();
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if (mounted) setState(() {});
              }
            },
            borderRadius: BorderRadius.circular(8),
            child: Center(
              child: Text(
                text,
                style: TextStyle(
                  color: isActive ? Colors.white : Colors.grey[700],
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }






  Widget _buildInfoSection() {
    return Padding(
      padding: const EdgeInsets.all(20),
      child: Column(
        children: [
          _buildActionItem(
            '–°–æ–æ–±—â–µ–Ω–∏—è',
            '–ù–æ–≤—ã—Ö: ${widget.newMessagesCount ?? 0}',
            Icons.message_rounded,
            Colors.blue,
                () => _handleMessagesTap(context),
          ),
          const SizedBox(height: 12),
          _buildActionItem(
            '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            '–í–Ω–µ—à–Ω–∏–π –≤–∏–¥, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            Icons.settings_rounded,
            Colors.purple,
                () => _handleSettingsTap(context),
          ),
          const SizedBox(height: 12),
          _buildActionItem(
            '–ü–æ–º–æ—â—å',
            '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
            Icons.help_rounded,
            Colors.orange,
                () => _handleHelpTap(context),
          ),
          const SizedBox(height: 12),
          _buildActionItem(
            '–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
            '–í–µ—Ä—Å–∏—è 1.0.0 Beta',
            Icons.info_rounded,
            Colors.teal,
                () => _handleAboutTap(context),
          ),
          const SizedBox(height: 20),
          Container(
            decoration: BoxDecoration(
              color: Colors.red.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.red.withOpacity(0.3)),
            ),
            child: ListTile(
              leading: Icon(Icons.logout_rounded, color: Colors.red),
              title: Text(
                '–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞',
                style: TextStyle(
                  color: Colors.red,
                  fontWeight: FontWeight.w600,
                ),
              ),
              trailing: Icon(Icons.arrow_forward_ios_rounded, size: 16, color: Colors.red),
              onTap: () => _handleLogout(context),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEmptyState({
    required IconData icon,
    required String title,
    required String subtitle,
  }) {
    return Container(
      padding: const EdgeInsets.all(32),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            width: 64,
            height: 64,
            decoration: BoxDecoration(
              color: _getUserColor().withOpacity(0.1),
              shape: BoxShape.circle,
            ),
            child: Icon(icon, size: 32, color: _getUserColor()),
          ),
          const SizedBox(height: 16),
          Text(
            title,
            style: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w700,
              color: Colors.black87,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 8),
          Text(
            subtitle,
            style: TextStyle(fontSize: 14, color: Colors.grey[600]),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildActionItem(
      String title,
      String subtitle,
      IconData icon,
      Color color,
      VoidCallback? onTap,
      ) {
    return Material(
      color: Colors.transparent,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: color.withOpacity(0.05),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: color.withOpacity(0.2)),
          ),
          child: Row(
            children: [
              Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  color: color.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(icon, color: color, size: 20),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      title,
                      style: const TextStyle(
                        fontWeight: FontWeight.w600,
                        color: Colors.black87,
                        fontSize: 16,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      subtitle,
                      style: TextStyle(
                        color: Colors.grey[600],
                        fontSize: 14,
                      ),
                    ),
                  ],
                ),
              ),
              Icon(
                Icons.arrow_forward_ios_rounded,
                size: 16,
                color: Colors.grey.withOpacity(0.6),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
  String? _getUserCoverUrl() {
    final newsProvider = Provider.of<NewsProvider>(context, listen: false);
    final userId = _generateUserId(widget.userEmail);
    final userProfile = newsProvider.getUserProfile(userId);

    if (userProfile?.coverImageFile != null) {
      return userProfile!.coverImageFile!.path;
    } else if (userProfile?.coverImageUrl != null &&
        userProfile!.coverImageUrl!.isNotEmpty) {
      return userProfile.coverImageUrl;
    }

    // –û–±–ª–æ–∂–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return 'https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=400';
  }

  Widget _getProfileImageWidget() {
    return Consumer<NewsProvider>(
      builder: (context, newsProvider, child) {
        final userId = _generateUserId(widget.userEmail);
        final userProfile = newsProvider.getUserProfile(userId);

        if (userProfile?.profileImageFile != null) {
          return Image.file(userProfile!.profileImageFile!, fit: BoxFit.cover);
        } else if (userProfile?.profileImageUrl != null &&
            userProfile!.profileImageUrl!.isNotEmpty) {
          return Image.network(
            userProfile.profileImageUrl!,
            fit: BoxFit.cover,
            errorBuilder: (context, error, stackTrace) {
              return _buildDefaultAvatar();
            },
          );
        } else {
          return _buildDefaultAvatar();
        }
      },
    );
  }

  Widget _buildDefaultAvatar() {
    final gradientColors = _getAvatarGradient(widget.userName);
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: gradientColors,
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
      ),
      child: Center(
        child: Text(
          widget.userName.isNotEmpty ? widget.userName[0].toUpperCase() : 'U',
          style: const TextStyle(
            fontSize: 28,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
        ),
      ),
    );
  }

  Color _getUserColor() {
    final colors = [
      Colors.blue.shade700,
      Colors.green.shade700,
      Colors.orange.shade700,
      Colors.purple.shade700,
      Colors.red.shade700,
      Colors.teal.shade700,
    ];
    final index = widget.userName.isEmpty ? 0 : widget.userName.codeUnits.reduce((a, b) => a + b) % colors.length;
    return colors[index];
  }

  Color _darkenColor(Color color, double factor) {
    final hsl = HSLColor.fromColor(color);
    final hslDark = hsl.withLightness((hsl.lightness - factor).clamp(0.0, 1.0));
    return hslDark.toColor();
  }

  List<Color> _getAvatarGradient(String name) {
    final colors = [
      [const Color(0xFF667eea), const Color(0xFF764ba2)],
      [const Color(0xFFf093fb), const Color(0xFFf5576c)],
      [const Color(0xFF4facfe), const Color(0xFF00f2fe)],
      [const Color(0xFF43e97b), const Color(0xFF38f9d7)],
      [const Color(0xFFfa709a), const Color(0xFFfee140)],
      [const Color(0xFF30cfd0), const Color(0xFF330867)],
    ];
    final index = name.isEmpty ? 0 : name.codeUnits.reduce((a, b) => a + b) % colors.length;
    return colors[index];
  }

  // –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –û–ë–õ–û–ñ–ö–û–ô
  Future<void> _pickCoverImage(ImageSource source, BuildContext context) async {
    try {
      final ImagePicker picker = ImagePicker();
      final XFile? image = await picker.pickImage(
        source: source,
        maxWidth: 1200,
        maxHeight: 400,
        imageQuality: 85,
      );
      if (image != null) {
        final newsProvider = Provider.of<NewsProvider>(context, listen: false);
        final userId = _generateUserId(widget.userEmail);

        await newsProvider.updateCoverImageFile(File(image.path));

        if (context.mounted) {
          _showSuccessSnackBar('–û–±–ª–æ–∂–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
          Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        }
      }
    } catch (e) {
      if (context.mounted) {
        _showErrorSnackBar('–û—à–∏–±–∫–∞: $e');
      }
    }
  }

  Widget _buildCoverSourceButton(BuildContext context, IconData icon, String text, Color color, VoidCallback onTap) {
    return Material(
      color: Colors.transparent,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: color.withOpacity(0.05),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: color.withOpacity(0.2)),
          ),
          child: Row(
            children: [
              Icon(icon, color: color, size: 24),
              const SizedBox(width: 16),
              Text(
                text,
                style: const TextStyle(
                  color: Colors.black87,
                  fontWeight: FontWeight.w600,
                  fontSize: 16,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _showCoverUrlInputDialog(BuildContext context) {
    final TextEditingController urlController = TextEditingController();
    bool isLoading = false;

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: const Text('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±–ª–æ–∂–∫—É'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              if (isLoading)
                const Column(
                  children: [
                    CircularProgressIndicator(),
                    SizedBox(height: 16),
                    Text('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏...'),
                  ],
                ),
              TextField(
                controller: urlController,
                decoration: const InputDecoration(
                  hintText: 'https://example.com/cover.jpg',
                  border: OutlineInputBorder(),
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: isLoading ? null : () => Navigator.pop(context),
              child: const Text('–û—Ç–º–µ–Ω–∞'),
            ),
            ElevatedButton(
              onPressed: isLoading ? null : () async {
                final url = urlController.text.trim();
                if (url.isEmpty) {
                  _showErrorSnackBar('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É');
                  return;
                }

                setState(() => isLoading = true);
                try {
                  String finalUrl = url;
                  if (!url.startsWith('http')) {
                    finalUrl = 'https://$url';
                  }

                  final newsProvider = Provider.of<NewsProvider>(context, listen: false);
                  final userId = _generateUserId(widget.userEmail);

                  await newsProvider.updateCoverImageUrl(finalUrl);

                  Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                  Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ

                  _showSuccessSnackBar('–û–±–ª–æ–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');

                } catch (e) {
                  setState(() => isLoading = false);
                  _showErrorSnackBar('–û—à–∏–±–∫–∞: $e');
                }
              },
              child: isLoading
                  ? const SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(strokeWidth: 2),
              )
                  : const Text('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'),
            ),
          ],
        ),
      ),
    );
  }

  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ô –° –ü–û–°–¢–ê–ú–ò
  int _getSafeNewsIndex(dynamic newsItem, NewsProvider newsProvider) {
    final newsId = newsItem['id'].toString();
    return newsProvider.findNewsIndexById(newsId);
  }
  void _handleLike(int index, NewsProvider newsProvider) {
    if (index == -1) return;

    final news = Map<String, dynamic>.from(newsProvider.news[index]);
    final newsId = news['id'].toString();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º InteractionManager –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ NewsProvider
    final interactionManager = InteractionManager();
    interactionManager.toggleLike(newsId);

    _showSuccessSnackBar('–õ–∞–π–∫ –æ–±–Ω–æ–≤–ª–µ–Ω');
  }







  void _handleBookmark(int index, NewsProvider newsProvider) {
    if (index == -1) return;

    final news = Map<String, dynamic>.from(newsProvider.news[index]);
    final newsId = news['id'].toString();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º InteractionManager
    final interactionManager = InteractionManager();
    interactionManager.toggleBookmark(newsId);

    final isCurrentlyBookmarked = news['isBookmarked'] ?? false;
    _showSuccessSnackBar(!isCurrentlyBookmarked ? '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' : '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
  }

  void _handleRepost(int index, NewsProvider newsProvider) {
    if (index == -1) return;

    final news = Map<String, dynamic>.from(newsProvider.news[index]);
    final newsId = news['id'].toString();
    final userId = _generateUserId(widget.userEmail);

    print('üîÑ ProfilePage: Handling repost for post: $newsId');
    print('   User: $userId (${widget.userName})');
    print('   Current repost state: ${news['isReposted'] ?? false}');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º InteractionManager —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final interactionManager = InteractionManager();
    interactionManager.toggleRepost(
      newsId,
      currentUserId: userId,
      currentUserName: widget.userName,
    );

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setState(() {});

    print('‚úÖ Repost action completed for post $newsId');
  }


  // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ _ProfilePageState –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  void _checkReposts() {
    final newsProvider = Provider.of<NewsProvider>(context, listen: false);
    final userId = _generateUserId(widget.userEmail);

    print('üîç Checking reposts for user: $userId');

    final allReposts = newsProvider.news.where((item) {
      final newsItem = Map<String, dynamic>.from(item);
      return newsItem['is_repost'] == true;
    }).toList();

    print('üìä Total reposts in system: ${allReposts.length}');

    final userReposts = allReposts.where((item) {
      final newsItem = Map<String, dynamic>.from(item);
      return newsItem['reposted_by'] == userId;
    }).toList();

    print('üë§ Reposts by current user: ${userReposts.length}');

    for (final repost in userReposts) {
      final repostItem = Map<String, dynamic>.from(repost);
      print('   - ${repostItem['id']}: ${repostItem['title']}');
    }

    // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
    if (_selectedSection == 2) { // –í–∫–ª–∞–¥–∫–∞ —Ä–µ–ø–æ—Å—Ç–æ–≤
      _checkReposts();
    }
  }


  // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ _ProfilePageState –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  void _debugUserData() {
    final userId = _generateUserId(widget.userEmail);
    print('üë§ Debug user data:');
    print('   Name: ${widget.userName}');
    print('   Email: ${widget.userEmail}');
    print('   Generated ID: $userId');

    final newsProvider = Provider.of<NewsProvider>(context, listen: false);
    final allReposts = newsProvider.news.where((item) {
      final newsItem = Map<String, dynamic>.from(item);
      return newsItem['is_repost'] == true;
    }).toList();

    print('üìä Total reposts in system: ${allReposts.length}');
    for (final repost in allReposts) {
      final repostItem = Map<String, dynamic>.from(repost);
      print('   - ${repostItem['id']} by ${repostItem['reposted_by']} (${repostItem['reposted_by_name']})');
    }
  }
  void _handleComment(int index, String commentText, String userName, String userAvatar, NewsProvider newsProvider) {
    if (index == -1 || commentText.trim().isEmpty) return;

    final news = Map<String, dynamic>.from(newsProvider.news[index]);
    final newsId = news['id'].toString();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º InteractionManager
    final interactionManager = InteractionManager();
    interactionManager.addComment(
      postId: newsId,
      text: commentText.trim(),
      author: userName,
      authorAvatar: userAvatar,
    );

    _showSuccessSnackBar('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω');
  }

  void _handleFollow(int index, NewsProvider newsProvider) {
    if (index == -1) return;

    final news = Map<String, dynamic>.from(newsProvider.news[index]);
    final bool isCurrentlyFollowing = news['isFollowing'] ?? false;

    // –î–ª—è –∫–∞–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º ChannelStateProvider
    final isChannelPost = news['is_channel_post'] == true;
    final channelId = news['channel_id']?.toString();

    if (isChannelPost && channelId != null && channelId.isNotEmpty) {
      final channelStateProvider = Provider.of<ChannelStateProvider>(context, listen: false);
      final currentSubscribers = channelStateProvider.getSubscribers(channelId) ?? 0;
      channelStateProvider.toggleSubscription(channelId, currentSubscribers);

      final targetName = news['channel_name'] ?? '–∫–∞–Ω–∞–ª';
      if (!isCurrentlyFollowing) {
        _showSuccessSnackBar('‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ $targetName');
      } else {
        _showSuccessSnackBar('‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç $targetName');
      }
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º NewsProvider
      newsProvider.updateNewsFollowStatus(index, !isCurrentlyFollowing);

      final targetName = news['author_name'] ?? '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
      if (!isCurrentlyFollowing) {
        _showSuccessSnackBar('‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ $targetName');
      } else {
        _showSuccessSnackBar('‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç $targetName');
      }
    }
  }

  void _handleEdit(int index, BuildContext context) {
    if (index == -1) return;
    _showSuccessSnackBar('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞');
  }

  void _handleDelete(int index, NewsProvider newsProvider) {
    if (index == -1) return;
    newsProvider.removeNews(index);
    _showSuccessSnackBar('–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω');
  }

  void _handleShare(int index, BuildContext context) {
    if (index == -1) return;
    _showSuccessSnackBar('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ—Å—Ç–æ–º');
  }

  void _handleTagEdit(int index, String tagId, String newTagName, Color color, NewsProvider newsProvider) {
    if (index == -1) return;
    newsProvider.updateNewsUserTag(index, tagId, newTagName, color: color);
    _showSuccessSnackBar('–¢–µ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω');
  }

  void _showProfileMenu(BuildContext context) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
        ),
        padding: const EdgeInsets.all(20),
        child: SafeArea(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Container(
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
              const SizedBox(height: 12),
              _buildMenuOption(
                Icons.share_rounded,
                '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º',
                Colors.blue,
                    () {
                  Navigator.pop(context);
                  _showSuccessSnackBar('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞');
                },
              ),
              const SizedBox(height: 12),
              _buildMenuOption(
                Icons.qr_code_rounded,
                'QR-–∫–æ–¥ –ø—Ä–æ—Ñ–∏–ª—è',
                Colors.green,
                    () {
                  Navigator.pop(context);
                  _showSuccessSnackBar('QR-–∫–æ–¥ –ø—Ä–æ—Ñ–∏–ª—è');
                },
              ),
              const SizedBox(height: 12),
              _buildMenuOption(
                Icons.report_rounded,
                '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è',
                Colors.orange,
                    () {
                  Navigator.pop(context);
                  _showSuccessSnackBar('–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
                },
              ),
              const SizedBox(height: 20),
              SizedBox(
                width: double.infinity,
                child: OutlinedButton(
                  onPressed: () => Navigator.pop(context),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.grey[700],
                    side: BorderSide(color: Colors.grey[300]!),
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                    padding: const EdgeInsets.symmetric(vertical: 12),
                  ),
                  child: const Text('–û—Ç–º–µ–Ω–∞'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildMenuOption(IconData icon, String text, Color color, VoidCallback onTap) {
    return Material(
      color: Colors.transparent,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: color.withOpacity(0.05),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: color.withOpacity(0.2)),
          ),
          child: Row(
            children: [
              Icon(icon, color: color, size: 24),
              const SizedBox(width: 16),
              Text(
                text,
                style: const TextStyle(
                  color: Colors.black87,
                  fontWeight: FontWeight.w600,
                  fontSize: 16,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø—Ä–æ—Ñ–∏–ª—è
  Future<void> _pickImage(ImageSource source, BuildContext context) async {
    try {
      final ImagePicker picker = ImagePicker();
      final XFile? image = await picker.pickImage(
        source: source,
        maxWidth: 512,
        maxHeight: 512,
        imageQuality: 85,
      );
      if (image != null) {
        final newsProvider = Provider.of<NewsProvider>(context, listen: false);
        final userId = _generateUserId(widget.userEmail);

        await newsProvider.updateProfileImageFile(File(image.path));

        if (context.mounted) {
          _showSuccessSnackBar('–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
          Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        }
      }
    } catch (e) {
      if (context.mounted) {
        _showErrorSnackBar('–û—à–∏–±–∫–∞: $e');
      }
    }
  }



  Widget _buildImageSourceButton(BuildContext context, IconData icon, String text, Color color, VoidCallback onTap) {
    return Material(
      color: Colors.transparent,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: color.withOpacity(0.05),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: color.withOpacity(0.2)),
          ),
          child: Row(
            children: [
              Icon(icon, color: color, size: 24),
              const SizedBox(width: 16),
              Text(
                text,
                style: const TextStyle(
                  color: Colors.black87,
                  fontWeight: FontWeight.w600,
                  fontSize: 16,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _showUrlInputDialog(BuildContext context) {
    final TextEditingController urlController = TextEditingController();
    bool isLoading = false;

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: const Text('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              if (isLoading)
                const Column(
                  children: [
                    CircularProgressIndicator(),
                    SizedBox(height: 16),
                    Text('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏...'),
                  ],
                ),
              TextField(
                controller: urlController,
                decoration: const InputDecoration(
                  hintText: 'https://example.com/photo.jpg',
                  border: OutlineInputBorder(),
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: isLoading ? null : () => Navigator.pop(context),
              child: const Text('–û—Ç–º–µ–Ω–∞'),
            ),
            ElevatedButton(
              onPressed: isLoading ? null : () async {
                final url = urlController.text.trim();
                if (url.isEmpty) {
                  _showErrorSnackBar('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É');
                  return;
                }

                setState(() => isLoading = true);
                try {
                  String finalUrl = url;
                  if (!url.startsWith('http')) {
                    finalUrl = 'https://$url';
                  }

                  final newsProvider = Provider.of<NewsProvider>(context, listen: false);
                  final userId = _generateUserId(widget.userEmail);

                  await newsProvider.updateProfileImageUrl(finalUrl);

                  Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                  Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ

                  _showSuccessSnackBar('–§–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');

                } catch (e) {
                  setState(() => isLoading = false);
                  _showErrorSnackBar('–û—à–∏–±–∫–∞: $e');
                }
              },
              child: isLoading
                  ? const SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(strokeWidth: 2),
              )
                  : const Text('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'),
            ),
          ],
        ),
      ),
    );
  }

  void _handleMessagesTap(BuildContext context) {
    widget.onMessagesTap?.call();
    _showSuccessSnackBar('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º');
  }

  void _handleSettingsTap(BuildContext context) {
    widget.onSettingsTap?.call();
    _showSuccessSnackBar('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º');
  }

  void _handleHelpTap(BuildContext context) {
    widget.onHelpTap?.call();
    _showSuccessSnackBar('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É –ø–æ–º–æ—â–∏');
  }

  void _handleAboutTap(BuildContext context) {
    widget.onAboutTap?.call();
    _showSuccessSnackBar('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
  }

  void _handleLogout(BuildContext context) {
    widget.onLogout();
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(Icons.check_circle_rounded, color: Colors.white, size: 20),
            const SizedBox(width: 8),
            Expanded(child: Text(message)),
          ],
        ),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(Icons.error_outline_rounded, color: Colors.white, size: 20),
            const SizedBox(width: 8),
            Expanded(child: Text(message)),
          ],
        ),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }
}