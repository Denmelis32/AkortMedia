import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'home_page.dart';
import '../providers/user_provider.dart';
import '../services/auth_service.dart';
import '../services/api_service.dart';

const Color myCustomRed = Color(0xFF2196F3);

class RegisterPage extends StatefulWidget {
  const RegisterPage({super.key});

  @override
  State<RegisterPage> createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _confirmPasswordController = TextEditingController();
  final _formKey = GlobalKey<FormState>();
  bool _isLoading = false;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
    _nameController.text = '–ò–≥–æ—Ä—å –ë—É–º–∞–∂–Ω—ã–π';
    _emailController.text = 'IgorBumaga@example.com';
    _passwordController.text = '123456';
    _confirmPasswordController.text = '123456';
  }

  // üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –° –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–´–ú –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –¢–û–ö–ï–ù–ê
  Future<void> _register() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
        _errorMessage = null;
      });

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if (_nameController.text.isEmpty ||
            _emailController.text.isEmpty ||
            _passwordController.text.isEmpty ||
            _confirmPasswordController.text.isEmpty) {
          throw Exception('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞—Ä–æ–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if (_passwordController.text != _confirmPasswordController.text) {
          throw Exception('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º email –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if (!_emailController.text.contains('@')) {
          throw Exception('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
        }

        print('üéØ Starting registration process...');

        // üéØ –í–´–ü–û–õ–ù–Ø–ï–ú –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ –ß–ï–†–ï–ó API SERVICE
        final result = await ApiService.register(
          _nameController.text,
          _emailController.text,
          _passwordController.text,
        );

        print('üîë Registration API response received');

        // üéØ –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –¢–û–ö–ï–ù–ê
        String? finalToken;

        if (result['token'] != null) {
          await AuthService.saveToken(result['token']);
          finalToken = result['token'];
          print('‚úÖ Token saved from API response');
        } else {
          // üéØ –°–û–ó–î–ê–ï–ú –¢–û–ö–ï–ù –í–†–£–ß–ù–£–Æ –ï–°–õ–ò –ï–ì–û –ù–ï–¢ –í –û–¢–í–ï–¢–ï
          final userId = result['user']?['id'] ?? 'user_${DateTime.now().millisecondsSinceEpoch}';
          final manualToken = 'mock-jwt-token-$userId';
          await AuthService.saveToken(manualToken);
          finalToken = manualToken;
          result['token'] = manualToken;
          print('üîÑ Manual token created: $manualToken');
        }

        // üéØ –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        if (result['user'] != null) {
          await AuthService.saveUser(Map<String, dynamic>.from(result['user']));
          print('‚úÖ User data saved');
        } else {
          // üéØ –°–û–ó–î–ê–ï–ú –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ï–°–õ–ò –ò–• –ù–ï–¢
          final userData = {
            'id': result['user']?['id'] ?? 'user_${DateTime.now().millisecondsSinceEpoch}',
            'name': _nameController.text,
            'email': _emailController.text,
          };
          await AuthService.saveUser(userData);
          print('‚úÖ Manual user data created');
        }

        // üéØ –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –¢–û–ö–ï–ù –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –°–û–•–†–ê–ù–ò–õ–°–Ø
        final savedToken = await AuthService.getToken();
        if (savedToken == null) {
          throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }

        print('‚úÖ Token verified after registration: ${savedToken.substring(0, _min(savedToken.length, 20))}...');

        // üéØ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –° PROVIDER
        final userProvider = context.read<UserProvider>();
        if (result['user'] != null) {
          final userData = Map<String, dynamic>.from(result['user']);
          await userProvider.setUserData(
            userData['name'] ?? _nameController.text,
            userData['email'] ?? _emailController.text,
            userId: userData['id']?.toString() ?? '',
          );
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ
          await userProvider.setUserData(
            _nameController.text,
            _emailController.text,
          );
        }

        // üéØ –í–´–ü–û–õ–ù–Ø–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Æ –° –°–ï–†–í–ï–†–û–ú
        print('üîÑ Syncing user data with server after registration...');
        await userProvider.syncWithServer();

        print('‚úÖ Registration process completed successfully');

        // –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!'),
              backgroundColor: Colors.green,
            ),
          );

          // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ HomePage
          if (mounted) {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                builder: (context) => HomePage(
                  userName: userProvider.userName,
                  userEmail: userProvider.userEmail,
                  onLogout: () {
                    userProvider.clearUserData();
                    if (context.mounted) {
                      Navigator.of(context).pushReplacement(
                        MaterialPageRoute(builder: (context) => const RegisterPage()),
                      );
                    }
                  },
                ),
              ),
            );
          }
        }

      } catch (e) {
        print('‚ùå Registration error: $e');

        // –û—à–∏–±–∫–∞
        if (mounted) {
          setState(() {
            _errorMessage = e.toString().replaceAll('Exception: ', '');
            _isLoading = false;
          });

          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(_errorMessage!),
              backgroundColor: Colors.red,
            ),
          );
        }
      } finally {
        // –§–∏–Ω–∞–ª—å–Ω–æ
        if (mounted) {
          setState(() => _isLoading = false);
        }
      }
    }
  }

  int _min(int a, int b) => a < b ? a : b;

  void _navigateToLogin() {
    if (mounted) {
      Navigator.pop(context);
    }
  }

  @override
  void dispose() {
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (_isLoading) {
      _isLoading = false;
    }

    // –ó–∞—Ç–µ–º –¥–∏—Å–ø–æ–∑–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
    _nameController.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();

    // –í –∫–æ–Ω—Ü–µ –≤—ã–∑—ã–≤–∞–µ–º super.dispose()
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[100],
      body: Center(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(20.0),
          child: Card(
            elevation: 4,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            child: Padding(
              padding: const EdgeInsets.all(24.0),
              child: Form(
                key: _formKey,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    const Text(
                      '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞',
                      style: TextStyle(
                        fontSize: 28,
                        fontWeight: FontWeight.bold,
                        color: myCustomRed,
                      ),
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                      style: TextStyle(
                        fontSize: 16,
                        color: Colors.grey,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 20),

                    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    if (_errorMessage != null)
                      Container(
                        width: double.infinity,
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.red[50],
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.red),
                        ),
                        child: Text(
                          _errorMessage!,
                          style: const TextStyle(
                            color: Colors.red,
                            fontSize: 14,
                          ),
                        ),
                      ),

                    if (_errorMessage != null) const SizedBox(height: 16),

                    // –ü–æ–ª–µ –∏–º–µ–Ω–∏
                    TextFormField(
                      controller: _nameController,
                      decoration: const InputDecoration(
                        labelText: '–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è',
                        hintText: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è',
                        border: OutlineInputBorder(),
                      ),
                      keyboardType: TextInputType.name,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return '–í–≤–µ–¥–∏—Ç–µ –∏–º—è';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 20),

                    // –ü–æ–ª–µ email
                    TextFormField(
                      controller: _emailController,
                      decoration: const InputDecoration(
                        labelText: 'Email',
                        hintText: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email',
                        border: OutlineInputBorder(),
                      ),
                      keyboardType: TextInputType.emailAddress,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return '–í–≤–µ–¥–∏—Ç–µ email';
                        }
                        if (!value.contains('@')) {
                          return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 20),

                    // –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è
                    TextFormField(
                      controller: _passwordController,
                      decoration: const InputDecoration(
                        labelText: '–ü–∞—Ä–æ–ª—å',
                        hintText: '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å',
                        border: OutlineInputBorder(),
                      ),
                      obscureText: true,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å';
                        }
                        if (value.length < 6) {
                          return '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 20),

                    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
                    TextFormField(
                      controller: _confirmPasswordController,
                      decoration: const InputDecoration(
                        labelText: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
                        hintText: '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
                        border: OutlineInputBorder(),
                      ),
                      obscureText: true,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å';
                        }
                        if (value != _passwordController.text) {
                          return '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 24),

                    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    _isLoading
                        ? const CircularProgressIndicator()
                        : SizedBox(
                      width: double.infinity,
                      height: 50,
                      child: ElevatedButton(
                        onPressed: _register,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: myCustomRed,
                          foregroundColor: Colors.white,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                          elevation: 2,
                        ),
                        child: const Text(
                          '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),

                    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                    Row(
                      children: [
                        Expanded(
                          child: Divider(
                            color: Colors.grey[300],
                            thickness: 1,
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 16),
                          child: Text(
                            '–∏–ª–∏',
                            style: TextStyle(
                              color: Colors.grey[600],
                              fontSize: 14,
                            ),
                          ),
                        ),
                        Expanded(
                          child: Divider(
                            color: Colors.grey[300],
                            thickness: 1,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),

                    // –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
                    SizedBox(
                      width: double.infinity,
                      height: 50,
                      child: OutlinedButton(
                        onPressed: _navigateToLogin,
                        style: OutlinedButton.styleFrom(
                          side: const BorderSide(color: myCustomRed),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        child: const Text(
                          '–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: myCustomRed,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 8),

                    // –¢–µ–∫—Å—Ç –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π –≤—Ö–æ–¥–∞
                    TextButton(
                      onPressed: _navigateToLogin,
                      child: const Text(
                        '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π–¥–∏—Ç–µ —Å–µ–π—á–∞—Å',
                        style: TextStyle(
                          color: Colors.grey,
                          fontSize: 14,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}