import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../chat/chat_page.dart';
import '../../communities/community_detail_page.dart';
import '../../communities/widgets/create_community_bottom_sheet.dart';
import '../widgets/bottom_sheets/advanced_filters_bottom_sheet.dart';
import '../widgets/bottom_sheets/create_room_bottom_sheet.dart';
import '../models/room.dart';
import '../../communities/models/community.dart';
import '../../../providers/room_provider.dart';
import '../../../providers/user_provider.dart';
import '../widgets/dialogs/notifications_dialog.dart';
import '../widgets/dialogs/quick_actions_dialog.dart' show QuickActionsDialog;
import '../widgets/dialogs/room_quick_actions_dialog.dart';
import '../widgets/dialogs/sort_dialog.dart';
import '../widgets/dialogs/room_stats_dialog.dart';
import 'room_dialogs.dart';

class RoomNavigation {
  final RoomDialogs _dialogs = RoomDialogs();

  void openChatPage({
    required BuildContext context,
    required Room room,
    required String userName,
  }) {
    final userProvider = context.read<UserProvider>();
    final userId = userProvider.userId;

    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ
    if (room.requiresPassword) {
      _dialogs.showPasswordDialog(context, room, userProvider);
      return;
    }

    if (room.accessLevel == RoomAccessLevel.private && !room.hasAccess(userId)) {
      _dialogs.showAccessDeniedDialog(context, room);
      return;
    }

    if (room.isFull) {
      _dialogs.showRoomFullDialog(context, room);
      return;
    }

    if (room.isScheduled && !room.isExpired) {
      _dialogs.showScheduledRoomDialog(context, room);
      return;
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ —á–∞—Ç
    Navigator.of(context).push(
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) => ChatPage(
          room: room,
          userName: userName,
        ),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          const begin = Offset(1.0, 0.0);
          const end = Offset.zero;
          const curve = Curves.easeInOutQuart;

          var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));
          var offsetAnimation = animation.drive(tween);

          return SlideTransition(position: offsetAnimation, child: child);
        },
        transitionDuration: const Duration(milliseconds: 400),
      ),
    );
  }

  void createNewRoom(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => CreateRoomBottomSheet(
        onRoomCreated: (newRoom) => _onRoomCreated(context, newRoom),
      ),
    );
  }

  void createNewCommunity(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => CreateCommunityBottomSheet(
        onCommunityCreated: (newCommunity) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('–°–æ–æ–±—â–µ—Å—Ç–≤–æ "${newCommunity.name}" —Å–æ–∑–¥–∞–Ω–æ! üéâ'),
              backgroundColor: Colors.green,
              duration: const Duration(seconds: 3),
            ),
          );
        },
      ),
    );
  }

  void openCommunityDetail({
    required BuildContext context,
    required Community community,
    required int selectedTab,
  }) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => CommunityDetailPage(
          community: community,
          initialTab: selectedTab,
        ),
      ),
    );
  }

  void _onRoomCreated(BuildContext context, Room newRoom) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–ö–æ–º–Ω–∞—Ç–∞ "${newRoom.title}" —Å–æ–∑–¥–∞–Ω–∞! üéâ'),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        duration: const Duration(seconds: 4),
        action: SnackBarAction(
          label: '–û—Ç–∫—Ä—ã—Ç—å',
          textColor: Colors.white,
          onPressed: () {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
            final userProvider = context.read<UserProvider>();
            openChatPage(
              context: context,
              room: newRoom,
              userName: userProvider.userName,
            );
          },
        ),
      ),
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
    _refreshRooms(context);
  }

  void showAdvancedFilters(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => AdvancedFiltersBottomSheet(
        onFiltersApplied: () {
          if (context.mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text('–§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã'),
                duration: const Duration(seconds: 2),
              ),
            );
          }
        },
      ),
    );
  }

  void showSortDialog(BuildContext context) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => SortDialog(
        currentSortBy: context.read<RoomProvider>().sortBy,
        onSortChanged: (sortBy) {
          final roomProvider = context.read<RoomProvider>();
          roomProvider.setSortBy(sortBy);

          if (context.mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ${sortBy.title}'),
                duration: const Duration(seconds: 2),
              ),
            );
          }
        },
      ),
    );
  }

  void showQuickActionsMenu(BuildContext context) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => QuickActionsDialog(
        onCreateRoom: () => createNewRoom(context),
        onShowFilters: () => showAdvancedFilters(context),
        onShowSort: () => showSortDialog(context),
        onShowStats: () => showStatsDialog(context),
        onShowNotifications: () => showNotificationsDialog(context),
        onRefreshRooms: () => _refreshRooms(context),
      ),
    );
  }

  void showNotificationsDialog(BuildContext context) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => const NotificationsDialog(),
    );
  }

  void showStatsDialog(BuildContext context) {
    final roomProvider = context.read<RoomProvider>();
    final stats = roomProvider.getRoomStats();

    showDialog(
      context: context,
      builder: (context) => RoomStatsDialog(stats: stats),
    );
  }

  void showRoomQuickActions(BuildContext context, Room room) {
    final userProvider = context.read<UserProvider>();

    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => RoomQuickActionsDialog(
        room: room,
        userId: userProvider.userId,
        onShowInfo: () => _dialogs.showRoomPreview(context, room),
        onCopyLink: () => _copyRoomLink(context, room),
        onEditRoom: () => _editRoom(context, room),
        onPinRoom: () => _pinRoom(context, room),
        onSetReminder: () => _setRoomReminder(context, room),
        onShareRoom: () => _shareRoom(context, room),
        onShowParticipants: () => _showRoomParticipants(context, room),
        onReportRoom: () => _reportRoom(context, room),
      ),
    );
  }

  Future<void> _refreshRooms(BuildContext context) async {
    final roomProvider = context.read<RoomProvider>();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç...'),
        duration: Duration(seconds: 2),
      ),
    );

    await roomProvider.loadRooms();

    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û–±–Ω–æ–≤–ª–µ–Ω–æ ${roomProvider.filteredRooms.length} –∫–æ–º–Ω–∞—Ç'),
          backgroundColor: Colors.green,
          duration: const Duration(seconds: 2),
        ),
      );
    }
  }

  void _copyRoomLink(BuildContext context, Room room) {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    // Clipboard.setData(ClipboardData(text: 'room-link-${room.id}'));

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–°—Å—ã–ª–∫–∞ –Ω–∞ "${room.title}" —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞'),
        duration: const Duration(seconds: 2),
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _editRoom(BuildContext context, Room room) {
    final userProvider = context.read<UserProvider>();

    if (room.canEdit(userProvider.userId)) {
      _dialogs.showEditRoomDialog(context, room);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  void _pinRoom(BuildContext context, Room room) {
    final roomProvider = context.read<RoomProvider>();
    final userProvider = context.read<UserProvider>();

    if (room.canPin(userProvider.userId)) {
      roomProvider.togglePinRoom(room.id);

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(room.isPinned
              ? '–ö–æ–º–Ω–∞—Ç–∞ "${room.title}" –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞'
              : '–ö–æ–º–Ω–∞—Ç–∞ "${room.title}" –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∞'),
          backgroundColor: room.isPinned ? Colors.green : Colors.blue,
        ),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  void _setRoomReminder(BuildContext context, Room room) {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è "${room.title}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'),
        duration: const Duration(seconds: 2),
      ),
    );
  }

  void _shareRoom(BuildContext context, Room room) {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —à–∞—Ä–∏–Ω–≥–∞
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è "${room.title}"'),
        duration: const Duration(seconds: 2),
      ),
    );
  }

  void _showRoomParticipants(BuildContext context, Room room) {
    _dialogs.showRoomParticipantsDialog(context, room);
  }

  void _reportRoom(BuildContext context, Room room) {
    _dialogs.showReportRoomDialog(context, room);
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã
  bool canAccessRoom(Room room, String userId) {
    return room.isActive &&
        !room.isExpired &&
        !room.isFull &&
        room.hasAccess(userId) &&
        !room.requiresPassword;
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã
  String getRoomStatus(Room room) {
    if (!room.isActive) return '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
    if (room.isExpired) return '–ó–∞–≤–µ—Ä—à–µ–Ω–∞';
    if (room.isFull) return '–ó–∞–ø–æ–ª–Ω–µ–Ω–∞';
    if (room.isScheduled) return '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞';
    return '–ê–∫—Ç–∏–≤–Ω–∞';
  }
}