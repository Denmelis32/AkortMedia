// lib/providers/news_provider.dart
import 'dart:ui';
import 'package:flutter/foundation.dart';
import '../../../services/api_service.dart';
import '../services/storage_service.dart';

class NewsProvider with ChangeNotifier {
  List<dynamic> _news = [];
  bool _isLoading = true;
  String? _errorMessage;

  List<dynamic> get news => _news;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;

  void setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void setError(String? message) {
    _errorMessage = message;
    notifyListeners();
  }

  Future<void> loadNews() async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ API
      final apiNews = await ApiService.getNews();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ª–∞–π–∫–∞—Ö –∏ –∑–∞–∫–ª–∞–¥–∫–∞—Ö
      final localLikes = await StorageService.loadLikes();
      final localBookmarks = await StorageService.loadBookmarks();

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å API —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
      _news = apiNews.map((newsItem) {
        final newsId = newsItem['id'].toString();
        return {
          ...newsItem,
          'isLiked': localLikes.contains(newsId),
          'isBookmarked': localBookmarks.contains(newsId),
          'hashtags': newsItem['hashtags'] ?? [],
          'user_tags': newsItem['user_tags'] ?? {},
          'comments': newsItem['comments'] ?? [],
          'likes': newsItem['likes'] ?? 0,
        };
      }).toList();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      await StorageService.saveNews(_news);
    } catch (e) {
      print('API Error: $e');
      _errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö';

      // Fallback: –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
      try {
        _news = await StorageService.loadNews();
        if (_news.isEmpty) {
          _news = _getMockNews();
        }
      } catch (cacheError) {
        print('Cache Error: $cacheError');
        _news = _getMockNews();
      }
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  List<dynamic> _getMockNews() {
    return [
      {
        "id": "1",
        "title": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏ –≤—ã–∏–≥—Ä–∞–ª –õ–∏–≥—É –ß–µ–º–ø–∏–æ–Ω–æ–≤",
        "description": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏ –≤ –¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ–º –º–∞—Ç—á–µ –æ–±—ã–≥—Ä–∞–ª –ò–Ω—Ç–µ—Ä —Å–æ —Å—á–µ—Ç–æ–º 1:0",
        "image": "‚öΩ",
        "likes": 45,
        "author_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "created_at": "2025-09-09T16:33:18.417Z",
        "comments": [],
        "hashtags": ["#—Ñ—É—Ç–±–æ–ª", "#–ª–∏–≥–∞—á–µ–º–ø–∏–æ–Ω–æ–≤"],
        "user_tags": {"tag1": "–§–∞–Ω–∞—Ç –ú–∞–Ω—á–µ—Å—Ç–µ—Ä–∞"},
        "isLiked": false,
        "isBookmarked": false,
      },
      {
        "id": "2",
        "title": "–ù–æ–≤—ã–π —Å–µ–∑–æ–Ω Formula 1",
        "description": "–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞ Formula 1 –æ–±–µ—â–∞–µ—Ç –±—ã—Ç—å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏",
        "image": "üèéÔ∏è",
        "likes": 23,
        "author_name": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å",
        "created_at": "2025-09-08T10:15:30.123Z",
        "comments": [],
        "hashtags": ["#formula1", "#–∞–≤—Ç–æ—Å–ø–æ—Ä—Ç"],
        "user_tags": {"tag1": "–ë–æ–ª–µ–ª—å—â–∏–∫"},
        "isLiked": false,
        "isBookmarked": false,
      }
    ];
  }

  void addNews(Map<String, dynamic> newsItem) {
    final completeNewsItem = {
      ...newsItem,
      'hashtags': newsItem['hashtags'] ?? [],
      'user_tags': newsItem['user_tags'] ?? {"tag1": "–ù–æ–≤—ã–π —Ç–µ–≥"},
      'likes': newsItem['likes'] ?? 0,
      'comments': newsItem['comments'] ?? [],
      'isLiked': false,
      'isBookmarked': false,
      'created_at': newsItem['created_at'] ?? DateTime.now().toIso8601String(),
    };

    _news.insert(0, completeNewsItem);
    notifyListeners();
    StorageService.saveNews(_news);
  }

  void updateNews(int index, Map<String, dynamic> updatedNews) {
    if (index >= 0 && index < _news.length) {
      final originalNews = _news[index] as Map<String, dynamic>;
      final preservedFields = {
        'id': originalNews['id'],
        'author_name': originalNews['author_name'],
        'created_at': originalNews['created_at'],
        'likes': originalNews['likes'],
        'comments': originalNews['comments'],
        'isLiked': originalNews['isLiked'],
        'isBookmarked': originalNews['isBookmarked'],
      };

      _news[index] = {
        ...preservedFields,
        ...updatedNews,
        'hashtags': updatedNews['hashtags'] ?? originalNews['hashtags'],
        'user_tags': updatedNews['user_tags'] ?? originalNews['user_tags'],
      };

      notifyListeners();
      StorageService.saveNews(_news);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∞–π–∫–∞
  void updateNewsLikeStatus(int index, bool isLiked, int newLikesCount) {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;
      final newsId = newsItem['id'].toString();

      _news[index] = {
        ...newsItem,
        'isLiked': isLiked,
        'likes': newLikesCount,
      };

      notifyListeners();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      if (isLiked) {
        StorageService.addLike(newsId);
      } else {
        StorageService.removeLike(newsId);
      }

      StorageService.saveNews(_news);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–ª–∞–¥–∫–∏
  void updateNewsBookmarkStatus(int index, bool isBookmarked) {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;
      final newsId = newsItem['id'].toString();

      _news[index] = {
        ...newsItem,
        'isBookmarked': isBookmarked,
      };

      notifyListeners();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      if (isBookmarked) {
        StorageService.addBookmark(newsId);
      } else {
        StorageService.removeBookmark(newsId);
      }

      StorageService.saveNews(_news);
    }
  }

  void addCommentToNews(int index, Map<String, dynamic> comment) {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;

      if (newsItem['comments'] == null) {
        newsItem['comments'] = [];
      }

      newsItem['comments'].insert(0, comment);
      notifyListeners();
      StorageService.saveNews(_news);
    }
  }

  void removeCommentFromNews(int index, String commentId) {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;

      if (newsItem['comments'] != null) {
        newsItem['comments'].removeWhere((comment) => comment['id'] == commentId);
        notifyListeners();
        StorageService.saveNews(_news);
      }
    }
  }

  void removeNews(int index) async {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;
      final newsId = newsItem['id'].toString();

      try {
        await ApiService.deleteNews(newsId);
      } catch (e) {
        print('API delete error: $e');
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
      await StorageService.removeLike(newsId);
      await StorageService.removeBookmark(newsId);

      _news.removeAt(index);
      notifyListeners();
      StorageService.saveNews(_news);
    }
  }
  Future<void> loadUserTags() async {
    try {
      final loadedTags = await StorageService.loadUserTags();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö
      for (var i = 0; i < _news.length; i++) {
        final newsItem = _news[i] as Map<String, dynamic>;
        final newsId = newsItem['id'].toString();

        if (loadedTags.containsKey(newsId)) {
          _news[i] = {
            ...newsItem,
            'user_tags': loadedTags[newsId],
          };
        }
      }

      notifyListeners();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤: $e');
    }
  }






  void updateNewsHashtags(int index, List<String> hashtags) {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;
      _news[index] = {
        ...newsItem,
        'hashtags': hashtags,
      };
      notifyListeners();
      StorageService.saveNews(_news);
    }
  }

  void updateNewsUserTag(int index, String tagId, String newTagName, {Color? color}) {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;
      final newsId = newsItem['id'].toString();

      final updatedUserTags = {
        ...newsItem['user_tags'] ?? {},
        tagId: newTagName,
      };

      final updatedNews = {
        ...newsItem,
        'user_tags': updatedUserTags,
      };

      if (color != null) {
        updatedNews['tag_color'] = color.value;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        StorageService.updateUserTag(newsId, tagId, newTagName, color: color.value);
      }

      _news[index] = updatedNews;
      notifyListeners();
      StorageService.saveNews(_news);
    }
  }

  // –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
  List<dynamic> searchNews(String query) {
    if (query.isEmpty) return _news;

    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      final title = newsItem['title']?.toString().toLowerCase() ?? '';
      final description = newsItem['description']?.toString().toLowerCase() ?? '';
      final hashtags = (newsItem['hashtags'] is List
          ? (newsItem['hashtags'] as List).join(' ').toLowerCase()
          : '');
      final author = newsItem['author_name']?.toString().toLowerCase() ?? '';

      return title.contains(query.toLowerCase()) ||
          description.contains(query.toLowerCase()) ||
          hashtags.contains(query.toLowerCase()) ||
          author.contains(query.toLowerCase());
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  List<dynamic> getBookmarkedNews() {
    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      return newsItem['isBookmarked'] == true;
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (–ª–∞–π–∫–æ–≤ > 5)
  List<dynamic> getPopularNews() {
    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      return (newsItem['likes'] ?? 0) > 5;
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  List<dynamic> getMyNews(String userName) {
    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      return newsItem['author_name'] == userName;
    }).toList();
  }


  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> clearAllData() async {
    _news = [];
    _isLoading = false;
    _errorMessage = null;
    await StorageService.clearAllData();
    notifyListeners();
  }
}