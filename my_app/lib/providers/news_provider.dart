// lib/providers/news_provider.dart
import 'dart:io';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:my_app/providers/user_tags_provider.dart';
import 'package:provider/provider.dart';
import '../../../services/api_service.dart';
import '../pages/news_page/mock_news_data.dart';
import '../services/interaction_manager.dart';
import '../services/repost_manager.dart'; // –ù–û–í–´–ô –ò–ú–ü–û–†–¢
import '../services/storage_service.dart';

// –ú–æ–¥–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserProfile {
  final String id;
  final String userName;
  final String userEmail;
  String? profileImageUrl;
  File? profileImageFile;
  String? coverImageUrl;
  File? coverImageFile;
  DateTime? registrationDate;
  Map<String, int> stats;

  UserProfile({
    required this.id,
    required this.userName,
    required this.userEmail,
    this.profileImageUrl,
    this.profileImageFile,
    this.coverImageUrl,
    this.coverImageFile,
    this.registrationDate,
    this.stats = const {},
  });

  UserProfile copyWith({
    String? userName,
    String? userEmail,
    String? profileImageUrl,
    File? profileImageFile,
    String? coverImageUrl,
    File? coverImageFile,
    Map<String, int>? stats,
  }) {
    return UserProfile(
      id: id,
      userName: userName ?? this.userName,
      userEmail: userEmail ?? this.userEmail,
      profileImageUrl: profileImageUrl ?? this.profileImageUrl,
      profileImageFile: profileImageFile ?? this.profileImageFile,
      coverImageUrl: coverImageUrl ?? this.coverImageUrl,
      coverImageFile: coverImageFile ?? this.coverImageFile,
      registrationDate: registrationDate,
      stats: stats ?? this.stats,
    );
  }
}

class NewsProvider with ChangeNotifier {
  List<dynamic> _news = [];
  bool _isLoading = true;
  String? _errorMessage;
  bool _isDisposed = false;
  bool get mounted => !_isDisposed;

  // –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –ü–û–î–î–ï–†–ñ–ö–ò MULTIPLE USERS
  final Map<String, UserProfile> _userProfiles = {};
  String? _currentUserId;

  // –ú–ï–ù–ï–î–ñ–ï–†–´
  final RepostManager _repostManager = RepostManager();
  final InteractionManager _interactionManager = InteractionManager();

  List<dynamic> get news => _news;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;
  bool get isDisposed => _isDisposed;

  // –ì–ï–¢–¢–ï–†–´ –î–õ–Ø –¢–ï–ö–£–©–ï–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
  String? get profileImageUrl => _getCurrentUser()?.profileImageUrl;
  File? get profileImageFile => _getCurrentUser()?.profileImageFile;
  String? get coverImageUrl => _getCurrentUser()?.coverImageUrl;
  File? get coverImageFile => _getCurrentUser()?.coverImageFile;

  NewsProvider() {
    _initializeManagers();
    print('‚úÖ NewsProvider initialized with InteractionManager & RepostManager');
  }

  // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–û–í
  void _initializeManagers() {
    _initializeInteractionManager();
    _initializeRepostManager();
  }

  void _initializeInteractionManager() {
    _interactionManager.setCallbacks(
      onLike: (postId, isLiked, likesCount) {
        final index = findNewsIndexById(postId);
        if (index != -1) {
          updateNewsLikeStatus(index, isLiked, likesCount);
        }
      },
      onBookmark: (postId, isBookmarked) {
        final index = findNewsIndexById(postId);
        if (index != -1) {
          updateNewsBookmarkStatus(index, isBookmarked);
        }
      },
      onRepost: (postId, isReposted, repostsCount, userId, userName) {
        print('üîÑ NewsProvider: Repost callback received');
        print('   postId: $postId, isReposted: $isReposted');
        print('   userId: $userId, userName: $userName');

        if (isReposted) {
          // –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ—Å—Ç —á–µ—Ä–µ–∑ RepostManager
          final index = findNewsIndexById(postId);
          if (index != -1) {
            _repostManager.createRepost(
              newsProvider: this,
              originalIndex: index,
              currentUserId: userId,
              currentUserName: userName,
            );
          }
        } else {
          // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–ø–æ—Å—Ç —á–µ—Ä–µ–∑ RepostManager - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–´–ó–û–í
          final repostId = _repostManager.getRepostIdForOriginal(this, postId, userId);
          if (repostId != null) {
            _repostManager.cancelRepost(
              newsProvider: this,
              repostId: repostId,
              currentUserId: userId,
            );
          }
        }
      },
      onComment: (postId, comment) {
        addCommentToNews(postId, comment);
      },
      onCommentRemoval: (postId, commentId) {
        final index = findNewsIndexById(postId);
        if (index != -1) {
          removeCommentFromNews(index, commentId);
        }
      },
    );
  }

  void _initializeRepostManager() {
    _repostManager.initialize(
      onRepostStateChanged: () {
        _safeNotifyListeners();
      },
      onRepostUpdated: (postId, isReposted, repostsCount) {
        final index = findNewsIndexById(postId);
        if (index != -1) {
          updateNewsRepostStatus(index, isReposted, repostsCount);
        }
      },
    );
  }

  // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
  void setCurrentUser(String userId, String userName, String userEmail) {
    _currentUserId = userId;

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!_userProfiles.containsKey(userId)) {
      _userProfiles[userId] = UserProfile(
        id: userId,
        userName: userName,
        userEmail: userEmail,
        registrationDate: DateTime.now(),
        stats: {},
      );

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      _loadUserProfileData(userId);
    }

    _safeNotifyListeners();
  }

  UserProfile? _getCurrentUser() {
    if (_currentUserId == null) return null;
    return _userProfiles[_currentUserId!];
  }

  UserProfile? getUserProfile(String userId) {
    return _userProfiles[userId];
  }

  String? getCurrentUserId() {
    return _currentUserId;
  }

  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–†–û–§–ò–õ–ï–ú
  Future<void> updateProfileImageUrl(String? url) async {
    if (_isDisposed || _currentUserId == null) return;

    final user = _userProfiles[_currentUserId!];
    if (user == null) return;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if (url != null && url.isNotEmpty) {
      try {
        final uri = Uri.parse(url);
        if (!uri.hasScheme) {
          url = 'https://$url';
        }

        final response = await http.head(Uri.parse(url));
        if (response.statusCode != 200) {
          print('‚ùå Image URL not accessible: ${response.statusCode}');
          return;
        }
      } catch (e) {
        print('‚ùå Invalid image URL: $e');
        return;
      }
    }

    _userProfiles[_currentUserId!] = user.copyWith(
      profileImageUrl: url,
      profileImageFile: null,
    );

    _safeNotifyListeners();
    await StorageService.saveProfileImageUrl(_currentUserId!, url);
    print('‚úÖ Profile image URL updated for user $_currentUserId: $url');
  }

  Future<void> updateProfileImageFile(File? file) async {
    if (_isDisposed || _currentUserId == null) return;

    final user = _userProfiles[_currentUserId!];
    if (user == null) return;

    _userProfiles[_currentUserId!] = user.copyWith(
      profileImageFile: file,
      profileImageUrl: null,
    );

    if (file != null) {
      final exists = await file.exists();
      if (exists) {
        await StorageService.saveProfileImageFilePath(_currentUserId!, file.path);
        print('‚úÖ Profile image file updated for user $_currentUserId: ${file.path}');
      } else {
        print('‚ùå File does not exist: ${file.path}');
        _userProfiles[_currentUserId!] = user.copyWith(profileImageFile: null);
      }
    } else {
      await StorageService.saveProfileImageFilePath(_currentUserId!, null);
      print('‚úÖ Profile image file removed for user $_currentUserId');
    }

    _safeNotifyListeners();
  }

  // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–õ–û–ñ–ö–ò
  Future<void> updateCoverImageUrl(String? url) async {
    if (_isDisposed || _currentUserId == null) return;

    final user = _userProfiles[_currentUserId!];
    if (user == null) return;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if (url != null && url.isNotEmpty) {
      try {
        final uri = Uri.parse(url);
        if (!uri.hasScheme) {
          url = 'https://$url';
        }
      } catch (e) {
        print('‚ùå Invalid cover URL: $e');
        return;
      }
    }

    _userProfiles[_currentUserId!] = user.copyWith(coverImageUrl: url);
    _safeNotifyListeners();
    await StorageService.saveCoverImageUrl(_currentUserId!, url);
    print('‚úÖ Cover image URL updated for user $_currentUserId: $url');
  }

  Future<void> updateCoverImageFile(File? file) async {
    if (_isDisposed || _currentUserId == null) return;

    final user = _userProfiles[_currentUserId!];
    if (user == null) return;

    _userProfiles[_currentUserId!] = user.copyWith(coverImageFile: file);

    if (file != null) {
      final exists = await file.exists();
      if (exists) {
        await StorageService.saveCoverImageFilePath(_currentUserId!, file.path);
        print('‚úÖ Cover image file updated for user $_currentUserId: ${file.path}');
      } else {
        print('‚ùå Cover file does not exist: ${file.path}');
        _userProfiles[_currentUserId!] = user.copyWith(coverImageFile: null);
      }
    } else {
      await StorageService.saveCoverImageFilePath(_currentUserId!, null);
      print('‚úÖ Cover image file removed for user $_currentUserId');
    }

    _safeNotifyListeners();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _loadUserProfileData(String userId) async {
    if (_isDisposed) return;

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º URL –∞–≤–∞—Ç–∞—Ä–∫–∏
      final savedUrl = await StorageService.loadProfileImageUrl(userId);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∫–∏
      final savedFilePath = await StorageService.loadProfileImageFilePath(userId);
      File? profileFile;
      if (savedFilePath != null && savedFilePath.isNotEmpty) {
        final file = File(savedFilePath);
        if (await file.exists()) {
          profileFile = file;
        } else {
          await StorageService.saveProfileImageFilePath(userId, null);
        }
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É
      final savedCoverUrl = await StorageService.loadCoverImageUrl(userId);
      final savedCoverPath = await StorageService.loadCoverImageFilePath(userId);
      File? coverFile;
      if (savedCoverPath != null && savedCoverPath.isNotEmpty) {
        final file = File(savedCoverPath);
        if (await file.exists()) {
          coverFile = file;
        } else {
          await StorageService.saveCoverImageFilePath(userId, null);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      if (_userProfiles.containsKey(userId)) {
        _userProfiles[userId] = _userProfiles[userId]!.copyWith(
          profileImageUrl: savedUrl,
          profileImageFile: profileFile,
          coverImageUrl: savedCoverUrl,
          coverImageFile: coverFile,
        );
      }

      print('‚úÖ Profile data loaded for user $userId');
      _safeNotifyListeners();
    } catch (e) {
      print('‚ùå Error loading profile data for user $userId: $e');
    }
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
  void _safeNotifyListeners() {
    if (!_isDisposed && hasListeners) {
      notifyListeners();
    }
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
  void _safeOperation(Function() operation) {
    if (_isDisposed) {
      print('‚ö†Ô∏è NewsProvider is disposed, skipping operation');
      return;
    }
    operation();
  }

  void setLoading(bool loading) {
    _safeOperation(() {
      _isLoading = loading;
      _safeNotifyListeners();
    });
  }

  void setError(String? message) {
    _safeOperation(() {
      _errorMessage = message;
      _safeNotifyListeners();
    });
  }

  void clearData() {
    _safeOperation(() {
      _safeNotifyListeners();
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> loadProfileData() async {
    if (_isDisposed || _currentUserId == null) return;

    try {
      await _loadUserProfileData(_currentUserId!);
      print('‚úÖ Profile data loaded for current user: $_currentUserId');
    } catch (e) {
      print('‚ùå Error loading profile data: $e');
    }
  }

  // –ú–ï–¢–û–î –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –ù–û–í–û–°–¢–ï–ô –í –•–†–ê–ù–ò–õ–ò–©–ï
  Future<void> _saveNewsToStorage() async {
    if (_isDisposed) return;

    try {
      print('üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...');
      await StorageService.saveNews(_news);
      print('‚úÖ –ù–æ–≤–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: $e');
    }
  }

  UserTagsProvider? _getUserTagsProvider(BuildContext context) {
    try {
      return Provider.of<UserTagsProvider>(context, listen: false);
    } catch (e) {
      print('‚ö†Ô∏è UserTagsProvider not available: $e');
      return null;
    }
  }

  // –ú–ï–¢–û–î–´ –î–õ–Ø –†–ï–ü–û–°–¢–ê - –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –° REPOST MANAGER
  void updateNewsRepostStatus(int index, bool isReposted, int repostsCount) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        _news[index]['isReposted'] = isReposted;
        _news[index]['reposts'] = repostsCount;
        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –†–ï–ü–û–°–¢–ê –ß–ï–†–ï–ó REPOST MANAGER
  Future<void> repostNews(int index, String currentUserId, String currentUserName) async {
    await _repostManager.createRepost(
      newsProvider: this,
      originalIndex: index,
      currentUserId: currentUserId,
      currentUserName: currentUserName,
    );
  }

  Future<void> cancelRepost(String repostId, String currentUserId) async {
    await _repostManager.cancelRepost(
      newsProvider: this,
      repostId: repostId,
      currentUserId: currentUserId,
    );
  }

  void toggleRepost(int index, String currentUserId, String currentUserName) {
    _repostManager.toggleRepost(
      newsProvider: this,
      originalIndex: index,
      currentUserId: currentUserId,
      currentUserName: currentUserName,
    );
  }

  List<dynamic> getUserReposts(String userId) {
    return _repostManager.getUserReposts(this, userId);
  }

  bool isNewsRepostedByUser(String newsId, String userId) {
    return _repostManager.isNewsRepostedByUser(this, newsId, userId);
  }

  String? getRepostIdForOriginal(String originalNewsId, String userId) {
    return _repostManager.getRepostIdForOriginal(this, originalNewsId, userId);
  }

  // –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–û–í
  void updateNewsLikeStatus(int index, bool isLiked, int likesCount) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;
        final newsId = newsItem['id'].toString();

        _news[index] = {
          ...newsItem,
          'isLiked': isLiked,
          'likes': likesCount,
        };

        _safeNotifyListeners();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if (isLiked) {
          StorageService.addLike(newsId);
        } else {
          StorageService.removeLike(newsId);
        }

        _saveNewsToStorage();
      }
    });
  }

  void updateNewsBookmarkStatus(int index, bool isBookmarked) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;
        final newsId = newsItem['id'].toString();

        _news[index] = {
          ...newsItem,
          'isBookmarked': isBookmarked,
        };

        _safeNotifyListeners();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if (isBookmarked) {
          StorageService.addBookmark(newsId);
        } else {
          StorageService.removeBookmark(newsId);
        }

        _saveNewsToStorage();
      }
    });
  }

  void updateNewsFollowStatus(int index, bool isFollowing) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;
        final newsId = newsItem['id'].toString();

        _news[index] = {
          ...newsItem,
          'isFollowing': isFollowing,
        };

        _safeNotifyListeners();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if (isFollowing) {
          if (_currentUserId != null) {
            StorageService.addFollow(_currentUserId!, newsId);
          }
        } else {
          if (_currentUserId != null) {
            StorageService.removeFollow(_currentUserId!, newsId);
          }
        }

        _saveNewsToStorage();
      }
    });
  }

  Future<void> loadNews() async {
    if (_isDisposed) return;

    _safeOperation(() {
      _isLoading = true;
      _errorMessage = null;
      _safeNotifyListeners();
    });

    try {
      // –°–ù–ê–ß–ê–õ–ê –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      final cachedNews = await StorageService.loadNews();
      if (cachedNews.isNotEmpty) {
        _safeOperation(() {
          _news = cachedNews;
          _safeNotifyListeners();
        });
        print('üìÇ Loaded ${_news.length} news from cache');
      }

      // –ü–û–¢–û–ú –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ API (–≤ —Ñ–æ–Ω–µ)
      try {
        final apiNews = await ApiService.getNews();
        if (apiNews.isNotEmpty) {
          final localLikes = await StorageService.loadLikes();
          final localBookmarks = await StorageService.loadBookmarks();
          final userTags = await StorageService.loadUserTags();

          final updatedNews = await Future.wait(apiNews.map((newsItem) async {
            final newsId = newsItem['id'].toString();

            // –ü–†–û–í–ï–†–Ø–ï–ú –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            if (_containsNewsWithId(newsId)) {
              print('‚ö†Ô∏è Skipping duplicate news from API: $newsId');
              return _news.firstWhere((item) => item['id'].toString() == newsId);
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ user_tags
            final Map<String, String> itemUserTags;
            if (userTags.containsKey(newsId)) {
              final newsTags = userTags[newsId]!;
              if (newsTags['tags'] is Map) {
                final tagsMap = newsTags['tags'] as Map;
                itemUserTags = tagsMap.map((key, value) =>
                    MapEntry(key.toString(), value.toString())
                );
              } else {
                itemUserTags = {'tag1': '–§–∞–Ω–∞—Ç –ú–∞–Ω—á–µ—Å—Ç–µ—Ä–∞'};
              }
            } else {
              itemUserTags = newsItem['user_tags'] is Map
                  ? (newsItem['user_tags'] as Map).map((key, value) =>
                  MapEntry(key.toString(), value.toString())
              )
                  : {'tag1': '–§–∞–Ω–∞—Ç –ú–∞–Ω—á–µ—Å—Ç–µ—Ä–∞'};
            }

            final tagColor = await _getTagColor(newsId, itemUserTags);

            // –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä –∞–≤—Ç–æ—Ä–∞ –∏–∑ API –¥–∞–Ω–Ω—ã—Ö
            final authorName = newsItem['author_name']?.toString() ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            final authorAvatarFromApi = newsItem['author_avatar']?.toString() ?? '';

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É API, –∑–∞—Ç–µ–º fallback
            String finalAuthorAvatar;
            if (authorAvatarFromApi.isNotEmpty) {
              finalAuthorAvatar = authorAvatarFromApi;
              print('‚úÖ Using author avatar from API: $authorAvatarFromApi for $authorName');
            } else {
              finalAuthorAvatar = _getFallbackAvatarUrl(authorName);
              print('‚ÑπÔ∏è Using fallback avatar for $authorName: $finalAuthorAvatar');
            }

            // –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            final isRepost = newsItem['is_repost'] == true;
            final repostComment = newsItem['repost_comment']?.toString() ?? '';
            List<dynamic> finalComments;

            if (isRepost && repostComment.isNotEmpty) {
              // –î–õ–Ø –†–ï–ü–û–°–¢–û–í –° –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–ú: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
              finalComments = [];
              print('‚úÖ [LOAD NEWS] Ensuring empty comments for repost with comment: $newsId');
            } else {
              finalComments = newsItem['comments'] ?? [];
            }

            return {
              ...newsItem,
              'isLiked': localLikes.contains(newsId),
              'isBookmarked': localBookmarks.contains(newsId),
              'hashtags': _parseHashtags(newsItem['hashtags']),
              'user_tags': itemUserTags,
              'comments': finalComments, // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò
              'likes': newsItem['likes'] ?? 0,
              'tag_color': tagColor,
              // –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä –∞–≤—Ç–æ—Ä–∞
              'author_avatar': finalAuthorAvatar,
            };
          }));

          // –û–ë–ù–û–í–õ–Ø–ï–ú –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          final newItems = updatedNews.where((item) =>
          !_containsNewsWithId(item['id'].toString())).toList();

          if (newItems.isNotEmpty) {
            _safeOperation(() {
              _news.insertAll(0, newItems);
            });
            await _saveNewsToStorage();
            print('üîÑ Updated news from API: ${newItems.length} new items');

            // –õ–æ–≥–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for (final item in newItems.take(3)) {
              final author = item['author_name'] ?? 'Unknown';
              final avatar = item['author_avatar'] ?? 'No avatar';
              print('üë§ New item - Author: $author, Avatar: $avatar');
            }
          } else {
            print('‚ö†Ô∏è No new items from API, keeping cached data');
          }
        } else {
          print('‚ö†Ô∏è API returned empty list, keeping cached data');
        }
      } catch (apiError) {
        print('‚ö†Ô∏è API update failed, using cached data: $apiError');
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      }

    } catch (e) {
      print('‚ùå Both cache and API failed: $e');
      _safeOperation(() {
        _errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö';
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
      if (_news.isEmpty) {
        final mockNews = _getMockNews();
        _safeOperation(() {
          _news = mockNews;
        });
        await _saveNewsToStorage();
        print('üîÑ Using mock data: ${_news.length} items');
      }
    } finally {
      _safeOperation(() {
        _isLoading = false;
        _safeNotifyListeners();
      });

      // –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ä–µ–ø–æ—Å—Ç–æ–≤
      await _cleanupRepostCommentDuplicates();
      initializeInteractions();
      fixRepostCommentsDuplication();
    }
  }

// –ù–û–í–´–ô –ú–ï–¢–û–î: –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ä–µ–ø–æ—Å—Ç–æ–≤
  Future<void> _cleanupRepostCommentDuplicates() async {
    try {
      int cleanedCount = 0;

      for (int i = 0; i < _news.length; i++) {
        final newsItem = Map<String, dynamic>.from(_news[i]);
        final isRepost = newsItem['is_repost'] == true;
        final repostComment = newsItem['repost_comment']?.toString() ?? '';
        final comments = List<dynamic>.from(newsItem['comments'] ?? []);

        // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–ø–æ—Å—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –ò –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - –æ—á–∏—â–∞–µ–º
        if (isRepost && repostComment.isNotEmpty && comments.isNotEmpty) {
          print('‚ùå [CLEANUP] Found duplication in repost: ${newsItem['id']}');
          print('   Repost comment: "$repostComment"');
          print('   Regular comments count: ${comments.length}');

          final cleanItem = {
            ...newsItem,
            'comments': [], // –û—á–∏—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
          };

          _news[i] = cleanItem;
          cleanedCount++;
          print('‚úÖ [CLEANUP] Cleaned repost: ${newsItem['id']}');

          // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º InteractionManager
          final postId = newsItem['id'].toString();
          _interactionManager.updateComments(postId, []);
        }
      }

      if (cleanedCount > 0) {
        await _saveNewsToStorage();
        _safeNotifyListeners();
        print('üéâ [CLEANUP] Cleaned $cleanedCount reposts with comment duplication');
      } else {
        print('‚úÖ [CLEANUP] No repost duplicates found');
      }
    } catch (e) {
      print('‚ùå [CLEANUP] Error cleaning repost duplicates: $e');
    }
  }

  Future<void> ensureDataPersistence() async {
    if (_isDisposed) return;

    try {
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (_currentUserId != null) {
        await _loadUserProfileData(_currentUserId!);
      }

      // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
      final cachedNews = await StorageService.loadNews();
      if (cachedNews.isEmpty) {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ mock –¥–∞–Ω–Ω—ã–µ
        final mockNews = MockNewsData.getMockNews();
        await _saveNewsToStorage();
        _safeOperation(() {
          _news = mockNews;
          _safeNotifyListeners();
        });

        // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        initializeInteractions();

        print('‚úÖ Initial data ensured with ${mockNews.length} items');
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        _safeOperation(() {
          _news = cachedNews;
          _safeNotifyListeners();
        });

        // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        initializeInteractions();

        print('üìÇ Using cached data: ${_news.length} items');
      }
    } catch (e) {
      print('‚ùå Error ensuring data persistence: $e');
      // –°–æ–∑–¥–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      final mockNews = MockNewsData.getMockNews();
      _safeOperation(() {
        _news = mockNews;
      });
      await _saveNewsToStorage();

      // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
      initializeInteractions();

      _safeNotifyListeners();
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤
  List<String> _parseHashtags(dynamic hashtags) {
    if (_isDisposed) return [];

    print('üîç NewsProvider _parseHashtags INPUT: $hashtags (type: ${hashtags.runtimeType})');

    if (hashtags is List) {
      final result = List<String>.from(hashtags).map((tag) {
        print('   üéØ NewsProvider processing tag: "$tag"');
        // –£–±–∏—Ä–∞–µ–º —Ä–µ—à–µ—Ç–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
        var cleanTag = tag.toString().replaceAll(RegExp(r'#'), '').trim();
        cleanTag = cleanTag.replaceAll(RegExp(r'\s+'), '');
        return cleanTag;
      }).where((tag) => tag.isNotEmpty).toList();
      print('üîç NewsProvider _parseHashtags OUTPUT: $result');
      return result;
    }

    if (hashtags is String) {
      final result = hashtags
          .split(RegExp(r'[,\s]+'))
          .map((tag) {
        var cleanTag = tag.replaceAll(RegExp(r'#'), '').trim();
        cleanTag = cleanTag.replaceAll(RegExp(r'\s+'), '');
        return cleanTag;
      })
          .where((tag) => tag.isNotEmpty)
          .toList();
      print('üîç NewsProvider _parseHashtags OUTPUT: $result');
      return result;
    }

    print('üîç NewsProvider _parseHashtags OUTPUT: []');
    return [];
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Future<int>
  Future<int> _getTagColor(String newsId, Map<String, String> userTags) async {
    if (_isDisposed) return Colors.blue.value;

    try {
      final storedColor = await StorageService.getTagColor(newsId);
      if (storedColor != null) return storedColor;
    } catch (e) {
      print('Error getting tag color: $e');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ –Ω–æ–≤–æ—Å—Ç–∏
    return _generateColorFromId(newsId).value;
  }

  Color _generateColorFromId(String id) {
    final colors = [
      Colors.blue,
      Colors.green,
      Colors.orange,
      Colors.purple,
      Colors.red,
      Colors.teal,
      Colors.pink,
      Colors.indigo,
    ];
    final hash = id.hashCode;
    return colors[hash.abs() % colors.length];
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤–º–µ—Å—Ç–æ URL
  String _getFallbackAvatarUrl(String userName) {
    final avatars = [
      'assets/images/ava_news/ava1.png',
      'assets/images/ava_news/ava2.png',
      'assets/images/ava_news/ava3.png',
      'assets/images/ava_news/ava4.png',
      'assets/images/ava_news/ava5.png',
      'assets/images/ava_news/ava6.png',
      'assets/images/ava_news/ava7.png',
      'assets/images/ava_news/ava8.png',
      'assets/images/ava_news/ava9.png',
      'assets/images/ava_news/ava10.png',
      'assets/images/ava_news/ava11.png',
      'assets/images/ava_news/ava12.png',
    ];

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ –∏–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    final index = userName.hashCode.abs() % avatars.length;
    final selectedAvatar = avatars[index];

    print('üé≤ Generated fallback avatar for $userName: $selectedAvatar (index: $index)');
    return selectedAvatar;
  }

  List<dynamic> _getMockNews() {
    return MockNewsData.getMockNews();
  }

  // –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î addNews –í news_provider.dart
  // –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î addNews –í news_provider.dart
  Future<void> addNews(Map<String, dynamic> newsItem, {BuildContext? context}) async {
    if (_isDisposed) return;

    try {
      final newNewsId = newsItem['id']?.toString();

      // –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ï–ü–û–°–¢–ê–•
      final isRepost = newsItem['is_repost'] == true;
      final repostComment = newsItem['repost_comment']?.toString() ?? '';

      print('üîÑ ADDING NEWS TO PROVIDER:');
      print('   ID: $newNewsId');
      print('   Is repost: $isRepost');
      print('   Repost comment: "$repostComment"');
      print('   Repost comment length: ${repostComment.length}');
      print('   Input comments count: ${(newsItem['comments'] ?? []).length}');

      // –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´ - –ë–û–õ–ï–ï –ì–ò–ë–ö–ê–Ø –î–õ–Ø –†–ï–ü–û–°–¢–û–í
      if (newNewsId != null) {
        final exists = _news.any((item) {
          final itemId = item['id']?.toString();
          return itemId == newNewsId;
        });

        if (exists) {
          print('‚ö†Ô∏è News with ID already exists: $newNewsId, skipping...');
          return;
        }
      }

      final isChannelPost = newsItem['is_channel_post'] == true;
      final authorName = newsItem['author_name']?.toString() ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      final channelName = newsItem['channel_name']?.toString() ?? '';

      // –°–û–ó–î–ê–ï–ú –£–ù–ò–ö–ê–õ–¨–ù–´–ô ID –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      final uniqueId = newsItem['id']?.toString() ?? 'news-${DateTime.now().millisecondsSinceEpoch}';

      // –î–õ–Ø –†–ï–ü–û–°–¢–û–í: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Å—Ç–∞
      String authorAvatar;
      if (isRepost) {
        // –î–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä —Ä–µ–ø–æ—Å—Ç–Ω—É–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        authorAvatar = newsItem['author_avatar']?.toString() ?? _getFallbackAvatarUrl(authorName);

        print('üîÑ ADDING REPOST TO PROVIDER:');
        print('   Repost ID: $uniqueId');
        print('   Reposted by: ${newsItem['reposted_by_name']}');
        print('   Original author: ${newsItem['original_author_name']}');
        print('   Original channel: ${newsItem['original_channel_name']}');
        print('   Is original channel: ${newsItem['is_original_channel_post']}');
        print('   Repost comment: "$repostComment"');
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        authorAvatar = newsItem['author_avatar']?.toString() ?? _getFallbackAvatarUrl(authorName);
      }

      // –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ - –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú, —á—Ç–æ –æ–±—ã—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ü–£–°–¢–´–ï
      final List<dynamic> comments;
      if (isRepost && repostComment.isNotEmpty) {
        // –î–õ–Ø –†–ï–ü–û–°–¢–û–í –° –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–ú: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        comments = [];
        print('‚úÖ [ADD NEWS] Forcing empty comments array for repost with comment');
      } else if (isRepost) {
        // –î–õ–Ø –†–ï–ü–û–°–¢–û–í –ë–ï–ó –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø: —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        comments = [];
        print('‚úÖ [ADD NEWS] Using empty comments array for repost without comment');
      } else {
        // –î–õ–Ø –û–ë–´–ß–ù–´–• –ü–û–°–¢–û–í: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments = newsItem['comments'] ?? [];
        print('‚úÖ [ADD NEWS] Using provided comments for regular post: ${comments.length} items');
      }

      // –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è —Ä–µ–ø–æ—Å—Ç –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      final Map<String, dynamic> cleanNewsItem = {
        'id': uniqueId,
        'title': newsItem['title']?.toString() ?? '',
        'description': newsItem['description']?.toString() ?? '',
        'image': newsItem['image']?.toString() ?? '',
        'author_name': authorName,
        'author_avatar': authorAvatar,
        'channel_name': channelName,
        'channel_id': newsItem['channel_id']?.toString() ?? '',
        'created_at': newsItem['created_at']?.toString() ?? DateTime.now().toIso8601String(),
        'likes': newsItem['likes'] ?? 0,
        'comments': comments, // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        'hashtags': _parseHashtags(newsItem['hashtags']),

        // –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Å—Ç–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        'is_repost': isRepost,
        'reposted_by': newsItem['reposted_by']?.toString(),
        'reposted_by_name': newsItem['reposted_by_name']?.toString(),
        'reposted_at': newsItem['reposted_at']?.toString(),
        'original_post_id': newsItem['original_post_id']?.toString(),
        'original_author_name': newsItem['original_author_name']?.toString(),
        'original_author_avatar': newsItem['original_author_avatar']?.toString(),
        'original_channel_name': newsItem['original_channel_name']?.toString(),
        'is_original_channel_post': newsItem['is_original_channel_post'] ?? false,

        // –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–ø–æ—Å—Ç–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        'repost_comment': repostComment, // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

        // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—è
        'user_tags': newsItem['user_tags'] ?? <String, String>{},
        'isLiked': newsItem['isLiked'] ?? false,
        'isBookmarked': newsItem['isBookmarked'] ?? false,
        'isFollowing': newsItem['isFollowing'] ?? false,
        'tag_color': newsItem['tag_color'] ?? _generateColorFromId(uniqueId).value,
        'is_channel_post': isChannelPost,
        'content_type': isChannelPost ? 'channel_post' : (isRepost ? 'repost' : 'regular_post'),
      };

      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø –†–ï–ü–û–°–¢–ê
      if (isRepost && repostComment.isNotEmpty) {
        print('‚úÖ [ADD NEWS] Repost comment successfully saved: "$repostComment"');
        print('   Regular comments count: ${(cleanNewsItem['comments'] as List).length}');

        // –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç—ã–µ
        if (cleanNewsItem['comments'] is List && (cleanNewsItem['comments'] as List).isNotEmpty) {
          print('‚ùå [ADD NEWS] CRITICAL ERROR: Comments array is not empty for repost with comment!');
          print('   Forcing comments to empty array...');
          cleanNewsItem['comments'] = [];
        } else {
          print('‚úÖ [ADD NEWS] Comments array is properly empty for repost with comment');
        }
      } else if (isRepost) {
        print('‚ÑπÔ∏è [ADD NEWS] Repost without comment - comments count: ${(cleanNewsItem['comments'] as List).length}');
      } else {
        print('üìù [ADD NEWS] Regular post - comments count: ${(cleanNewsItem['comments'] as List).length}');
      }

      // –î–û–ë–ê–í–õ–Ø–ï–ú –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      _safeOperation(() {
        _news.insert(0, cleanNewsItem);
        _safeNotifyListeners();
      });

      // –ù–ï–ú–ï–î–õ–ï–ù–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      await _saveNewsToStorage();

      // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏
      _interactionManager.initializePostState(
        postId: uniqueId,
        isLiked: cleanNewsItem['isLiked'],
        isBookmarked: cleanNewsItem['isBookmarked'],
        isReposted: cleanNewsItem['isReposted'] ?? false,
        likesCount: cleanNewsItem['likes'],
        repostsCount: cleanNewsItem['reposts'] ?? 0,
        comments: List<Map<String, dynamic>>.from(cleanNewsItem['comments'] ?? []),
      );

      print('‚úÖ –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ NewsProvider. ID: $uniqueId, –¢–∏–ø: ${isRepost ? '–†–ï–ü–û–°–¢' : '–æ–±—ã—á–Ω—ã–π'}, –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: ${_news.length}');

      // –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø
      if (isRepost) {
        print('üîç [ADD NEWS] FINAL REPOST DATA VERIFICATION:');
        print('   repost_comment: "${cleanNewsItem['repost_comment']}"');
        print('   comments array: ${cleanNewsItem['comments']}');
        print('   comments count: ${(cleanNewsItem['comments'] as List).length}');

        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        if (repostComment.isNotEmpty && (cleanNewsItem['comments'] as List).isNotEmpty) {
          print('‚ùå [ADD NEWS] URGENT: Still have duplication! Fixing immediately...');
          final fixedIndex = _news.indexWhere((item) => item['id'] == uniqueId);
          if (fixedIndex != -1) {
            _news[fixedIndex] = {
              ...cleanNewsItem,
              'comments': [],
            };
            await _saveNewsToStorage();
            _safeNotifyListeners();
            print('‚úÖ [ADD NEWS] Immediately fixed duplication for: $uniqueId');
          }
        }
      }

      // –ü–û–ö–ê–ó–´–í–ê–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –£–°–ü–ï–®–ù–û–ú –î–û–ë–ê–í–õ–ï–ù–ò–ò
      if (context != null && mounted) {
        final message = isRepost
            ? (repostComment.isNotEmpty ? '–†–µ–ø–æ—Å—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º —Å–æ–∑–¥–∞–Ω!' : '–†–µ–ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω!')
            : '–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω!';

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(message),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );
      }

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ NewsProvider: $e');

      // –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê –î–õ–Ø –û–¢–õ–ê–î–ö–ò
      if (e is Error) {
        print('‚ùå Stack trace: ${e.stackTrace}');
      }

      if (context != null && mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  // –î–û–ë–ê–í–¨–¢–ï —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å NewsProvider
  void fixRepostCommentsDuplication() {
    _safeOperation(() {
      int fixedCount = 0;

      for (int i = 0; i < _news.length; i++) {
        final newsItem = Map<String, dynamic>.from(_news[i]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–æ—Å—Ç—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        if (newsItem['is_repost'] == true && newsItem['repost_comment'] != null) {
          final repostComment = newsItem['repost_comment'].toString();
          final comments = List<Map<String, dynamic>>.from(newsItem['comments'] ?? []);

          // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ä–µ–ø–æ—Å—Ç–∞ –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –≤ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
          final hasDuplicate = comments.any((comment) {
            final commentText = comment['text']?.toString() ?? '';
            return commentText == repostComment;
          });

          if (hasDuplicate) {
            // –û—á–∏—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
            _news[i] = {
              ...newsItem,
              'comments': [], // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            };
            fixedCount++;
            print('‚úÖ Fixed repost comments duplication: ${newsItem['id']}');
          }
        }
      }

      if (fixedCount > 0) {
        _safeNotifyListeners();
        _saveNewsToStorage();
        print('üéâ Fixed $fixedCount reposts with comment duplication');
      }
    });
  }



  void debugRepostData(String repostId) {
    if (_isDisposed) return;

    final repostIndex = _news.indexWhere((item) => item['id'] == repostId);
    if (repostIndex != -1) {
      final repost = _news[repostIndex] as Map<String, dynamic>;
      print('üîç DEBUG REPOST DATA:');
      print('   ID: ${repost['id']}');
      print('   is_repost: ${repost['is_repost']}');
      print('   repost_comment: "${repost['repost_comment']}"');
      print('   comments count: ${(repost['comments'] as List).length}');
      print('   comments: ${repost['comments']}');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–∞
  bool _isValidIndex(int index) {
    return index >= 0 && index < _news.length;
  }

  void refreshAllPostsUserTags() {
    if (_isDisposed) return;

    _safeOperation(() {
      _safeNotifyListeners();
    });
    print('‚úÖ NewsProvider: –≤—Å–µ –ø–æ—Å—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤');
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Interaction Manager
  void initializeInteractions() {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º List<dynamic> –≤ List<Map<String, dynamic>>
    final List<Map<String, dynamic>> newsList = _news.map((item) {
      if (item is Map<String, dynamic>) {
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        final isRepost = item['is_repost'] == true;
        final repostComment = item['repost_comment']?.toString() ?? '';
        final comments = List<dynamic>.from(item['comments'] ?? []);

        if (isRepost && repostComment.isNotEmpty && comments.isNotEmpty) {
          print('üîÑ [INIT INTERACTIONS] Fixing repost comments for: ${item['id']}');
          print('   Repost comment: "$repostComment"');
          print('   Regular comments before: ${comments.length}');

          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –ø—É—Å—Ç—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
          return {
            ...item,
            'comments': [], // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
          };
        }
        return item;
      } else {
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ Map, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
        return {'id': item.toString(), 'isLiked': false, 'isBookmarked': false};
      }
    }).toList();

    _interactionManager.bulkUpdatePostStates(newsList);
    print('‚úÖ Interactions initialized for ${newsList.length} posts');
  }

  bool _containsNewsWithId(String newsId) {
    return _news.any((item) => item['id'].toString() == newsId);
  }

  void updateNews(int index, Map<String, dynamic> updatedNews) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final originalNews = _news[index] as Map<String, dynamic>;
        final preservedFields = {
          'id': originalNews['id'],
          'author_name': originalNews['author_name'],
          'created_at': originalNews['created_at'],
          'likes': originalNews['likes'],
          'comments': originalNews['comments'],
          'isLiked': originalNews['isLiked'],
          'isBookmarked': originalNews['isBookmarked'],
          'isFollowing': originalNews['isFollowing'],
          'tag_color': originalNews['tag_color'],
        };

        _news[index] = {
          ...preservedFields,
          ...updatedNews,
          'hashtags': _parseHashtags(updatedNews['hashtags'] ?? originalNews['hashtags']),
          'user_tags': updatedNews['user_tags'] ?? originalNews['user_tags'],
        };

        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  void addCommentToNews(String newsId, Map<String, dynamic> comment) {
    _safeOperation(() {
      final index = _news.indexWhere((item) => item['id'].toString() == newsId);
      if (index != -1) {
        final newsItem = _news[index] as Map<String, dynamic>;

        if (newsItem['comments'] == null) {
          newsItem['comments'] = [];
        }

        final completeComment = {
          ...comment,
          'time': comment['time'] ?? DateTime.now().toIso8601String(),
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        (newsItem['comments'] as List).insert(0, completeComment);
        _safeNotifyListeners();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        _saveNewsToStorage();

        print('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –Ω–æ–≤–æ—Å—Ç–∏ $newsId');
      }
    });
  }

  int findNewsIndexById(String newsId) {
    return _news.indexWhere((item) => item['id'].toString() == newsId);
  }

  void updateNewsComments(String newsId, List<dynamic> comments) {
    _safeOperation(() {
      final index = findNewsIndexById(newsId);
      if (index != -1) {
        final newsItem = _news[index] as Map<String, dynamic>;
        _news[index] = {
          ...newsItem,
          'comments': comments,
        };
        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  void removeCommentFromNews(int index, String commentId) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;

        if (newsItem['comments'] != null) {
          final commentsList = newsItem['comments'] as List;
          final initialLength = commentsList.length;

          commentsList.removeWhere((comment) =>
          comment['id'] == commentId
          );

          if (commentsList.length < initialLength) {
            _safeNotifyListeners();
            _saveNewsToStorage();
            print('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π $commentId —É–¥–∞–ª–µ–Ω');
          }
        }
      }
    });
  }

  void removeNews(int index) async {
    if (_isDisposed) return;

    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;
        final newsId = newsItem['id'].toString();
        final isChannelPost = newsItem['is_channel_post'] == true;

        print('üóëÔ∏è Removing news from NewsProvider: $newsId (channel: $isChannelPost)');

        try {
          // –¢–æ–ª—å–∫–æ –¥–ª—è API –ø–æ—Å—Ç–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ API
          if (!isChannelPost) {
            try {
              ApiService.deleteNews(newsId).catchError((e) {
                print('‚ö†Ô∏è API delete error (expected for local posts): $e');
              });
            } catch (e) {
              print('‚ö†Ô∏è API delete error (expected for local posts): $e');
            }
          }

          // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
          StorageService.removeLike(newsId);
          StorageService.removeBookmark(newsId);
          StorageService.removeUserTags(newsId);

          _news.removeAt(index);
          _safeNotifyListeners();

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
          _saveNewsToStorage();

          print('‚úÖ News removed from NewsProvider: $newsId');

        } catch (e) {
          print('‚ùå Error removing news from NewsProvider: $e');
          rethrow;
        }
      }
    });
  }

  Future<void> loadUserTags() async {
    if (_isDisposed) return;

    try {
      final loadedTags = await StorageService.loadUserTags();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö
      _safeOperation(() {
        for (var i = 0; i < _news.length; i++) {
          final newsItem = _news[i] as Map<String, dynamic>;
          final newsId = newsItem['id'].toString();

          if (loadedTags.containsKey(newsId)) {
            final newsTags = loadedTags[newsId]!;
            Map<String, String> updatedUserTags = {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'};

            if (newsTags['tags'] is Map) {
              final tagsMap = newsTags['tags'] as Map;
              updatedUserTags = tagsMap.map((key, value) =>
                  MapEntry(key.toString(), value.toString())
              );
            }

            _getTagColor(newsId, updatedUserTags).then((tagColor) {
              _safeOperation(() {
                _news[i] = {
                  ...newsItem,
                  'user_tags': updatedUserTags,
                  'tag_color': tagColor,
                };
                _safeNotifyListeners();
              });
            });
          }
        }
      });

      _safeNotifyListeners();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤: $e');
    }
  }

  void updateNewsHashtags(int index, List<String> hashtags) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;
        _news[index] = {
          ...newsItem,
          'hashtags': _parseHashtags(hashtags),
        };
        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  Map<String, String> _ensureStringStringMap(dynamic map) {
    if (map is Map<String, String>) {
      return map;
    }
    if (map is Map) {
      return map.map((key, value) => MapEntry(key.toString(), value.toString()));
    }
    return {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'};
  }

  void updateNewsUserTag(int index, String tagId, String newTagName, {Color? color}) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;
        final newsId = newsItem['id'].toString();

        final updatedUserTags = {
          ..._ensureStringStringMap(newsItem['user_tags'] ?? {}),
          tagId: newTagName,
        };

        final tagColor = color ?? Color(newsItem['tag_color'] ?? _generateColorFromId(newsId).value);

        final updatedNews = {
          ...newsItem,
          'user_tags': updatedUserTags,
          'tag_color': tagColor.value,
        };

        _news[index] = updatedNews;
        _safeNotifyListeners();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥ –∏ —Ü–≤–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        StorageService.updateUserTag(newsId, tagId, newTagName, color: tagColor.value);
        _saveNewsToStorage();
      }
    });
  }

  // –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
  List<dynamic> searchNews(String query) {
    if (_isDisposed) return [];
    if (query.isEmpty) return _news;

    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      final title = newsItem['title']?.toString().toLowerCase() ?? '';
      final description = newsItem['description']?.toString().toLowerCase() ?? '';
      final hashtags = (newsItem['hashtags'] is List
          ? (newsItem['hashtags'] as List).join(' ').toLowerCase()
          : '');
      final author = newsItem['author_name']?.toString().toLowerCase() ?? '';
      final userTags = (newsItem['user_tags'] is Map
          ? (newsItem['user_tags'] as Map).values.join(' ').toLowerCase()
          : '');

      return title.contains(query.toLowerCase()) ||
          description.contains(query.toLowerCase()) ||
          hashtags.contains(query.toLowerCase()) ||
          author.contains(query.toLowerCase()) ||
          userTags.contains(query.toLowerCase());
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  List<dynamic> getBookmarkedNews() {
    if (_isDisposed) return [];
    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      return newsItem['isBookmarked'] == true;
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (–ª–∞–π–∫–æ–≤ > 5)
  List<dynamic> getPopularNews() {
    if (_isDisposed) return [];
    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      return (newsItem['likes'] ?? 0) > 5;
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  List<dynamic> getMyNews(String userName) {
    if (_isDisposed) return [];
    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      return newsItem['author_name'] == userName;
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ ID
  Map<String, dynamic>? getNewsById(String id) {
    if (_isDisposed) return null;
    try {
      return _news.firstWhere(
            (item) => (item as Map<String, dynamic>)['id'].toString() == id,
      ) as Map<String, dynamic>?;
    } catch (e) {
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
  List<dynamic> getFollowedNews() {
    if (_isDisposed) return [];
    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      return newsItem['isFollowing'] == true;
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –æ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤/–∫–∞–Ω–∞–ª–æ–≤
  Future<List<dynamic>> getFollowedContent() async {
    if (_isDisposed) return [];
    try {
      if (_currentUserId == null) return [];
      final followedIds = await StorageService.loadFollows(_currentUserId!);
      return _news.where((item) {
        try {
          final newsItem = item as Map<String, dynamic>;
          final itemId = newsItem['id']?.toString() ?? '';
          return followedIds.contains(itemId);
        } catch (e) {
          print('Error checking follow for item: $e');
          return false;
        }
      }).toList();
    } catch (e) {
      print('Error loading followed content: $e');
      return [];
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
  void incrementNewsViews(int index) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;
        final currentViews = newsItem['views'] ?? 0;

        _news[index] = {
          ...newsItem,
          'views': currentViews + 1,
        };

        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Map<String, int> getStats() {
    if (_isDisposed) return {'total_news': 0, 'total_likes': 0, 'total_comments': 0, 'bookmarked_count': 0, 'liked_count': 0};

    final totalNews = _news.length;

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è fold
    final totalLikes = _news.fold<int>(0, (int sum, item) => sum + ((item['likes'] as int?) ?? 0));
    final totalComments = _news.fold<int>(0, (int sum, item) {
      final comments = item['comments'] as List? ?? [];
      return sum + comments.length;
    });

    final bookmarkedCount = _news.where((item) => item['isBookmarked'] == true).length;
    final likedCount = _news.where((item) => item['isLiked'] == true).length;

    return {
      'total_news': totalNews,
      'total_likes': totalLikes,
      'total_comments': totalComments,
      'bookmarked_count': bookmarkedCount,
      'liked_count': likedCount,
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
  bool containsNews(String newsId) {
    if (_isDisposed) return false;
    return _news.any((item) => item['id'].toString() == newsId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ ID
  int getNewsIndexById(String newsId) {
    if (_isDisposed) return -1;
    return _news.indexWhere((item) => item['id'].toString() == newsId);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–æ–≤–æ—Å—Ç–∏
  void patchNews(int index, Map<String, dynamic> partialUpdates) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final currentNews = _news[index] as Map<String, dynamic>;
        _news[index] = {
          ...currentNews,
          ...partialUpdates,
        };
        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
  void moveNewsToTop(int index) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news.removeAt(index);
        _news.insert(0, newsItem);
        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
  void duplicateNews(int index) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final originalNews = _news[index] as Map<String, dynamic>;
        final duplicatedNews = {
          ...originalNews,
          'id': 'dup-${DateTime.now().millisecondsSinceEpoch}-${originalNews['id']}',
          'created_at': DateTime.now().toIso8601String(),
          'likes': 0,
          'comments': [],
          'isLiked': false,
          'isBookmarked': false,
        };

        _news.insert(index + 1, duplicatedNews);
        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
  void sortByDate() {
    _safeOperation(() {
      _news.sort((a, b) {
        final dateA = DateTime.parse(a['created_at'] ?? '');
        final dateB = DateTime.parse(b['created_at'] ?? '');
        return dateB.compareTo(dateA);
      });
      _safeNotifyListeners();
      _saveNewsToStorage();
    });
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ª–∞–π–∫–∞–º
  void sortByLikes() {
    _safeOperation(() {
      _news.sort((a, b) {
        final likesA = a['likes'] ?? 0;
        final likesB = b['likes'] ?? 0;
        return likesB.compareTo(likesA);
      });
      _safeNotifyListeners();
      _saveNewsToStorage();
    });
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> clearAllData() async {
    if (_isDisposed) return;

    _safeOperation(() {
      _news = [];
      _isLoading = false;
      _errorMessage = null;
      _userProfiles.clear();
      _currentUserId = null;
      _safeNotifyListeners();
    });

    await StorageService.clearAllData();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  void updateMultipleNews(List<Map<String, dynamic>> updatedNewsList) {
    _safeOperation(() {
      for (final updatedNews in updatedNewsList) {
        final newsId = updatedNews['id']?.toString();
        if (newsId != null) {
          final index = _news.indexWhere((item) =>
          (item as Map<String, dynamic>)['id'].toString() == newsId
          );

          if (index != -1) {
            _news[index] = {
              ..._news[index],
              ...updatedNews,
            };
          }
        }
      }

      _safeNotifyListeners();
      _saveNewsToStorage();
    });
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  Future<void> restoreFromBackup(List<dynamic> backupData) async {
    if (_isDisposed) return;

    _safeOperation(() {
      _news = backupData;
      _safeNotifyListeners();
    });
    await _saveNewsToStorage();
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  List<dynamic> createBackup() {
    if (_isDisposed) return [];
    return List<dynamic>.from(_news);
  }

  // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–§–ò–õ–ï–ú
  void removeProfileImage() {
    if (_isDisposed || _currentUserId == null) return;

    final user = _userProfiles[_currentUserId!];
    if (user == null) return;

    _userProfiles[_currentUserId!] = user.copyWith(
      profileImageUrl: null,
      profileImageFile: null,
    );

    _safeNotifyListeners();

    // –û—á–∏—â–∞–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    StorageService.saveProfileImageUrl(_currentUserId!, null);
    StorageService.saveProfileImageFilePath(_currentUserId!, null);

    print('‚úÖ Profile image removed for user $_currentUserId');
  }

  void removeCoverImage() {
    if (_isDisposed || _currentUserId == null) return;

    final user = _userProfiles[_currentUserId!];
    if (user == null) return;

    _userProfiles[_currentUserId!] = user.copyWith(
      coverImageUrl: null,
      coverImageFile: null,
    );

    _safeNotifyListeners();

    // –û—á–∏—â–∞–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    StorageService.saveCoverImageUrl(_currentUserId!, null);
    StorageService.saveCoverImageFilePath(_currentUserId!, null);

    print('‚úÖ Cover image removed for user $_currentUserId');
  }

  bool hasProfileImage() {
    if (_isDisposed || _currentUserId == null) return false;
    final user = _userProfiles[_currentUserId!];
    return user?.profileImageUrl != null || user?.profileImageFile != null;
  }

  bool hasCoverImage() {
    if (_isDisposed || _currentUserId == null) return false;
    final user = _userProfiles[_currentUserId!];
    return user?.coverImageUrl != null || user?.coverImageFile != null;
  }

  dynamic getCurrentProfileImage() {
    if (_isDisposed || _currentUserId == null) return null;
    final user = _userProfiles[_currentUserId!];
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Ñ–∞–π–ª–∞, –∑–∞—Ç–µ–º URL
    if (user?.profileImageFile != null) return user!.profileImageFile;
    if (user?.profileImageUrl != null && user!.profileImageUrl!.isNotEmpty) return user.profileImageUrl;
    return null;
  }

  dynamic getCurrentCoverImage() {
    if (_isDisposed || _currentUserId == null) return null;
    final user = _userProfiles[_currentUserId!];
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Ñ–∞–π–ª–∞, –∑–∞—Ç–µ–º URL
    if (user?.coverImageFile != null) return user!.coverImageFile;
    if (user?.coverImageUrl != null && user!.coverImageUrl!.isNotEmpty) return user.coverImageUrl;
    return null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É
  List<dynamic> getContentByType(String contentType) {
    if (_isDisposed) return [];

    switch (contentType) {
      case 'all':
        return _news;
      case 'channel_posts':
        return _news.where((item) => item['is_channel_post'] == true).toList();
      case 'regular_posts':
        return _news.where((item) => item['is_channel_post'] != true).toList();
      case 'popular':
        return getPopularNews();
      case 'bookmarked':
        return getBookmarkedNews();
      default:
        return _news;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –±–∞—Ç—á–µ–º
  void updateNewsBatch(List<Map<String, dynamic>> updates) {
    _safeOperation(() {
      for (final update in updates) {
        final newsId = update['id']?.toString();
        if (newsId != null) {
          final index = findNewsIndexById(newsId);
          if (index != -1) {
            _news[index] = {
              ..._news[index],
              ...update,
            };
          }
        }
      }
      _safeNotifyListeners();
      _saveNewsToStorage();
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  bool hasDuplicate(String newsId) {
    if (_isDisposed) return false;
    return _news.any((item) => item['id'].toString() == newsId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  List<dynamic> getLatestNews({int count = 10}) {
    if (_isDisposed) return [];

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
    final sortedNews = List<dynamic>.from(_news)
      ..sort((a, b) {
        final dateA = DateTime.tryParse(a['created_at'] ?? '') ?? DateTime(0);
        final dateB = DateTime.tryParse(b['created_at'] ?? '') ?? DateTime(0);
        return dateB.compareTo(dateA);
      });

    return sortedNews.take(count).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
  Map<String, int> getPeriodStats(Duration period) {
    if (_isDisposed) return {};

    final cutoffTime = DateTime.now().subtract(period);
    final periodNews = _news.where((item) {
      final createdAt = DateTime.tryParse(item['created_at'] ?? '');
      return createdAt != null && createdAt.isAfter(cutoffTime);
    }).toList();

    return {
      'count': periodNews.length,
      'total_likes': periodNews.fold<int>(
        0,
            (sum, item) => sum + ((item['likes'] ?? 0) as num).toInt(),
      ),
      'total_comments': periodNews.fold<int>(
        0,
            (sum, item) {
          final comments = item['comments'] as List? ?? [];
          return sum + comments.length;
        },
      ),
    };
  }

  // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –î–û–°–¢–£–ü–ê –ö –ú–ï–ù–ï–î–ñ–ï–†–ê–ú
  InteractionManager get interactionManager => _interactionManager;
  RepostManager get repostManager => _repostManager;

  @override
  void dispose() {
    _isDisposed = true;
    _repostManager.dispose();
    super.dispose();
  }
}