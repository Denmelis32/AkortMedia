// lib/providers/news_provider.dart
import 'dart:io';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import '../../../services/api_service.dart';
import '../services/storage_service.dart';

class NewsProvider with ChangeNotifier {
  List<dynamic> _news = [];
  bool _isLoading = true;
  String? _errorMessage;

  // –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –§–û–¢–û –ü–†–û–§–ò–õ–Ø
  String? _profileImageUrl;
  File? _profileImageFile;

  List<dynamic> get news => _news;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;

  // –ù–û–í–´–ï –ì–ï–¢–¢–ï–†–´ –î–õ–Ø –§–û–¢–û –ü–†–û–§–ò–õ–Ø
  String? get profileImageUrl => _profileImageUrl;
  File? get profileImageFile => _profileImageFile;

  void setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void setError(String? message) {
    _errorMessage = message;
    notifyListeners();
  }

  // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–û–¢–û –ü–†–û–§–ò–õ–Ø
  // –í NewsProvider –æ–±–Ω–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ updateProfileImageUrl:
  void updateProfileImageUrl(String? url) async {
    if (url != null && url.isNotEmpty) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
      try {
        final uri = Uri.parse(url);
        if (!uri.hasScheme) {
          url = 'https://$url';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        final response = await http.head(Uri.parse(url));
        if (response.statusCode != 200) {
          print('‚ùå Image URL not accessible: ${response.statusCode}');
          return;
        }
      } catch (e) {
        print('‚ùå Invalid image URL: $e');
        return;
      }
    }

    _profileImageUrl = url;
    _profileImageFile = null;
    notifyListeners();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await StorageService.saveProfileImageUrl(url);
    print('‚úÖ Profile image URL updated: $url');
  }

  void updateProfileImageFile(File? file) {
    _profileImageFile = file;
    _profileImageUrl = null;
    notifyListeners();

    if (file != null) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
      file.exists().then((exists) {
        if (exists) {
          StorageService.saveProfileImageFilePath(file.path);
          print('‚úÖ Profile image file updated: ${file.path}');
        } else {
          print('‚ùå File does not exist: ${file.path}');
          _profileImageFile = null;
          notifyListeners();
        }
      });
    } else {
      StorageService.saveProfileImageFilePath(null);
      print('‚úÖ Profile image file removed');
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<void> loadProfileData() async {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º URL —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
      final savedUrl = await StorageService.loadProfileImageUrl();
      if (savedUrl != null && savedUrl.isNotEmpty) {
        _profileImageUrl = savedUrl;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
      final savedFilePath = await StorageService.loadProfileImageFilePath();
      if (savedFilePath != null && savedFilePath.isNotEmpty) {
        final file = File(savedFilePath);
        if (await file.exists()) {
          _profileImageFile = file;
        } else {
          // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å—å
          await StorageService.saveProfileImageFilePath(null);
          print('‚ö†Ô∏è Profile image file not found, clearing path');
        }
      }

      print('‚úÖ Profile data loaded: URL=$_profileImageUrl, File=${_profileImageFile?.path}');
    } catch (e) {
      print('‚ùå Error loading profile data: $e');
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  Future<void> ensureDataPersistence() async {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
      await loadProfileData();

      // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
      final cachedNews = await StorageService.loadNews();
      if (cachedNews.isEmpty) {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ mock –¥–∞–Ω–Ω—ã–µ
        final mockNews = _getMockNews();
        await StorageService.saveNews(mockNews);
        _news = mockNews;
        notifyListeners();
        print('‚úÖ Initial data ensured with ${mockNews.length} items');
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        _news = cachedNews;
        notifyListeners();
        print('üìÇ Using cached data: ${_news.length} items');
      }
    } catch (e) {
      print('‚ùå Error ensuring data persistence: $e');
      // –°–æ–∑–¥–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      final mockNews = _getMockNews();
      _news = mockNews;
      await StorageService.saveNews(mockNews);
      notifyListeners();
    }
  }

  Future<void> loadNews() async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      // –°–ù–ê–ß–ê–õ–ê –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      final cachedNews = await StorageService.loadNews();
      if (cachedNews.isNotEmpty) {
        _news = cachedNews;
        notifyListeners();
        print('üìÇ Loaded ${_news.length} news from cache');
      }

      // –ü–û–¢–û–ú –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ API (–≤ —Ñ–æ–Ω–µ)
      try {
        final apiNews = await ApiService.getNews();
        if (apiNews.isNotEmpty) {
          final localLikes = await StorageService.loadLikes();
          final localBookmarks = await StorageService.loadBookmarks();
          final userTags = await StorageService.loadUserTags();

          final updatedNews = await Future.wait(apiNews.map((newsItem) async {
            final newsId = newsItem['id'].toString();

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ user_tags
            final Map<String, String> itemUserTags;
            if (userTags.containsKey(newsId)) {
              final newsTags = userTags[newsId]!;
              if (newsTags['tags'] is Map) {
                final tagsMap = newsTags['tags'] as Map;
                itemUserTags = tagsMap.map((key, value) =>
                    MapEntry(key.toString(), value.toString())
                );
              } else {
                itemUserTags = {'tag1': '–§–∞–Ω–∞—Ç –ú–∞–Ω—á–µ—Å—Ç–µ—Ä–∞'};
              }
            } else {
              itemUserTags = newsItem['user_tags'] is Map
                  ? (newsItem['user_tags'] as Map).map((key, value) =>
                  MapEntry(key.toString(), value.toString())
              )
                  : {'tag1': '–§–∞–Ω–∞—Ç –ú–∞–Ω—á–µ—Å—Ç–µ—Ä–∞'};
            }

            final tagColor = await _getTagColor(newsId, itemUserTags);

            return {
              ...newsItem,
              'isLiked': localLikes.contains(newsId),
              'isBookmarked': localBookmarks.contains(newsId),
              'hashtags': _parseHashtags(newsItem['hashtags']),
              'user_tags': itemUserTags,
              'comments': newsItem['comments'] ?? [],
              'likes': newsItem['likes'] ?? 0,
              'tag_color': tagColor,
            };
          }));

          // –û–ë–ù–û–í–õ–Ø–ï–ú –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ
          _news = updatedNews;
          await StorageService.saveNews(_news);
          print('üîÑ Updated news from API: ${_news.length} items');
        } else {
          print('‚ö†Ô∏è API returned empty list, keeping cached data');
        }
      } catch (apiError) {
        print('‚ö†Ô∏è API update failed, using cached data: $apiError');
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      }

    } catch (e) {
      print('‚ùå Both cache and API failed: $e');
      _errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö';

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
      if (_news.isEmpty) {
        _news = _getMockNews();
        await StorageService.saveNews(_news);
        print('üîÑ Using mock data: ${_news.length} items');
      }
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤
  List<String> _parseHashtags(dynamic hashtags) {
    print('üîç NewsProvider _parseHashtags INPUT: $hashtags (type: ${hashtags.runtimeType})');

    if (hashtags is List) {
      final result = List<String>.from(hashtags).map((tag) {
        print('   üéØ NewsProvider processing tag: "$tag"');
        // –£–±–∏—Ä–∞–µ–º —Ä–µ—à–µ—Ç–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
        var cleanTag = tag.toString().replaceAll(RegExp(r'#'), '').trim();
        cleanTag = cleanTag.replaceAll(RegExp(r'\s+'), '');
        return cleanTag;
      }).where((tag) => tag.isNotEmpty).toList();
      print('üîç NewsProvider _parseHashtags OUTPUT: $result');
      return result;
    }

    if (hashtags is String) {
      final result = hashtags
          .split(RegExp(r'[,\s]+'))
          .map((tag) {
        var cleanTag = tag.replaceAll(RegExp(r'#'), '').trim();
        cleanTag = cleanTag.replaceAll(RegExp(r'\s+'), '');
        return cleanTag;
      })
          .where((tag) => tag.isNotEmpty)
          .toList();
      print('üîç NewsProvider _parseHashtags OUTPUT: $result');
      return result;
    }

    print('üîç NewsProvider _parseHashtags OUTPUT: []');
    return [];
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Future<int>
  Future<int> _getTagColor(String newsId, Map<String, String> userTags) async {
    try {
      final storedColor = await StorageService.getTagColor(newsId);
      if (storedColor != null) return storedColor;
    } catch (e) {
      print('Error getting tag color: $e');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ –Ω–æ–≤–æ—Å—Ç–∏
    return _generateColorFromId(newsId).value;
  }

  Color _generateColorFromId(String id) {
    final colors = [
      Colors.blue,
      Colors.green,
      Colors.orange,
      Colors.purple,
      Colors.red,
      Colors.teal,
      Colors.pink,
      Colors.indigo,
    ];
    final hash = id.hashCode;
    return colors[hash.abs() % colors.length];
  }
  String _getFallbackAvatarUrl(String userName) {
    return 'https://ui-avatars.com/api/?name=$userName&background=667eea&color=ffffff';
  }

  List<dynamic> _getMockNews() {
    return [
      {
        "id": "1",
        "title": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        "description": "–≠—Ç–æ –≤–∞—à–∞ –ø–µ—Ä–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –ø–æ—Å—Ç—ã!",
        "image": "üëã",
        "likes": 1,
        "author_name": "–°–∏—Å—Ç–µ–º–∞",
        "created_at": DateTime.now().toIso8601String(),
        "comments": [],
        "hashtags": ["–¥–æ–±—Ä–æ–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"],
        "user_tags": {"tag1": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"},
        "isLiked": false,
        "isBookmarked": false,
        "tag_color": Colors.blue.value,
        "is_channel_post": true,
        "author_avatar": _getFallbackAvatarUrl("–°–∏—Å—Ç–µ–º–∞"),
      },
      {
        "id": "2",
        "title": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏ –≤—ã–∏–≥—Ä–∞–ª –õ–∏–≥—É –ß–µ–º–ø–∏–æ–Ω–æ–≤",
        "description": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏ –≤ –¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ–º –º–∞—Ç—á–µ –æ–±—ã–≥—Ä–∞–ª –ò–Ω—Ç–µ—Ä —Å–æ —Å—á–µ—Ç–æ–º 1:0",
        "image": "‚öΩ",
        "likes": 45,
        "author_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "created_at": "2025-09-09T16:33:18.417Z",
        "comments": [],
        "hashtags": ["—Ñ—É—Ç–±–æ–ª", "–ª–∏–≥–∞—á–µ–º–ø–∏–æ–Ω–æ–≤"],
        "user_tags": {"tag1": "–§–∞–Ω–∞—Ç –ú–∞–Ω—á–µ—Å—Ç–µ—Ä–∞"},
        "isLiked": false,
        "isBookmarked": false,
        "tag_color": Colors.blue.value,
        "is_channel_post": false,
        "author_avatar": _getFallbackAvatarUrl("–°–∏—Å—Ç–µ–º–∞"),
      },
      {
        "id": "3",
        "title": "–ù–æ–≤—ã–π —Å–µ–∑–æ–Ω Formula 1",
        "description": "–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞ Formula 1 –æ–±–µ—â–∞–µ—Ç –±—ã—Ç—å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏",
        "image": "üèéÔ∏è",
        "likes": 23,
        "author_name": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å",
        "created_at": "2025-09-08T10:15:30.123Z",
        "comments": [],
        "hashtags": ["formula1", "–∞–≤—Ç–æ—Å–ø–æ—Ä—Ç"],
        "user_tags": {"tag1": "–ë–æ–ª–µ–ª—å—â–∏–∫"},
        "isLiked": false,
        "isBookmarked": false,
        "tag_color": Colors.red.value,
        "is_channel_post": false,
        "author_avatar": _getFallbackAvatarUrl("–°–∏—Å—Ç–µ–º–∞"),
      },
      {
        "id": "channel-1",
        "title": "–í–∞–∂–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
        "description": "–í —ç—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É–ª—É—á—à–∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        "image": "üì¢",
        "likes": 156,
        "author_name": "–°–∏—Å—Ç–µ–º–∞",
        "channel_name": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
        "created_at": "2025-09-10T09:00:00.000Z",
        "comments": [],
        "hashtags": ["–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–Ω–æ–≤–æ—Å—Ç–∏"],
        "user_tags": {"tag1": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ"},
        "isLiked": false,
        "isBookmarked": false,
        "tag_color": Colors.purple.value,
        "is_channel_post": true,
        "author_avatar": _getFallbackAvatarUrl("–°–∏—Å—Ç–µ–º–∞"),
      }
    ];
  }

  // –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–°–¢–ò
  Future<void> addNews(Map<String, dynamic> newsItem) async {
    try {
      // –°–û–•–†–ê–ù–Ø–ï–ú –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      final isChannelPost = newsItem['is_channel_post'] == true;
      final authorName = newsItem['author_name']?.toString() ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      final channelName = newsItem['channel_name']?.toString() ?? '';

      // –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –•–ï–®–¢–ï–ì–û–í
      List<String> cleanHashtags = [];
      if (newsItem['hashtags'] is List) {
        cleanHashtags = (newsItem['hashtags'] as List).map((tag) {
          String cleanTag;
          if (tag is String) {
            cleanTag = tag.replaceAll(RegExp(r'#'), '').trim();
          } else {
            cleanTag = tag.toString().replaceAll(RegExp(r'#'), '').trim();
          }
          cleanTag = cleanTag.replaceAll(RegExp(r'\s+'), '');
          return cleanTag;
        }).where((tag) => tag.isNotEmpty).toList();
      }

      final Map<String, dynamic> cleanNewsItem = {
        'id': newsItem['id']?.toString() ?? 'local-${DateTime.now().millisecondsSinceEpoch}',
        'title': newsItem['title']?.toString() ?? '',
        'description': newsItem['description']?.toString() ?? '',
        'image': newsItem['image']?.toString() ?? '',
        'author_name': authorName,
        'channel_name': channelName,
        'created_at': newsItem['created_at']?.toString() ?? DateTime.now().toIso8601String(),
        'likes': newsItem['likes'] ?? 0,
        'comments': newsItem['comments'] ?? [],
        'hashtags': cleanHashtags,
        'user_tags': newsItem['user_tags'] ?? {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'},
        'isLiked': newsItem['isLiked'] ?? false,
        'isBookmarked': newsItem['isBookmarked'] ?? false,
        'isFollowing': newsItem['isFollowing'] ?? false,
        'tag_color': newsItem['tag_color'] ?? _generateColorFromId(newsItem['id']?.toString() ?? DateTime.now().millisecondsSinceEpoch.toString()).value,
        'is_channel_post': isChannelPost,
      };

      // –î–û–ë–ê–í–õ–Ø–ï–ú –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      _news.insert(0, cleanNewsItem);
      notifyListeners();

      // –ù–ï–ú–ï–î–õ–ï–ù–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      await StorageService.saveNews(_news);

      print('‚úÖ –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: ${_news.length}');

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: $e');
      // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      try {
        final Map<String, dynamic> fallbackNews = {
          'id': 'local-${DateTime.now().millisecondsSinceEpoch}',
          'title': newsItem['title']?.toString() ?? '–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å',
          'description': newsItem['description']?.toString() ?? '',
          'author_name': newsItem['author_name']?.toString() ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          'created_at': DateTime.now().toIso8601String(),
          'likes': 0,
          'comments': [],
          'hashtags': [],
          'user_tags': {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'},
          'isLiked': false,
          'isBookmarked': false,
          'isFollowing': false,
          'tag_color': Colors.blue.value,
          'is_channel_post': false,
        };

        _news.insert(0, fallbackNews);
        notifyListeners();
        await StorageService.saveNews(_news);
        print('‚úÖ –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ fallback');
      } catch (e2) {
        print('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: $e2');
        // –î–∞–∂–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
        _news.insert(0, {
          'id': 'emergency-${DateTime.now().millisecondsSinceEpoch}',
          'title': '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å',
          'description': newsItem['description']?.toString() ?? '',
          'author_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          'created_at': DateTime.now().toIso8601String(),
          'likes': 0,
          'comments': [],
          'hashtags': [],
          'user_tags': {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'},
          'isLiked': false,
          'isBookmarked': false,
          'isFollowing': false,
          'tag_color': Colors.blue.value,
          'is_channel_post': false,
        });
        notifyListeners();
      }
    }
  }

  void updateNews(int index, Map<String, dynamic> updatedNews) {
    if (index >= 0 && index < _news.length) {
      final originalNews = _news[index] as Map<String, dynamic>;
      final preservedFields = {
        'id': originalNews['id'],
        'author_name': originalNews['author_name'],
        'created_at': originalNews['created_at'],
        'likes': originalNews['likes'],
        'comments': originalNews['comments'],
        'isLiked': originalNews['isLiked'],
        'isBookmarked': originalNews['isBookmarked'],
        'isFollowing': originalNews['isFollowing'],
        'tag_color': originalNews['tag_color'],
      };

      _news[index] = {
        ...preservedFields,
        ...updatedNews,
        'hashtags': _parseHashtags(updatedNews['hashtags'] ?? originalNews['hashtags']),
        'user_tags': updatedNews['user_tags'] ?? originalNews['user_tags'],
      };

      notifyListeners();
      StorageService.saveNews(_news);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∞–π–∫–∞
  void updateNewsLikeStatus(int index, bool isLiked, int newLikesCount) {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;
      final newsId = newsItem['id'].toString();

      _news[index] = {
        ...newsItem,
        'isLiked': isLiked,
        'likes': newLikesCount,
      };

      notifyListeners();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      if (isLiked) {
        StorageService.addLike(newsId);
      } else {
        StorageService.removeLike(newsId);
      }

      StorageService.saveNews(_news);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–ª–∞–¥–∫–∏
  void updateNewsBookmarkStatus(int index, bool isBookmarked) {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;
      final newsId = newsItem['id'].toString();

      _news[index] = {
        ...newsItem,
        'isBookmarked': isBookmarked,
      };

      notifyListeners();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      if (isBookmarked) {
        StorageService.addBookmark(newsId);
      } else {
        StorageService.removeBookmark(newsId);
      }

      StorageService.saveNews(_news);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  void updateNewsFollowStatus(int index, bool isFollowing) {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;
      final newsId = newsItem['id'].toString();

      _news[index] = {
        ...newsItem,
        'isFollowing': isFollowing,
      };

      notifyListeners();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      if (isFollowing) {
        StorageService.addFollow(newsId);
      } else {
        StorageService.removeFollow(newsId);
      }

      StorageService.saveNews(_news);
    }
  }

  void addCommentToNews(int index, Map<String, dynamic> comment) {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;

      if (newsItem['comments'] == null) {
        newsItem['comments'] = [];
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∞ –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      final completeComment = {
        ...comment,
        'time': comment['time'] ?? DateTime.now().toIso8601String(),
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      (newsItem['comments'] as List).insert(0, completeComment);
      notifyListeners();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      StorageService.saveNews(_news);

      print('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –Ω–æ–≤–æ—Å—Ç–∏ ${newsItem['id']}');
    }
  }

  void removeCommentFromNews(int index, String commentId) {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;

      if (newsItem['comments'] != null) {
        final commentsList = newsItem['comments'] as List;
        final initialLength = commentsList.length;

        commentsList.removeWhere((comment) =>
        comment['id'] == commentId
        );

        if (commentsList.length < initialLength) {
          notifyListeners();
          StorageService.saveNews(_news);
          print('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π $commentId —É–¥–∞–ª–µ–Ω');
        }
      }
    }
  }
  void removeNews(int index) async {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;
      final newsId = newsItem['id'].toString();

      try {
        await ApiService.deleteNews(newsId);
      } catch (e) {
        print('API delete error: $e');
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
      await StorageService.removeLike(newsId);
      await StorageService.removeBookmark(newsId);
      await StorageService.removeUserTags(newsId);

      _news.removeAt(index);
      notifyListeners();
      StorageService.saveNews(_news);
    }
  }

  Future<void> loadUserTags() async {
    try {
      final loadedTags = await StorageService.loadUserTags();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö
      for (var i = 0; i < _news.length; i++) {
        final newsItem = _news[i] as Map<String, dynamic>;
        final newsId = newsItem['id'].toString();

        if (loadedTags.containsKey(newsId)) {
          final newsTags = loadedTags[newsId]!;
          Map<String, String> updatedUserTags = {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'};

          if (newsTags['tags'] is Map) {
            final tagsMap = newsTags['tags'] as Map;
            updatedUserTags = tagsMap.map((key, value) =>
                MapEntry(key.toString(), value.toString())
            );
          }

          final tagColor = await _getTagColor(newsId, updatedUserTags);

          _news[i] = {
            ...newsItem,
            'user_tags': updatedUserTags,
            'tag_color': tagColor,
          };
        }
      }

      notifyListeners();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤: $e');
    }
  }

  void updateNewsHashtags(int index, List<String> hashtags) {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;
      _news[index] = {
        ...newsItem,
        'hashtags': _parseHashtags(hashtags),
      };
      notifyListeners();
      StorageService.saveNews(_news);
    }
  }

  Map<String, String> _ensureStringStringMap(dynamic map) {
    if (map is Map<String, String>) {
      return map;
    }
    if (map is Map) {
      return map.map((key, value) => MapEntry(key.toString(), value.toString()));
    }
    return {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'};
  }

  void updateNewsUserTag(int index, String tagId, String newTagName, {Color? color}) {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;
      final newsId = newsItem['id'].toString();

      final updatedUserTags = {
        ..._ensureStringStringMap(newsItem['user_tags'] ?? {}),
        tagId: newTagName,
      };

      final tagColor = color ?? Color(newsItem['tag_color'] ?? _generateColorFromId(newsId).value);

      final updatedNews = {
        ...newsItem,
        'user_tags': updatedUserTags,
        'tag_color': tagColor.value,
      };

      _news[index] = updatedNews;
      notifyListeners();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥ –∏ —Ü–≤–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      StorageService.updateUserTag(newsId, tagId, newTagName, color: tagColor.value);
      StorageService.saveNews(_news);
    }
  }

  // –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
  List<dynamic> searchNews(String query) {
    if (query.isEmpty) return _news;

    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      final title = newsItem['title']?.toString().toLowerCase() ?? '';
      final description = newsItem['description']?.toString().toLowerCase() ?? '';
      final hashtags = (newsItem['hashtags'] is List
          ? (newsItem['hashtags'] as List).join(' ').toLowerCase()
          : '');
      final author = newsItem['author_name']?.toString().toLowerCase() ?? '';
      final userTags = (newsItem['user_tags'] is Map
          ? (newsItem['user_tags'] as Map).values.join(' ').toLowerCase()
          : '');

      return title.contains(query.toLowerCase()) ||
          description.contains(query.toLowerCase()) ||
          hashtags.contains(query.toLowerCase()) ||
          author.contains(query.toLowerCase()) ||
          userTags.contains(query.toLowerCase());
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  List<dynamic> getBookmarkedNews() {
    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      return newsItem['isBookmarked'] == true;
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (–ª–∞–π–∫–æ–≤ > 5)
  List<dynamic> getPopularNews() {
    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      return (newsItem['likes'] ?? 0) > 5;
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  List<dynamic> getMyNews(String userName) {
    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      return newsItem['author_name'] == userName;
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ ID
  Map<String, dynamic>? getNewsById(String id) {
    try {
      return _news.firstWhere(
            (item) => (item as Map<String, dynamic>)['id'].toString() == id,
      ) as Map<String, dynamic>?;
    } catch (e) {
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
  List<dynamic> getFollowedNews() {
    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      return newsItem['isFollowing'] == true;
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –æ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤/–∫–∞–Ω–∞–ª–æ–≤
  Future<List<dynamic>> getFollowedContent() async {
    try {
      final followedIds = await StorageService.loadFollows();
      return _news.where((item) {
        try {
          final newsItem = item as Map<String, dynamic>;
          final itemId = newsItem['id']?.toString() ?? '';
          return followedIds.contains(itemId);
        } catch (e) {
          print('Error checking follow for item: $e');
          return false;
        }
      }).toList();
    } catch (e) {
      print('Error loading followed content: $e');
      return [];
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
  void incrementNewsViews(int index) {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news[index] as Map<String, dynamic>;
      final currentViews = newsItem['views'] ?? 0;

      _news[index] = {
        ...newsItem,
        'views': currentViews + 1,
      };

      notifyListeners();
      StorageService.saveNews(_news);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Map<String, int> getStats() {
    final totalNews = _news.length;

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è fold
    final totalLikes = _news.fold<int>(0, (int sum, item) => sum + ((item['likes'] as int?) ?? 0));
    final totalComments = _news.fold<int>(0, (int sum, item) {
      final comments = item['comments'] as List? ?? [];
      return sum + comments.length;
    });

    final bookmarkedCount = _news.where((item) => item['isBookmarked'] == true).length;
    final likedCount = _news.where((item) => item['isLiked'] == true).length;

    return {
      'total_news': totalNews,
      'total_likes': totalLikes,
      'total_comments': totalComments,
      'bookmarked_count': bookmarkedCount,
      'liked_count': likedCount,
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
  bool containsNews(String newsId) {
    return _news.any((item) => item['id'].toString() == newsId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ ID
  int getNewsIndexById(String newsId) {
    return _news.indexWhere((item) => item['id'].toString() == newsId);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–æ–≤–æ—Å—Ç–∏
  void patchNews(int index, Map<String, dynamic> partialUpdates) {
    if (index >= 0 && index < _news.length) {
      final currentNews = _news[index] as Map<String, dynamic>;
      _news[index] = {
        ...currentNews,
        ...partialUpdates,
      };
      notifyListeners();
      StorageService.saveNews(_news);
    }
  }

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
  void moveNewsToTop(int index) {
    if (index >= 0 && index < _news.length) {
      final newsItem = _news.removeAt(index);
      _news.insert(0, newsItem);
      notifyListeners();
      StorageService.saveNews(_news);
    }
  }

  // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
  void duplicateNews(int index) {
    if (index >= 0 && index < _news.length) {
      final originalNews = _news[index] as Map<String, dynamic>;
      final duplicatedNews = {
        ...originalNews,
        'id': 'dup-${DateTime.now().millisecondsSinceEpoch}-${originalNews['id']}',
        'created_at': DateTime.now().toIso8601String(),
        'likes': 0,
        'comments': [],
        'isLiked': false,
        'isBookmarked': false,
      };

      _news.insert(index + 1, duplicatedNews);
      notifyListeners();
      StorageService.saveNews(_news);
    }
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
  void sortByDate() {
    _news.sort((a, b) {
      final dateA = DateTime.parse(a['created_at'] ?? '');
      final dateB = DateTime.parse(b['created_at'] ?? '');
      return dateB.compareTo(dateA);
    });
    notifyListeners();
    StorageService.saveNews(_news);
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ª–∞–π–∫–∞–º
  void sortByLikes() {
    _news.sort((a, b) {
      final likesA = a['likes'] ?? 0;
      final likesB = b['likes'] ?? 0;
      return likesB.compareTo(likesA);
    });
    notifyListeners();
    StorageService.saveNews(_news);
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> clearAllData() async {
    _news = [];
    _isLoading = false;
    _errorMessage = null;
    _profileImageUrl = null;
    _profileImageFile = null;
    await StorageService.clearAllData();
    notifyListeners();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  void updateMultipleNews(List<Map<String, dynamic>> updatedNewsList) {
    for (final updatedNews in updatedNewsList) {
      final newsId = updatedNews['id']?.toString();
      if (newsId != null) {
        final index = _news.indexWhere((item) =>
        (item as Map<String, dynamic>)['id'].toString() == newsId
        );

        if (index != -1) {
          _news[index] = {
            ..._news[index],
            ...updatedNews,
          };
        }
      }
    }

    notifyListeners();
    StorageService.saveNews(_news);
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  Future<void> restoreFromBackup(List<dynamic> backupData) async {
    _news = backupData;
    await StorageService.saveNews(_news);
    notifyListeners();
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  List<dynamic> createBackup() {
    return List<dynamic>.from(_news);
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
  void removeProfileImage() {
    _profileImageUrl = null;
    _profileImageFile = null;
    notifyListeners();

    // –û—á–∏—â–∞–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    StorageService.saveProfileImageUrl(null);
    StorageService.saveProfileImageFilePath(null);

    print('‚úÖ Profile image removed');
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
  bool hasProfileImage() {
    return _profileImageUrl != null || _profileImageFile != null;
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Ñ–∞–π–ª–∞)
  dynamic getCurrentProfileImage() {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Ñ–∞–π–ª–∞, –∑–∞—Ç–µ–º URL
    if (_profileImageFile != null) return _profileImageFile;
    if (_profileImageUrl != null && _profileImageUrl!.isNotEmpty) return _profileImageUrl;
    return null;
  }
}