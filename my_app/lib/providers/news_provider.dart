// lib/providers/news_provider.dart
import 'dart:io';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:my_app/providers/user_tags_provider.dart';
import 'package:provider/provider.dart';
import '../../../services/api_service.dart';
import '../pages/news_page/mock_news_data.dart';
import '../services/interaction_manager.dart';
import '../services/storage_service.dart';

class NewsProvider with ChangeNotifier {
  List<dynamic> _news = [];
  bool _isLoading = true;
  String? _errorMessage;
  bool get mounted => !_isDisposed;
  // –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –§–û–¢–û –ü–†–û–§–ò–õ–Ø
  String? _profileImageUrl;
  File? _profileImageFile;

  // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è disposed —Å–æ—Å—Ç–æ—è–Ω–∏—è
  bool _isDisposed = false;

  List<dynamic> get news => _news;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;

  // –ù–û–í–´–ï –ì–ï–¢–¢–ï–†–´ –î–õ–Ø –§–û–¢–û –ü–†–û–§–ò–õ–Ø
  String? get profileImageUrl => _profileImageUrl;
  File? get profileImageFile => _profileImageFile;

  // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ disposed —Å–æ—Å—Ç–æ—è–Ω–∏—è
  bool get isDisposed => _isDisposed;

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
  void _safeNotifyListeners() {
    if (!_isDisposed && hasListeners) {
      notifyListeners();
    }
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
  void _safeOperation(Function() operation) {
    if (_isDisposed) {
      print('‚ö†Ô∏è NewsProvider is disposed, skipping operation');
      return;
    }
    operation();
  }

  void setLoading(bool loading) {
    _safeOperation(() {
      _isLoading = loading;
      _safeNotifyListeners();
    });
  }

  void setError(String? message) {
    _safeOperation(() {
      _errorMessage = message;
      _safeNotifyListeners();
    });
  }

  // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–û–¢–û –ü–†–û–§–ò–õ–Ø
  Future<void> updateProfileImageUrl(String? url) async {
    if (_isDisposed) return;

    if (url != null && url.isNotEmpty) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
      try {
        final uri = Uri.parse(url);
        if (!uri.hasScheme) {
          url = 'https://$url';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        final response = await http.head(Uri.parse(url));
        if (response.statusCode != 200) {
          print('‚ùå Image URL not accessible: ${response.statusCode}');
          return;
        }
      } catch (e) {
        print('‚ùå Invalid image URL: $e');
        return;
      }
    }

    _safeOperation(() {
      _profileImageUrl = url;
      _profileImageFile = null;
      _safeNotifyListeners();
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await StorageService.saveProfileImageUrl(url);
    print('‚úÖ Profile image URL updated: $url');
  }

  Future<void> updateProfileImageFile(File? file) async {
    if (_isDisposed) return;

    _safeOperation(() {
      _profileImageFile = file;
      _profileImageUrl = null;
    });

    if (file != null) {
      final exists = await file.exists();
      if (exists) {
        await StorageService.saveProfileImageFilePath(file.path);
        print('‚úÖ Profile image file updated: ${file.path}');
      } else {
        print('‚ùå File does not exist: ${file.path}');
        _safeOperation(() {
          _profileImageFile = null;
        });
      }
    } else {
      await StorageService.saveProfileImageFilePath(null);
      print('‚úÖ Profile image file removed');
    }

    _safeNotifyListeners();
  }

  void clearData() {
    _safeOperation(() {
      _safeNotifyListeners();
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<void> loadProfileData() async {
    if (_isDisposed) return;

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º URL —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
      final savedUrl = await StorageService.loadProfileImageUrl();
      if (savedUrl != null && savedUrl.isNotEmpty) {
        _safeOperation(() {
          _profileImageUrl = savedUrl;
        });
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
      final savedFilePath = await StorageService.loadProfileImageFilePath();
      if (savedFilePath != null && savedFilePath.isNotEmpty) {
        final file = File(savedFilePath);
        if (await file.exists()) {
          _safeOperation(() {
            _profileImageFile = file;
          });
        } else {
          // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å—å
          await StorageService.saveProfileImageFilePath(null);
          print('‚ö†Ô∏è Profile image file not found, clearing path');
        }
      }

      print('‚úÖ Profile data loaded: URL=$_profileImageUrl, File=${_profileImageFile?.path}');
      _safeNotifyListeners();
    } catch (e) {
      print('‚ùå Error loading profile data: $e');
    }
  }

  // –ú–ï–¢–û–î –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –ù–û–í–û–°–¢–ï–ô –í –•–†–ê–ù–ò–õ–ò–©–ï
  Future<void> _saveNewsToStorage() async {
    if (_isDisposed) return;

    try {
      print('üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...');
      await StorageService.saveNews(_news);
      print('‚úÖ –ù–æ–≤–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: $e');
    }
  }

  UserTagsProvider? _getUserTagsProvider(BuildContext context) {
    try {
      return Provider.of<UserTagsProvider>(context, listen: false);
    } catch (e) {
      print('‚ö†Ô∏è UserTagsProvider not available: $e');
      return null;
    }
  }

  // –ú–ï–¢–û–î–´ –î–õ–Ø –†–ï–ü–û–°–¢–ê
  void updateNewsRepostStatus(int index, bool isReposted, int repostsCount) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        _news[index]['isReposted'] = isReposted;
        _news[index]['reposts'] = repostsCount;
        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  // –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–û–í
  void updateNewsLikeStatus(int index, bool isLiked, int likesCount) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;
        final newsId = newsItem['id'].toString();

        _news[index] = {
          ...newsItem,
          'isLiked': isLiked,
          'likes': likesCount,
        };

        _safeNotifyListeners();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if (isLiked) {
          StorageService.addLike(newsId);
        } else {
          StorageService.removeLike(newsId);
        }

        _saveNewsToStorage();
      }
    });
  }

  void updateNewsBookmarkStatus(int index, bool isBookmarked) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;
        final newsId = newsItem['id'].toString();

        _news[index] = {
          ...newsItem,
          'isBookmarked': isBookmarked,
        };

        _safeNotifyListeners();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if (isBookmarked) {
          StorageService.addBookmark(newsId);
        } else {
          StorageService.removeBookmark(newsId);
        }

        _saveNewsToStorage();
      }
    });
  }

  void updateNewsFollowStatus(int index, bool isFollowing) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;
        final newsId = newsItem['id'].toString();

        _news[index] = {
          ...newsItem,
          'isFollowing': isFollowing,
        };

        _safeNotifyListeners();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if (isFollowing) {
          StorageService.addFollow(newsId);
        } else {
          StorageService.removeFollow(newsId);
        }

        _saveNewsToStorage();
      }
    });
  }

  Future<void> loadNews() async {
    if (_isDisposed) return;

    _safeOperation(() {
      _isLoading = true;
      _errorMessage = null;
      _safeNotifyListeners();
    });

    try {
      // –°–ù–ê–ß–ê–õ–ê –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      final cachedNews = await StorageService.loadNews();
      if (cachedNews.isNotEmpty) {
        _safeOperation(() {
          _news = cachedNews;
          _safeNotifyListeners();
        });
        print('üìÇ Loaded ${_news.length} news from cache');
      }

      // –ü–û–¢–û–ú –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ API (–≤ —Ñ–æ–Ω–µ)
      try {
        final apiNews = await ApiService.getNews();
        if (apiNews.isNotEmpty) {
          final localLikes = await StorageService.loadLikes();
          final localBookmarks = await StorageService.loadBookmarks();
          final userTags = await StorageService.loadUserTags();

          final updatedNews = await Future.wait(apiNews.map((newsItem) async {
            final newsId = newsItem['id'].toString();

            // –ü–†–û–í–ï–†–Ø–ï–ú –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            if (_containsNewsWithId(newsId)) {
              print('‚ö†Ô∏è Skipping duplicate news from API: $newsId');
              return _news.firstWhere((item) => item['id'].toString() == newsId);
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ user_tags
            final Map<String, String> itemUserTags;
            if (userTags.containsKey(newsId)) {
              final newsTags = userTags[newsId]!;
              if (newsTags['tags'] is Map) {
                final tagsMap = newsTags['tags'] as Map;
                itemUserTags = tagsMap.map((key, value) =>
                    MapEntry(key.toString(), value.toString())
                );
              } else {
                itemUserTags = {'tag1': '–§–∞–Ω–∞—Ç –ú–∞–Ω—á–µ—Å—Ç–µ—Ä–∞'};
              }
            } else {
              itemUserTags = newsItem['user_tags'] is Map
                  ? (newsItem['user_tags'] as Map).map((key, value) =>
                  MapEntry(key.toString(), value.toString())
              )
                  : {'tag1': '–§–∞–Ω–∞—Ç –ú–∞–Ω—á–µ—Å—Ç–µ—Ä–∞'};
            }

            final tagColor = await _getTagColor(newsId, itemUserTags);

            return {
              ...newsItem,
              'isLiked': localLikes.contains(newsId),
              'isBookmarked': localBookmarks.contains(newsId),
              'hashtags': _parseHashtags(newsItem['hashtags']),
              'user_tags': itemUserTags,
              'comments': newsItem['comments'] ?? [],
              'likes': newsItem['likes'] ?? 0,
              'tag_color': tagColor,
            };
          }));

          // –û–ë–ù–û–í–õ–Ø–ï–ú –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          final newItems = updatedNews.where((item) =>
          !_containsNewsWithId(item['id'].toString())).toList();

          if (newItems.isNotEmpty) {
            _safeOperation(() {
              _news.insertAll(0, newItems);
            });
            await _saveNewsToStorage();
            print('üîÑ Updated news from API: ${newItems.length} new items');
          } else {
            print('‚ö†Ô∏è No new items from API, keeping cached data');
          }
        } else {
          print('‚ö†Ô∏è API returned empty list, keeping cached data');
        }
      } catch (apiError) {
        print('‚ö†Ô∏è API update failed, using cached data: $apiError');
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      }

    } catch (e) {
      print('‚ùå Both cache and API failed: $e');
      _safeOperation(() {
        _errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö';
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
      if (_news.isEmpty) {
        final mockNews = _getMockNews();
        _safeOperation(() {
          _news = mockNews;
        });
        await _saveNewsToStorage();
        print('üîÑ Using mock data: ${_news.length} items');
      }
    } finally {
      _safeOperation(() {
        _isLoading = false;
        _safeNotifyListeners();
      });
      initializeInteractions();
    }
  }

  Future<void> ensureDataPersistence() async {
    if (_isDisposed) return;

    try {
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
      await loadProfileData();

      // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
      final cachedNews = await StorageService.loadNews();
      if (cachedNews.isEmpty) {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ mock –¥–∞–Ω–Ω—ã–µ
        final mockNews = MockNewsData.getMockNews();
        await _saveNewsToStorage();
        _safeOperation(() {
          _news = mockNews;
          _safeNotifyListeners();
        });

        // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        initializeInteractions();

        print('‚úÖ Initial data ensured with ${mockNews.length} items');
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        _safeOperation(() {
          _news = cachedNews;
          _safeNotifyListeners();
        });

        // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        initializeInteractions();

        print('üìÇ Using cached data: ${_news.length} items');
      }
    } catch (e) {
      print('‚ùå Error ensuring data persistence: $e');
      // –°–æ–∑–¥–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      final mockNews = MockNewsData.getMockNews();
      _safeOperation(() {
        _news = mockNews;
      });
      await _saveNewsToStorage();

      // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
      initializeInteractions();

      _safeNotifyListeners();
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤
  List<String> _parseHashtags(dynamic hashtags) {
    if (_isDisposed) return [];

    print('üîç NewsProvider _parseHashtags INPUT: $hashtags (type: ${hashtags.runtimeType})');

    if (hashtags is List) {
      final result = List<String>.from(hashtags).map((tag) {
        print('   üéØ NewsProvider processing tag: "$tag"');
        // –£–±–∏—Ä–∞–µ–º —Ä–µ—à–µ—Ç–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
        var cleanTag = tag.toString().replaceAll(RegExp(r'#'), '').trim();
        cleanTag = cleanTag.replaceAll(RegExp(r'\s+'), '');
        return cleanTag;
      }).where((tag) => tag.isNotEmpty).toList();
      print('üîç NewsProvider _parseHashtags OUTPUT: $result');
      return result;
    }

    if (hashtags is String) {
      final result = hashtags
          .split(RegExp(r'[,\s]+'))
          .map((tag) {
        var cleanTag = tag.replaceAll(RegExp(r'#'), '').trim();
        cleanTag = cleanTag.replaceAll(RegExp(r'\s+'), '');
        return cleanTag;
      })
          .where((tag) => tag.isNotEmpty)
          .toList();
      print('üîç NewsProvider _parseHashtags OUTPUT: $result');
      return result;
    }

    print('üîç NewsProvider _parseHashtags OUTPUT: []');
    return [];
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Future<int>
  Future<int> _getTagColor(String newsId, Map<String, String> userTags) async {
    if (_isDisposed) return Colors.blue.value;

    try {
      final storedColor = await StorageService.getTagColor(newsId);
      if (storedColor != null) return storedColor;
    } catch (e) {
      print('Error getting tag color: $e');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ –Ω–æ–≤–æ—Å—Ç–∏
    return _generateColorFromId(newsId).value;
  }

  Color _generateColorFromId(String id) {
    final colors = [
      Colors.blue,
      Colors.green,
      Colors.orange,
      Colors.purple,
      Colors.red,
      Colors.teal,
      Colors.pink,
      Colors.indigo,
    ];
    final hash = id.hashCode;
    return colors[hash.abs() % colors.length];
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤–º–µ—Å—Ç–æ URL
  String _getFallbackAvatarUrl(String userName) {
    final avatars = [
      'assets/images/ava_news/ava1.png',
      'assets/images/ava_news/ava2.png',
      'assets/images/ava_news/ava3.png',
      'assets/images/ava_news/ava4.png',
      'assets/images/ava_news/ava5.png',
      'assets/images/ava_news/ava6.png',
      'assets/images/ava_news/ava7.png',
      'assets/images/ava_news/ava8.png',
      'assets/images/ava_news/ava9.png',
      'assets/images/ava_news/ava10.png',
      'assets/images/ava_news/ava11.png',
      'assets/images/ava_news/ava12.png',
    ];

    final index = userName.hashCode.abs() % avatars.length;
    return avatars[index];
  }

  List<dynamic> _getMockNews() {
    return MockNewsData.getMockNews();
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–°–¢–ò
  Future<void> addNews(Map<String, dynamic> newsItem, {BuildContext? context}) async {
    if (_isDisposed) return;

    try {
      // –ü–†–û–í–ï–†–Ø–ï–ú –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID - –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      final newNewsId = newsItem['id']?.toString();
      if (newNewsId != null) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ID
        final exists = _news.any((item) {
          final itemId = item['id']?.toString();
          return itemId == newNewsId ||
              itemId == 'post-$newNewsId' ||
              itemId == 'channel-$newNewsId' ||
              newNewsId == 'post-$itemId' ||
              newNewsId == 'channel-$itemId';
        });

        if (exists) {
          print('‚ö†Ô∏è News with similar ID already exists: $newNewsId, skipping...');
          return;
        }
      }

      final isChannelPost = newsItem['is_channel_post'] == true;
      final authorName = newsItem['author_name']?.toString() ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      final channelName = newsItem['channel_name']?.toString() ?? '';

      // –°–û–ó–î–ê–ï–ú –£–ù–ò–ö–ê–õ–¨–ù–´–ô ID –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      final uniqueId = newsItem['id']?.toString() ?? 'news-${DateTime.now().millisecondsSinceEpoch}';

      // –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–û–°–õ–ï–î–ù–ò–ï –¢–ï–ì–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
      Map<String, String> personalTags = <String, String>{};

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UserTagsProvider –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
      if (context != null) {
        try {
          final userTagsProvider = Provider.of<UserTagsProvider>(context, listen: false);
          if (userTagsProvider != null && userTagsProvider.isInitialized) {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            personalTags = userTagsProvider.getLastUsedTags();
            print('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: $personalTags');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
            await userTagsProvider.initializeTagsForNewPost(uniqueId);
            print('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ–≥–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: $uniqueId');
          }
        } catch (e) {
          print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å UserTagsProvider –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: $e');
        }
      }

      // –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –•–ï–®–¢–ï–ì–û–í
      List<String> cleanHashtags = [];
      if (newsItem['hashtags'] is List) {
        cleanHashtags = (newsItem['hashtags'] as List).map((tag) {
          String cleanTag;
          if (tag is String) {
            cleanTag = tag.replaceAll(RegExp(r'#'), '').trim();
          } else {
            cleanTag = tag.toString().replaceAll(RegExp(r'#'), '').trim();
          }
          cleanTag = cleanTag.replaceAll(RegExp(r'\s+'), '');
          return cleanTag;
        }).where((tag) => tag.isNotEmpty).toList();
      }

      // –û–ü–†–ï–î–ï–õ–Ø–ï–ú –¶–í–ï–¢ –¢–ï–ì–ê - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
      Color tagColor = _generateColorFromId(uniqueId);

      final Map<String, dynamic> cleanNewsItem = {
        'id': uniqueId,
        'title': newsItem['title']?.toString() ?? '',
        'description': newsItem['description']?.toString() ?? '',
        'image': newsItem['image']?.toString() ?? '',
        'author_name': authorName,
        'channel_name': channelName,
        'channel_id': newsItem['channel_id']?.toString() ?? '',
        'created_at': newsItem['created_at']?.toString() ?? DateTime.now().toIso8601String(),
        'likes': newsItem['likes'] ?? 0,
        'comments': newsItem['comments'] ?? [],
        'hashtags': cleanHashtags,
        // –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ü–û–°–õ–ï–î–ù–ò–ï –¢–ï–ì–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        'user_tags': personalTags,
        'isLiked': newsItem['isLiked'] ?? false,
        'isBookmarked': newsItem['isBookmarked'] ?? false,
        'isFollowing': newsItem['isFollowing'] ?? false,
        'tag_color': tagColor.value,
        'is_channel_post': isChannelPost,
        'content_type': isChannelPost ? 'channel_post' : 'regular_post',
        // –î–û–ë–ê–í–õ–Ø–ï–ú –ê–í–ê–¢–ê–†–ö–£ –ê–í–¢–û–†–ê - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
        'author_avatar': newsItem['author_avatar'] ?? _getFallbackAvatarUrl(authorName),
      };

      // –î–û–ë–ê–í–õ–Ø–ï–ú –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      _safeOperation(() {
        _news.insert(0, cleanNewsItem);
        _safeNotifyListeners();
      });

      // –ù–ï–ú–ï–î–õ–ï–ù–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      await _saveNewsToStorage();

      // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏
      final interactionManager = InteractionManager();
      interactionManager.initializePostState(
        postId: uniqueId,
        isLiked: cleanNewsItem['isLiked'],
        isBookmarked: cleanNewsItem['isBookmarked'],
        isReposted: cleanNewsItem['isReposted'] ?? false,
        likesCount: cleanNewsItem['likes'],
        repostsCount: cleanNewsItem['reposts'] ?? 0,
        comments: List<Map<String, dynamic>>.from(cleanNewsItem['comments'] ?? []),
      );

      print('‚úÖ –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ NewsProvider. ID: $uniqueId, –¢–µ–≥–∏: $personalTags, –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: ${_news.length}');

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ NewsProvider: $e');
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
      if (context != null && mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void refreshAllPostsUserTags() {
    if (_isDisposed) return;

    _safeOperation(() {
      _safeNotifyListeners();
    });
    print('‚úÖ NewsProvider: –≤—Å–µ –ø–æ—Å—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤');
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Interaction Manager
  void initializeInteractions() {
    final interactionManager = InteractionManager();

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º List<dynamic> –≤ List<Map<String, dynamic>>
    final List<Map<String, dynamic>> newsList = _news.map((item) {
      if (item is Map<String, dynamic>) {
        return item;
      } else {
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ Map, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
        return {'id': item.toString(), 'isLiked': false, 'isBookmarked': false};
      }
    }).toList();

    interactionManager.bulkUpdatePostStates(newsList);
  }

  bool _containsNewsWithId(String newsId) {
    return _news.any((item) => item['id'].toString() == newsId);
  }

  void updateNews(int index, Map<String, dynamic> updatedNews) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final originalNews = _news[index] as Map<String, dynamic>;
        final preservedFields = {
          'id': originalNews['id'],
          'author_name': originalNews['author_name'],
          'created_at': originalNews['created_at'],
          'likes': originalNews['likes'],
          'comments': originalNews['comments'],
          'isLiked': originalNews['isLiked'],
          'isBookmarked': originalNews['isBookmarked'],
          'isFollowing': originalNews['isFollowing'],
          'tag_color': originalNews['tag_color'],
        };

        _news[index] = {
          ...preservedFields,
          ...updatedNews,
          'hashtags': _parseHashtags(updatedNews['hashtags'] ?? originalNews['hashtags']),
          'user_tags': updatedNews['user_tags'] ?? originalNews['user_tags'],
        };

        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  void addCommentToNews(String newsId, Map<String, dynamic> comment) {
    _safeOperation(() {
      final index = _news.indexWhere((item) => item['id'].toString() == newsId);
      if (index != -1) {
        final newsItem = _news[index] as Map<String, dynamic>;

        if (newsItem['comments'] == null) {
          newsItem['comments'] = [];
        }

        final completeComment = {
          ...comment,
          'time': comment['time'] ?? DateTime.now().toIso8601String(),
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        (newsItem['comments'] as List).insert(0, completeComment);
        _safeNotifyListeners();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        _saveNewsToStorage();

        print('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –Ω–æ–≤–æ—Å—Ç–∏ $newsId');
      }
    });
  }

  int findNewsIndexById(String newsId) {
    return _news.indexWhere((item) => item['id'].toString() == newsId);
  }

  void updateNewsComments(String newsId, List<dynamic> comments) {
    _safeOperation(() {
      final index = findNewsIndexById(newsId);
      if (index != -1) {
        final newsItem = _news[index] as Map<String, dynamic>;
        _news[index] = {
          ...newsItem,
          'comments': comments,
        };
        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  void removeCommentFromNews(int index, String commentId) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;

        if (newsItem['comments'] != null) {
          final commentsList = newsItem['comments'] as List;
          final initialLength = commentsList.length;

          commentsList.removeWhere((comment) =>
          comment['id'] == commentId
          );

          if (commentsList.length < initialLength) {
            _safeNotifyListeners();
            _saveNewsToStorage();
            print('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π $commentId —É–¥–∞–ª–µ–Ω');
          }
        }
      }
    });
  }

  // –ó–ê–ú–ï–ù–ò–¢–ï –º–µ—Ç–æ–¥ removeNews –Ω–∞ —ç—Ç–æ—Ç:
  void removeNews(int index) async {
    if (_isDisposed) return;

    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;
        final newsId = newsItem['id'].toString();
        final isChannelPost = newsItem['is_channel_post'] == true;

        print('üóëÔ∏è Removing news from NewsProvider: $newsId (channel: $isChannelPost)');

        try {
          // –¢–æ–ª—å–∫–æ –¥–ª—è API –ø–æ—Å—Ç–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ API
          if (!isChannelPost) {
            try {
              ApiService.deleteNews(newsId).catchError((e) {
                print('‚ö†Ô∏è API delete error (expected for local posts): $e');
              });
            } catch (e) {
              print('‚ö†Ô∏è API delete error (expected for local posts): $e');
            }
          }

          // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
          StorageService.removeLike(newsId);
          StorageService.removeBookmark(newsId);
          StorageService.removeUserTags(newsId);

          _news.removeAt(index);
          _safeNotifyListeners();

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
          _saveNewsToStorage();

          print('‚úÖ News removed from NewsProvider: $newsId');

        } catch (e) {
          print('‚ùå Error removing news from NewsProvider: $e');
          rethrow;
        }
      }
    });
  }

  Future<void> loadUserTags() async {
    if (_isDisposed) return;

    try {
      final loadedTags = await StorageService.loadUserTags();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö
      _safeOperation(() {
        for (var i = 0; i < _news.length; i++) {
          final newsItem = _news[i] as Map<String, dynamic>;
          final newsId = newsItem['id'].toString();

          if (loadedTags.containsKey(newsId)) {
            final newsTags = loadedTags[newsId]!;
            Map<String, String> updatedUserTags = {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'};

            if (newsTags['tags'] is Map) {
              final tagsMap = newsTags['tags'] as Map;
              updatedUserTags = tagsMap.map((key, value) =>
                  MapEntry(key.toString(), value.toString())
              );
            }

            _getTagColor(newsId, updatedUserTags).then((tagColor) {
              _safeOperation(() {
                _news[i] = {
                  ...newsItem,
                  'user_tags': updatedUserTags,
                  'tag_color': tagColor,
                };
                _safeNotifyListeners();
              });
            });
          }
        }
      });

      _safeNotifyListeners();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤: $e');
    }
  }

  void updateNewsHashtags(int index, List<String> hashtags) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;
        _news[index] = {
          ...newsItem,
          'hashtags': _parseHashtags(hashtags),
        };
        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  Map<String, String> _ensureStringStringMap(dynamic map) {
    if (map is Map<String, String>) {
      return map;
    }
    if (map is Map) {
      return map.map((key, value) => MapEntry(key.toString(), value.toString()));
    }
    return {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'};
  }

  void updateNewsUserTag(int index, String tagId, String newTagName, {Color? color}) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;
        final newsId = newsItem['id'].toString();

        final updatedUserTags = {
          ..._ensureStringStringMap(newsItem['user_tags'] ?? {}),
          tagId: newTagName,
        };

        final tagColor = color ?? Color(newsItem['tag_color'] ?? _generateColorFromId(newsId).value);

        final updatedNews = {
          ...newsItem,
          'user_tags': updatedUserTags,
          'tag_color': tagColor.value,
        };

        _news[index] = updatedNews;
        _safeNotifyListeners();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥ –∏ —Ü–≤–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        StorageService.updateUserTag(newsId, tagId, newTagName, color: tagColor.value);
        _saveNewsToStorage();
      }
    });
  }

  // –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
  List<dynamic> searchNews(String query) {
    if (_isDisposed) return [];
    if (query.isEmpty) return _news;

    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      final title = newsItem['title']?.toString().toLowerCase() ?? '';
      final description = newsItem['description']?.toString().toLowerCase() ?? '';
      final hashtags = (newsItem['hashtags'] is List
          ? (newsItem['hashtags'] as List).join(' ').toLowerCase()
          : '');
      final author = newsItem['author_name']?.toString().toLowerCase() ?? '';
      final userTags = (newsItem['user_tags'] is Map
          ? (newsItem['user_tags'] as Map).values.join(' ').toLowerCase()
          : '');

      return title.contains(query.toLowerCase()) ||
          description.contains(query.toLowerCase()) ||
          hashtags.contains(query.toLowerCase()) ||
          author.contains(query.toLowerCase()) ||
          userTags.contains(query.toLowerCase());
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  List<dynamic> getBookmarkedNews() {
    if (_isDisposed) return [];
    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      return newsItem['isBookmarked'] == true;
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (–ª–∞–π–∫–æ–≤ > 5)
  List<dynamic> getPopularNews() {
    if (_isDisposed) return [];
    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      return (newsItem['likes'] ?? 0) > 5;
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  List<dynamic> getMyNews(String userName) {
    if (_isDisposed) return [];
    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      return newsItem['author_name'] == userName;
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ ID
  Map<String, dynamic>? getNewsById(String id) {
    if (_isDisposed) return null;
    try {
      return _news.firstWhere(
            (item) => (item as Map<String, dynamic>)['id'].toString() == id,
      ) as Map<String, dynamic>?;
    } catch (e) {
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
  List<dynamic> getFollowedNews() {
    if (_isDisposed) return [];
    return _news.where((item) {
      final newsItem = item as Map<String, dynamic>;
      return newsItem['isFollowing'] == true;
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –æ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤/–∫–∞–Ω–∞–ª–æ–≤
  Future<List<dynamic>> getFollowedContent() async {
    if (_isDisposed) return [];
    try {
      final followedIds = await StorageService.loadFollows();
      return _news.where((item) {
        try {
          final newsItem = item as Map<String, dynamic>;
          final itemId = newsItem['id']?.toString() ?? '';
          return followedIds.contains(itemId);
        } catch (e) {
          print('Error checking follow for item: $e');
          return false;
        }
      }).toList();
    } catch (e) {
      print('Error loading followed content: $e');
      return [];
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
  void incrementNewsViews(int index) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news[index] as Map<String, dynamic>;
        final currentViews = newsItem['views'] ?? 0;

        _news[index] = {
          ...newsItem,
          'views': currentViews + 1,
        };

        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Map<String, int> getStats() {
    if (_isDisposed) return {'total_news': 0, 'total_likes': 0, 'total_comments': 0, 'bookmarked_count': 0, 'liked_count': 0};

    final totalNews = _news.length;

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è fold
    final totalLikes = _news.fold<int>(0, (int sum, item) => sum + ((item['likes'] as int?) ?? 0));
    final totalComments = _news.fold<int>(0, (int sum, item) {
      final comments = item['comments'] as List? ?? [];
      return sum + comments.length;
    });

    final bookmarkedCount = _news.where((item) => item['isBookmarked'] == true).length;
    final likedCount = _news.where((item) => item['isLiked'] == true).length;

    return {
      'total_news': totalNews,
      'total_likes': totalLikes,
      'total_comments': totalComments,
      'bookmarked_count': bookmarkedCount,
      'liked_count': likedCount,
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
  bool containsNews(String newsId) {
    if (_isDisposed) return false;
    return _news.any((item) => item['id'].toString() == newsId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ ID
  int getNewsIndexById(String newsId) {
    if (_isDisposed) return -1;
    return _news.indexWhere((item) => item['id'].toString() == newsId);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–æ–≤–æ—Å—Ç–∏
  void patchNews(int index, Map<String, dynamic> partialUpdates) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final currentNews = _news[index] as Map<String, dynamic>;
        _news[index] = {
          ...currentNews,
          ...partialUpdates,
        };
        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
  void moveNewsToTop(int index) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final newsItem = _news.removeAt(index);
        _news.insert(0, newsItem);
        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
  void duplicateNews(int index) {
    _safeOperation(() {
      if (index >= 0 && index < _news.length) {
        final originalNews = _news[index] as Map<String, dynamic>;
        final duplicatedNews = {
          ...originalNews,
          'id': 'dup-${DateTime.now().millisecondsSinceEpoch}-${originalNews['id']}',
          'created_at': DateTime.now().toIso8601String(),
          'likes': 0,
          'comments': [],
          'isLiked': false,
          'isBookmarked': false,
        };

        _news.insert(index + 1, duplicatedNews);
        _safeNotifyListeners();
        _saveNewsToStorage();
      }
    });
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
  void sortByDate() {
    _safeOperation(() {
      _news.sort((a, b) {
        final dateA = DateTime.parse(a['created_at'] ?? '');
        final dateB = DateTime.parse(b['created_at'] ?? '');
        return dateB.compareTo(dateA);
      });
      _safeNotifyListeners();
      _saveNewsToStorage();
    });
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ª–∞–π–∫–∞–º
  void sortByLikes() {
    _safeOperation(() {
      _news.sort((a, b) {
        final likesA = a['likes'] ?? 0;
        final likesB = b['likes'] ?? 0;
        return likesB.compareTo(likesA);
      });
      _safeNotifyListeners();
      _saveNewsToStorage();
    });
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> clearAllData() async {
    if (_isDisposed) return;

    _safeOperation(() {
      _news = [];
      _isLoading = false;
      _errorMessage = null;
      _profileImageUrl = null;
      _profileImageFile = null;
      _safeNotifyListeners();
    });

    await StorageService.clearAllData();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  void updateMultipleNews(List<Map<String, dynamic>> updatedNewsList) {
    _safeOperation(() {
      for (final updatedNews in updatedNewsList) {
        final newsId = updatedNews['id']?.toString();
        if (newsId != null) {
          final index = _news.indexWhere((item) =>
          (item as Map<String, dynamic>)['id'].toString() == newsId
          );

          if (index != -1) {
            _news[index] = {
              ..._news[index],
              ...updatedNews,
            };
          }
        }
      }

      _safeNotifyListeners();
      _saveNewsToStorage();
    });
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  Future<void> restoreFromBackup(List<dynamic> backupData) async {
    if (_isDisposed) return;

    _safeOperation(() {
      _news = backupData;
      _safeNotifyListeners();
    });
    await _saveNewsToStorage();
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  List<dynamic> createBackup() {
    if (_isDisposed) return [];
    return List<dynamic>.from(_news);
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
  void removeProfileImage() {
    _safeOperation(() {
      _profileImageUrl = null;
      _profileImageFile = null;
      _safeNotifyListeners();
    });

    // –û—á–∏—â–∞–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    StorageService.saveProfileImageUrl(null);
    StorageService.saveProfileImageFilePath(null);

    print('‚úÖ Profile image removed');
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
  bool hasProfileImage() {
    if (_isDisposed) return false;
    return _profileImageUrl != null || _profileImageFile != null;
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Ñ–∞–π–ª–∞)
  dynamic getCurrentProfileImage() {
    if (_isDisposed) return null;
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Ñ–∞–π–ª–∞, –∑–∞—Ç–µ–º URL
    if (_profileImageFile != null) return _profileImageFile;
    if (_profileImageUrl != null && _profileImageUrl!.isNotEmpty) return _profileImageUrl;
    return null;
  }

  // –î–û–ë–ê–í–ò–¢–ï –í –ö–õ–ê–°–° NewsProvider:

// –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É
  List<dynamic> getContentByType(String contentType) {
    if (_isDisposed) return [];

    switch (contentType) {
      case 'all':
        return _news;
      case 'channel_posts':
        return _news.where((item) => item['is_channel_post'] == true).toList();
      case 'regular_posts':
        return _news.where((item) => item['is_channel_post'] != true).toList();
      case 'popular':
        return getPopularNews();
      case 'bookmarked':
        return getBookmarkedNews();
      default:
        return _news;
    }
  }

// –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –±–∞—Ç—á–µ–º
  void updateNewsBatch(List<Map<String, dynamic>> updates) {
    _safeOperation(() {
      for (final update in updates) {
        final newsId = update['id']?.toString();
        if (newsId != null) {
          final index = findNewsIndexById(newsId);
          if (index != -1) {
            _news[index] = {
              ..._news[index],
              ...update,
            };
          }
        }
      }
      _safeNotifyListeners();
      _saveNewsToStorage();
    });
  }

// –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  bool hasDuplicate(String newsId) {
    if (_isDisposed) return false;
    return _news.any((item) => item['id'].toString() == newsId);
  }

// –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  List<dynamic> getLatestNews({int count = 10}) {
    if (_isDisposed) return [];

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
    final sortedNews = List<dynamic>.from(_news)
      ..sort((a, b) {
        final dateA = DateTime.tryParse(a['created_at'] ?? '') ?? DateTime(0);
        final dateB = DateTime.tryParse(b['created_at'] ?? '') ?? DateTime(0);
        return dateB.compareTo(dateA);
      });

    return sortedNews.take(count).toList();
  }

// –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
  Map<String, int> getPeriodStats(Duration period) {
    if (_isDisposed) return {};

    final cutoffTime = DateTime.now().subtract(period);
    final periodNews = _news.where((item) {
      final createdAt = DateTime.tryParse(item['created_at'] ?? '');
      return createdAt != null && createdAt.isAfter(cutoffTime);
    }).toList();

    return {
      'count': periodNews.length,
      'total_likes': periodNews.fold<int>(
        0,
            (sum, item) => sum + ((item['likes'] ?? 0) as num).toInt(),
      ),
      'total_comments': periodNews.fold<int>(
        0,
            (sum, item) {
          final comments = item['comments'] as List? ?? [];
          return sum + comments.length;
        },
      ),
    };
  }

  @override
  void dispose() {
    _isDisposed = true;
    super.dispose();
  }
}