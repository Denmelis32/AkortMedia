import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../services/api_service.dart';
import '../user_provider.dart';

class NewsProvider with ChangeNotifier {
  List<dynamic> _news = [];
  bool _isLoading = true;
  String? _errorMessage;
  bool _serverAvailable = true;
  bool _isRefreshing = false;

  final UserProvider userProvider;

  List<dynamic> get news => _news;
  bool get isLoading => _isLoading;
  bool get isRefreshing => _isRefreshing;
  String? get errorMessage => _errorMessage;
  bool get serverAvailable => _serverAvailable;

  NewsProvider({required this.userProvider}) {
    _initialize();
  }

  void _initialize() async {
    print('‚úÖ NewsProvider initialized with UserProvider: ${userProvider.userName}');
    await loadNews();
  }

  // üéØ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó YDB
  Future<void> loadNews() async {
    try {
      _setLoading(true);
      _setError(null);

      print('üåê Loading news from YDB for user: ${userProvider.userName}');

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      _serverAvailable = await ApiService.testConnection();
      print('üîó Server available: $_serverAvailable');

      if (_serverAvailable) {
        // üéØ –ü–†–ï–ñ–î–ï –ß–ï–ú –ó–ê–ì–†–£–ñ–ê–¢–¨ –ù–û–í–û–°–¢–ò, –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        if (userProvider.isLoggedIn) {
          print('üë§ Pre-syncing user data...');
          await userProvider.syncWithServer();
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ YDB
        final news = await ApiService.getNews(limit: 50);
        await _processServerNews(news);
      } else {
        // –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º
        await _loadLocalNews();
        _setError('–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ.');
      }

    } catch (e) {
      print('‚ùå Failed to load news from YDB: $e');
      await _loadLocalNews();
      _setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${e.toString()}');
    } finally {
      _setLoading(false);
    }
  }

  // üéØ –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –° –°–ï–†–í–ï–†–ê
  // üéØ –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –° –°–ï–†–í–ï–†–ê
  Future<void> _processServerNews(List<dynamic> serverNews) async {
    try {
      print('üîÑ Processing ${serverNews.length} news items from YDB');

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (userProvider.isLoggedIn) {
        print('üë§ User is logged in, syncing with server...');
        await userProvider.syncWithServer();
      }

      // üéØ –ü–û–õ–£–ß–ê–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
      List<String> userLikes = [];
      List<String> userBookmarks = [];
      List<String> userReposts = [];

      if (_serverAvailable && userProvider.isLoggedIn) {
        userLikes = await ApiService.syncUserLikes();
        userBookmarks = await ApiService.syncUserBookmarks();
        userReposts = await ApiService.syncUserReposts();

        print('‚ù§Ô∏è Applying ${userLikes.length} user likes to news feed');
        print('üîñ Applying ${userBookmarks.length} user bookmarks to news feed');
        print('üîÅ Applying ${userReposts.length} user reposts to news feed');
      }

      final List<Map<String, dynamic>> updatedNews = [];

      for (final item in serverNews) {
        try {
          final safeItem = _ensureSafeTypes(item);

          // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
          final id = _getSafeString(safeItem['id']);
          final title = _getSafeString(safeItem['title']);

          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          if (id.isEmpty || id == 'unknown') {
            print('‚ö†Ô∏è Skipping invalid post ID: "$id"');
            continue;
          }

          if (title.isEmpty) {
            print('‚ö†Ô∏è Skipping post with empty title, ID: $id');
            continue;
          }

          // üéØ –ü–†–û–í–ï–†–Ø–ï–ú –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
          final bool isUserLiked = userLikes.contains(id);
          final bool isUserBookmarked = userBookmarks.contains(id);
          final bool isUserReposted = userReposts.contains(id);

          // üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó YDB
          final int serverLikesCount = _getSafeInt(safeItem['likes_count'] ?? safeItem['likes']);
          final int serverRepostsCount = _getSafeInt(safeItem['reposts_count'] ?? safeItem['reposts']);
          final int serverCommentsCount = _getSafeInt(safeItem['comments_count']);
          final int serverBookmarksCount = _getSafeInt(safeItem['bookmarks_count']);

          // üéØ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ò–ú–Ø –ê–í–¢–û–†–ê - –µ—Å–ª–∏ –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"
          final authorName = _getSafeString(safeItem['author_name']);
          final finalAuthorName = authorName.isNotEmpty ? authorName : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä';

          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
          final Map<String, dynamic> newsItem = <String, dynamic>{
            'id': id,
            'title': title,
            'content': _getSafeString(safeItem['content']) ?? '',
            'author_id': _getSafeString(safeItem['author_id']) ?? 'unknown',
            'author_name': finalAuthorName, // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ò–ú–Ø
            'author_avatar': _getSafeString(safeItem['author_avatar']) ?? '',
            'hashtags': _parseList(safeItem['hashtags']),
            'is_repost': _getSafeBool(safeItem['is_repost']),

            // üéØ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –° –£–ß–ï–¢–û–ú –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –ò–ó YDB
            'likes_count': serverLikesCount,
            'comments_count': serverCommentsCount,
            'reposts_count': serverRepostsCount,
            'bookmarks_count': serverBookmarksCount,

            'created_at': safeItem['created_at'] ?? DateTime.now().toIso8601String(),
            'updated_at': safeItem['updated_at'] ?? DateTime.now().toIso8601String(),

            // üéØ –ü–†–ê–í–ò–õ–¨–ù–´–ï –§–õ–ê–ì–ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ô
            'isLiked': isUserLiked,
            'isBookmarked': isUserBookmarked,
            'isReposted': isUserReposted,

            'comments': [],
            'source': 'YDB',
          };

          updatedNews.add(newsItem);
          print('‚úÖ Added post: "$title" (ID: $id) - üë§ $finalAuthorName');
          print('   Content: ${newsItem['content']}');
          print('   Hashtags: ${newsItem['hashtags']}');

        } catch (e) {
          print('‚ùå Error processing news item: $e');
          continue;
        }
      }

      _news = updatedNews;
      await _saveNewsToLocal(_news);
      _safeNotifyListeners();

      print('‚úÖ Processed ${_news.length} news items from YDB with real interaction data');

    } catch (e) {
      print('‚ùå Error processing news from YDB: $e');
      _news = <Map<String, dynamic>>[];
      await _saveNewsToLocal(_news);
      _safeNotifyListeners();
    }
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•
  Future<void> refreshNews() async {
    if (_isRefreshing) return;

    try {
      _setRefreshing(true);
      print('üîÑ Manual refresh triggered for user: ${userProvider.userId}');

      _serverAvailable = await ApiService.testConnection();

      if (_serverAvailable) {
        final news = await ApiService.getNews(limit: 50);
        await _processServerNews(news);
        _setError(null);
      } else {
        _setError('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã.');
      }
    } catch (e) {
      print('‚ùå Refresh failed: $e');
      _setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${e.toString()}');
    } finally {
      _setRefreshing(false);
    }
  }

  // üéØ –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–°–¢–ò –í YDB - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  // üéØ –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–°–¢–ò –í YDB - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –†–ï–ê–õ–¨–ù–´–ú –ò–ú–ï–ù–ï–ú
  Future<void> addNews(Map<String, dynamic> newsData) async {
    try {
      if (!userProvider.isLoggedIn) {
        throw Exception('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      await userProvider.syncWithServer();

      print('üéØ Creating post in YDB as: ${userProvider.userName}');

      // üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó PROVIDER
      final String authorName = userProvider.userName.isNotEmpty
          ? userProvider.userName
          : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

      final Map<String, dynamic> authorData = {
        'author_id': userProvider.userId,
        'author_name': authorName, // ‚úÖ –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –†–ï–ê–õ–¨–ù–û–ï –ò–ú–Ø
        'author_avatar': userProvider.profileImageUrl ?? '',
      };

      // üéØ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –° –í–°–ï–ú–ò –ü–û–õ–Ø–ú–ò
      final Map<String, dynamic> completeNewsData = <String, dynamic>{
        'title': _getSafeString(newsData['title']),
        'content': _getSafeString(newsData['content'] ?? ''),
        'hashtags': _parseList(newsData['hashtags']),
        ...authorData, // ‚úÖ –í–ö–õ–Æ–ß–ê–ï–ú –î–ê–ù–ù–´–ï –ê–í–¢–û–†–ê
      };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (completeNewsData['title']?.isEmpty ?? true) {
        throw Exception('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      print('üìù News data for YDB:');
      print('   üìù Title: ${completeNewsData['title']}');
      print('   üìã Content: ${completeNewsData['content']}');
      print('   üè∑Ô∏è Hashtags: ${completeNewsData['hashtags']}');
      print('   üë§ Author: ${completeNewsData['author_name']}'); // ‚úÖ –î–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è
      print('   üÜî Author ID: ${completeNewsData['author_id']}');

      Map<String, dynamic> createdNews;

      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      try {
        print('üåê Creating news on YDB server...');
        createdNews = await ApiService.createNews(completeNewsData);
        print('‚úÖ News created on YDB server: ${createdNews['id']}');

      } catch (serverError) {
        print('‚ùå YDB Server creation failed: $serverError');
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${serverError.toString()}');
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ª–µ–Ω—Ç—É
      final Map<String, dynamic> safeNews = _ensureSafeTypes(createdNews);

      // üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –í–°–ï –ù–ï–û–ë–•–û–î–ò–ú–´–ï –ü–û–õ–Ø –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
      final Map<String, dynamic> formattedNews = {
        'id': _getSafeString(safeNews['id']),
        'title': _getSafeString(safeNews['title']),
        'content': _getSafeString(safeNews['content'] ?? ''),
        'author_id': _getSafeString(safeNews['author_id'] ?? userProvider.userId),
        'author_name': _getSafeString(safeNews['author_name'] ?? authorName), // ‚úÖ –†–ï–ó–ï–†–í–ù–û–ï –ò–ú–Ø
        'author_avatar': _getSafeString(safeNews['author_avatar'] ?? ''),
        'hashtags': _parseList(safeNews['hashtags']),
        'likes_count': _getSafeInt(safeNews['likes_count'] ?? 0),
        'comments_count': _getSafeInt(safeNews['comments_count'] ?? 0),
        'reposts_count': _getSafeInt(safeNews['reposts_count'] ?? 0),
        'bookmarks_count': _getSafeInt(safeNews['bookmarks_count'] ?? 0),
        'isLiked': false,
        'isBookmarked': false,
        'isReposted': false,
        'is_repost': false,
        'created_at': _getSafeString(safeNews['created_at'] ?? DateTime.now().toIso8601String()),
        'updated_at': _getSafeString(safeNews['updated_at'] ?? DateTime.now().toIso8601String()),
        'comments': [],
        'source': 'YDB',
      };

      _news.insert(0, formattedNews);
      await _saveNewsToLocal(_news);

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      userProvider.updateStats(<String, int>{
        'posts': (userProvider.stats['posts'] ?? 0) + 1,
      });

      _safeNotifyListeners();
      print('‚úÖ Post created successfully in YDB and added to feed');

    } catch (e) {
      print('‚ùå Error creating news in YDB: $e');
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${e.toString()}');
    }
  }



  // üéØ –õ–ê–ô–ö–ò
  Future<void> toggleLike(String postId) async {
    final int index = _findNewsIndexById(postId);
    if (index == -1) {
      print('‚ùå Post not found in YDB: $postId');
      return;
    }

    try {
      final Map<String, dynamic> post = _ensureSafeTypes(_news[index]);
      final bool isLiked = _getSafeBool(post['isLiked']);
      final int currentLikes = _getSafeInt(post['likes_count'] ?? post['likes']);

      print('üéØ Toggle like in YDB: $postId, current: $isLiked, likes: $currentLikes');

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      _news[index] = <String, dynamic>{
        ...post,
        'isLiked': !isLiked,
        'likes_count': isLiked ? currentLikes - 1 : currentLikes + 1,
      };

      _safeNotifyListeners();
      await _saveNewsToLocal(_news);

      if (_serverAvailable) {
        try {
          if (!isLiked) {
            await ApiService.likeNews(postId);
            print('‚úÖ Like sent to YDB: $postId');
          } else {
            await ApiService.unlikeNews(postId);
            print('‚úÖ Unlike sent to YDB: $postId');
          }

          await refreshNews();

        } catch (e) {
          print('‚ùå Like sync error with YDB: $e');
          // –û—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
          _news[index] = post;
          _safeNotifyListeners();
          await _saveNewsToLocal(_news);
          throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–∞–π–∫ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
        }
      }
    } catch (e) {
      print('‚ùå Toggle like error: $e');
      throw e;
    }
  }

  // üéØ –ó–ê–ö–õ–ê–î–ö–ò
  Future<void> toggleBookmark(String postId) async {
    final int index = _findNewsIndexById(postId);
    if (index == -1) {
      print('‚ùå Post not found in YDB: $postId');
      return;
    }

    try {
      final Map<String, dynamic> post = _ensureSafeTypes(_news[index]);
      final bool isBookmarked = _getSafeBool(post['isBookmarked']);

      print('üéØ Toggle bookmark in YDB: $postId, current: $isBookmarked');

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      _news[index] = <String, dynamic>{
        ...post,
        'isBookmarked': !isBookmarked,
      };

      _safeNotifyListeners();
      await _saveNewsToLocal(_news);

      if (_serverAvailable) {
        try {
          if (!isBookmarked) {
            await ApiService.bookmarkNews(postId);
            print('‚úÖ Bookmark sent to YDB: $postId');
          } else {
            await ApiService.unbookmarkNews(postId);
            print('‚úÖ Unbookmark sent to YDB: $postId');
          }

          await refreshNews();

        } catch (e) {
          print('‚ùå Bookmark sync error with YDB: $e');
          _news[index] = post;
          _safeNotifyListeners();
          await _saveNewsToLocal(_news);
          throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–ª–∞–¥–∫—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
        }
      }
    } catch (e) {
      print('‚ùå Toggle bookmark error: $e');
      throw e;
    }
  }

  // üéØ –†–ï–ü–û–°–¢–´
  Future<void> toggleRepost(String postId) async {
    final int index = _findNewsIndexById(postId);
    if (index == -1) {
      print('‚ùå Post not found in YDB: $postId');
      return;
    }

    try {
      final Map<String, dynamic> post = _ensureSafeTypes(_news[index]);
      final bool isReposted = _getSafeBool(post['isReposted']);
      final int currentReposts = _getSafeInt(post['reposts_count'] ?? post['reposts']);

      print('üéØ Toggle repost in YDB: $postId, current: $isReposted, reposts: $currentReposts');

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      _news[index] = <String, dynamic>{
        ...post,
        'isReposted': !isReposted,
        'reposts_count': isReposted ? currentReposts - 1 : currentReposts + 1,
      };

      _safeNotifyListeners();
      await _saveNewsToLocal(_news);

      if (_serverAvailable) {
        try {
          if (!isReposted) {
            await ApiService.repostNews(postId);
            print('‚úÖ Repost sent to YDB: $postId');
          } else {
            await ApiService.unrepostNews(postId);
            print('‚úÖ Unrepost sent to YDB: $postId');
          }

          await refreshNews();

        } catch (e) {
          print('‚ùå Repost sync error with YDB: $e');
          _news[index] = post;
          _safeNotifyListeners();
          await _saveNewsToLocal(_news);
          throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ—Å—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
        }
      }
    } catch (e) {
      print('‚ùå Toggle repost error: $e');
      throw e;
    }
  }

  // üéØ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  // üéØ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –†–ï–ê–õ–¨–ù–´–ú –ò–ú–ï–ù–ï–ú
  Future<void> addComment(String postId, String text) async {
    final int index = _findNewsIndexById(postId);
    if (index == -1) {
      print('‚ùå Post not found in YDB for comment: $postId');
      return;
    }

    try {
      final Map<String, dynamic> post = _ensureSafeTypes(_news[index]);
      final int currentCommentsCount = _getSafeInt(post['comments_count']);

      print('üí¨ Adding comment to YDB post: $postId');

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      _news[index] = <String, dynamic>{
        ...post,
        'comments_count': currentCommentsCount + 1,
      };

      _safeNotifyListeners();
      await _saveNewsToLocal(_news);

      if (_serverAvailable) {
        try {
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–´–ó–û–í - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await ApiService.addComment(
            postId,
            text,
            userProvider.userName.isNotEmpty ? userProvider.userName : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          );

          print('‚úÖ Comment added successfully to YDB: $postId');
          await refreshNews();

        } catch (e) {
          print('‚ùå Comment sync error with YDB: $e');
          _news[index] = post;
          _safeNotifyListeners();
          await _saveNewsToLocal(_news);
          throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: ${e.toString()}');
        }
      }
    } catch (e) {
      print('‚ùå Add comment error: $e');
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${e.toString()}');
    }
  }

  // üéØ –õ–û–ö–ê–õ–¨–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï
  Future<void> _loadLocalNews() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final cachedNews = prefs.getString('cached_news');

      if (cachedNews != null) {
        final decodedNews = json.decode(cachedNews);
        if (decodedNews is List) {
          _news = decodedNews.map((item) => _ensureSafeTypes(item)).toList();
          print('‚úÖ Loaded ${_news.length} cached news items');
        } else {
          _news = <Map<String, dynamic>>[];
        }
      } else {
        _news = <Map<String, dynamic>>[];
        print('‚ÑπÔ∏è No cached news found');
      }
    } catch (e) {
      print('‚ùå Error loading local news: $e');
      _news = <Map<String, dynamic>>[];
    }
  }

  Future<void> _saveNewsToLocal(List<dynamic> news) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('cached_news', json.encode(news));
      print('üíæ Saved ${news.length} news to local storage');
    } catch (e) {
      print('‚ùå Error saving news to local: $e');
    }
  }

  // üéØ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  Map<String, dynamic> _ensureSafeTypes(dynamic data) {
    if (data == null) return <String, dynamic>{};
    if (data is Map<String, dynamic>) return data;
    if (data is Map<dynamic, dynamic>) {
      final Map<String, dynamic> result = <String, dynamic>{};
      data.forEach((key, value) {
        final String safeKey = key.toString();
        result[safeKey] = value;
      });
      return result;
    }
    return <String, dynamic>{};
  }

  bool _getSafeBool(dynamic value) {
    if (value == null) return false;
    if (value is bool) return value;
    if (value is String) return value.toLowerCase() == 'true' || value == '1';
    if (value is num) return value != 0;
    return false;
  }

  int _getSafeInt(dynamic value) {
    if (value == null) return 0;
    if (value is int) return value;
    if (value is double) return value.toInt();
    if (value is String) return int.tryParse(value) ?? 0;
    if (value is bool) return value ? 1 : 0;
    return 0;
  }

  String _getSafeString(dynamic value) {
    if (value == null) return '';
    if (value is String) return value;
    return value.toString();
  }

  List<dynamic> _parseList(dynamic value) {
    if (value == null) return [];
    if (value is List) return value;
    if (value is String) {
      try {
        final parsed = json.decode(value);
        if (parsed is List) return parsed;
      } catch (e) {
        if (value.contains(',')) {
          return value.split(',').map((tag) => tag.trim()).where((tag) => tag.isNotEmpty).toList();
        }
        return value.isNotEmpty ? [value] : [];
      }
    }
    return [];
  }

  Map<String, dynamic> _parseMap(dynamic value) {
    if (value is Map) return value.cast<String, dynamic>();
    if (value is String) {
      try {
        return Map<String, dynamic>.from(json.decode(value));
      } catch (e) {
        return {};
      }
    }
    return {};
  }

  int _findNewsIndexById(String newsId) {
    return _news.indexWhere((news) {
      final Map<String, dynamic> safeNews = _ensureSafeTypes(news);
      return safeNews['id']?.toString() == newsId;
    });
  }

  void clearError() {
    _setError(null);
  }

  void _setLoading(bool loading) {
    _isLoading = loading;
    _safeNotifyListeners();
  }

  void _setRefreshing(bool refreshing) {
    _isRefreshing = refreshing;
    _safeNotifyListeners();
  }

  void _setError(String? message) {
    _errorMessage = message;
    _safeNotifyListeners();
  }

  void _safeNotifyListeners() {
    if (hasListeners) {
      notifyListeners();
    }
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ü–û–°–¢–ê
  void updatePostCommentsCount(String postId) {
    final int index = _findNewsIndexById(postId);
    if (index != -1) {
      final Map<String, dynamic> post = _ensureSafeTypes(_news[index]);
      final int currentComments = _getSafeInt(post['comments_count']);

      _news[index] = <String, dynamic>{
        ...post,
        'comments_count': currentComments + 1,
      };

      _safeNotifyListeners();
      _saveNewsToLocal(_news);
      print('‚úÖ Updated comments count for post: $postId');
    }
  }

  // üéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  Future<void> clearData() async {
    _news = <Map<String, dynamic>>[];
    _errorMessage = null;
    _safeNotifyListeners();

    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('cached_news');
      print('‚úÖ Cleared news data');
    } catch (e) {
      print('‚ùå Error clearing news data: $e');
    }
  }

  List<dynamic> getPostsByAuthor(String authorId) {
    return _news.where((post) {
      final Map<String, dynamic> safePost = _ensureSafeTypes(post);
      return safePost['author_id'] == authorId;
    }).toList();
  }

  Map<String, int> getFeedStats() {
    final totalPosts = _news.length;
    final totalLikes = _news.fold(0, (sum, post) {
      final safePost = _ensureSafeTypes(post);
      return sum + _getSafeInt(safePost['likes_count']);
    });
    final totalComments = _news.fold(0, (sum, post) {
      final safePost = _ensureSafeTypes(post);
      return sum + _getSafeInt(safePost['comments_count']);
    });

    return {
      'total_posts': totalPosts,
      'total_likes': totalLikes,
      'total_comments': totalComments,
    };
  }

  bool isUserPost(String postId) {
    final post = _findPostById(postId);
    if (post == null) return false;
    final authorId = _getSafeString(post['author_id']);
    return authorId == userProvider.userId;
  }

  Map<String, dynamic>? _findPostById(String postId) {
    final index = _findNewsIndexById(postId);
    return index != -1 ? _ensureSafeTypes(_news[index]) : null;
  }

  void updateServerStatus(bool available) {
    _serverAvailable = available;
    _safeNotifyListeners();
  }
}