// lib/providers/news_providers/news_storage_handler.dart
import '../../services/storage_service.dart';
import '../../services/api_service.dart';

class NewsStorageHandler {
  Future<List<dynamic>> loadNews() async {
    try {
      final cachedNews = await StorageService.loadNews();
      print('üìÇ Loaded ${cachedNews.length} news from storage');
      return cachedNews;
    } catch (e) {
      print('‚ùå Error loading news from storage: $e');
      return [];
    }
  }

  Future<void> saveNews(List<dynamic> news) async {
    try {
      print('üíæ Saving ${news.length} news to storage...');
      await StorageService.saveNews(news);
      print('‚úÖ News saved to storage');
    } catch (e) {
      print('‚ùå Error saving news to storage: $e');
    }
  }

  Future<void> removeNewsData(String newsId) async {
    try {
      StorageService.removeLike(newsId);
      StorageService.removeBookmark(newsId);
      StorageService.removeUserTags(newsId);

      // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã
      // –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–º–µ—é—Ç –ø—Ä–µ—Ñ–∏–∫—Å 'local-', —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ - –Ω–µ—Ç
      if (!newsId.startsWith('local-')) {
        try {
          await ApiService.deleteNews(newsId);
          print('‚úÖ News deleted from server: $newsId');
        } catch (e) {
          print('‚ö†Ô∏è API delete error (may be expected): $e');
        }
      } else {
        print('‚ÑπÔ∏è Local post, skipping server deletion: $newsId');
      }
    } catch (e) {
      print('‚ùå Error removing news data: $e');
    }
  }

  Future<void> removeAllData() async {
    try {
      await StorageService.clearAllData();
      print('‚úÖ All data cleared from storage');
    } catch (e) {
      print('‚ùå Error clearing all data: $e');
    }
  }

  Future<Map<String, dynamic>> loadUserData() async {
    try {
      final localLikes = await StorageService.loadLikes();
      final localBookmarks = await StorageService.loadBookmarks();
      final userTags = await StorageService.loadUserTags();

      return {
        'likes': localLikes,
        'bookmarks': localBookmarks,
        'userTags': userTags,
      };
    } catch (e) {
      print('‚ùå Error loading user data: $e');
      return {'likes': [], 'bookmarks': [], 'userTags': {}};
    }
  }
}