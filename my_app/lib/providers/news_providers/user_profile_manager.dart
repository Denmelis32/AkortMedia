// lib/providers/news_providers/user_profile_manager.dart
import 'dart:io';
import 'dart:ui';
import 'package:http/http.dart' as http;
import '../../services/storage_service.dart';
import '../../services/api_service.dart';
import '../../services/image_upload_service.dart';

class UserProfile {
  final String id;
  final String userName;
  final String userEmail;
  String? profileImageUrl;
  File? profileImageFile;
  String? coverImageUrl;
  File? coverImageFile;
  DateTime? registrationDate;
  Map<String, int> stats;

  UserProfile({
    required this.id,
    required this.userName,
    required this.userEmail,
    this.profileImageUrl,
    this.profileImageFile,
    this.coverImageUrl,
    this.coverImageFile,
    this.registrationDate,
    this.stats = const {},
  });

  UserProfile copyWith({
    String? userName,
    String? userEmail,
    String? profileImageUrl,
    File? profileImageFile,
    String? coverImageUrl,
    File? coverImageFile,
    Map<String, int>? stats,
  }) {
    return UserProfile(
      id: id,
      userName: userName ?? this.userName,
      userEmail: userEmail ?? this.userEmail,
      profileImageUrl: profileImageUrl ?? this.profileImageUrl,
      profileImageFile: profileImageFile ?? this.profileImageFile,
      coverImageUrl: coverImageUrl ?? this.coverImageUrl,
      coverImageFile: coverImageFile ?? this.coverImageFile,
      registrationDate: registrationDate,
      stats: stats ?? this.stats,
    );
  }
}

class UserProfileManager {
  final Map<String, UserProfile> _userProfiles = {};
  String? _currentUserId;
  Function()? _onProfileUpdated;

  String? get currentUserId => _currentUserId;
  String? get profileImageUrl => _getCurrentUser()?.profileImageUrl;
  File? get profileImageFile => _getCurrentUser()?.profileImageFile;
  String? get coverImageUrl => _getCurrentUser()?.coverImageUrl;
  File? get coverImageFile => _getCurrentUser()?.coverImageFile;

  void setOnProfileUpdated(Function()? callback) {
    _onProfileUpdated = callback;
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• –ü–†–û–§–ò–õ–Ø
  Future<void> loadProfileData() async {
    if (_currentUserId == null) return;

    print('üîÑ Loading profile data for user: $_currentUserId');

    try {
      // üéØ –ü–ï–†–í–û–ï: –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
      try {
        final serverProfile = await ApiService.getUserProfile(_currentUserId!);
        if (serverProfile != null) {
          _updateProfileFromServer(_currentUserId!, serverProfile);
          print('‚úÖ Profile loaded from server for: $_currentUserId');
          return;
        }
      } catch (e) {
        print('‚ö†Ô∏è Could not load profile from server: $e');
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      }

      // üéØ FALLBACK: –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await _loadUserProfileData(_currentUserId!);

    } catch (e) {
      print('‚ùå Error loading profile data: $e');
    }
  }

  dynamic getCurrentProfileImage() {
    if (_currentUserId == null) return null;
    final user = _userProfiles[_currentUserId!];
    if (user?.profileImageFile != null) return user!.profileImageFile;
    if (user?.profileImageUrl != null && user!.profileImageUrl!.isNotEmpty) return user.profileImageUrl;
    return null;
  }

  dynamic getCurrentCoverImage() {
    if (_currentUserId == null) return null;
    final user = _userProfiles[_currentUserId!];
    if (user?.coverImageFile != null) return user!.coverImageFile;
    if (user?.coverImageUrl != null && user!.coverImageUrl!.isNotEmpty) return user.coverImageUrl;
    return null;
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –£–î–ê–õ–ï–ù–ò–Ø –û–ë–õ–û–ñ–ö–ò
  Future<void> removeCoverImage() async {
    if (_currentUserId == null) return;

    final user = _userProfiles[_currentUserId!];
    if (user == null) return;

    _userProfiles[_currentUserId!] = user.copyWith(
      coverImageUrl: null,
      coverImageFile: null,
    );

    _notifyListeners();

    // üéØ –°–û–•–†–ê–ù–Ø–ï–ú –õ–û–ö–ê–õ–¨–ù–û –ò –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –° –°–ï–†–í–ï–†–û–ú
    await StorageService.saveCoverImageUrl(_currentUserId!, null);
    await StorageService.saveCoverImageFilePath(_currentUserId!, null);

    try {
      await ApiService.updateProfile({
        'coverImageUrl': null,
      });
      print('‚úÖ Cover image removed from server');
    } catch (e) {
      print('‚ùå Error removing cover image from server: $e');
    }
  }

  void setCurrentUser(String userId, String userName, String userEmail) {
    _currentUserId = userId;

    if (!_userProfiles.containsKey(userId)) {
      _userProfiles[userId] = UserProfile(
        id: userId,
        userName: userName,
        userEmail: userEmail,
        registrationDate: DateTime.now(),
        stats: {},
      );
      _loadUserProfileData(userId);
    }

    _notifyListeners();
  }

  UserProfile? _getCurrentUser() {
    if (_currentUserId == null) return null;
    return _userProfiles[_currentUserId!];
  }

  UserProfile? getUserProfile(String userId) {
    return _userProfiles[userId];
  }

  // üéØ –ú–ï–¢–û–î –î–õ–Ø –ü–û–ò–°–ö–ê –ü–†–û–§–ò–õ–Ø –ü–û –ò–ú–ï–ù–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
  UserProfile? _getUserProfileByName(String userName) {
    for (final profile in _userProfiles.values) {
      if (profile.userName == userName) {
        return profile;
      }
    }
    return null;
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø URL –ê–í–ê–¢–ê–†–ö–ò
  Future<void> updateProfileImageUrl(String? url) async {
    if (_currentUserId == null) return;

    final user = _userProfiles[_currentUserId!];
    if (user == null) return;

    String? validatedUrl = await _validateImageUrl(url);

    _userProfiles[_currentUserId!] = user.copyWith(
      profileImageUrl: validatedUrl,
      profileImageFile: null,
    );

    _notifyListeners();

    // üéØ –°–û–•–†–ê–ù–Ø–ï–ú –õ–û–ö–ê–õ–¨–ù–û –ò –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ù–ê –°–ï–†–í–ï–†
    await StorageService.saveProfileImageUrl(_currentUserId!, validatedUrl);

    if (validatedUrl != null) {
      try {
        await ApiService.updateProfile({
          'profileImageUrl': validatedUrl,
        });
        print('‚úÖ Profile image URL synced with server: $validatedUrl');
      } catch (e) {
        print('‚ùå Error syncing profile image with server: $e');
      }
    } else {
      // –ï—Å–ª–∏ URL null, —É–¥–∞–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      try {
        await ApiService.updateProfile({
          'profileImageUrl': null,
        });
        print('‚úÖ Profile image removed from server');
      } catch (e) {
        print('‚ùå Error removing profile image from server: $e');
      }
    }

    await _loadUserProfileData(_currentUserId!);
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –§–ê–ô–õ–ê –ê–í–ê–¢–ê–†–ö–ò
  Future<void> updateProfileImageFile(File? file) async {
    if (_currentUserId == null) return;

    final user = _userProfiles[_currentUserId!];
    if (user == null) return;

    // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º UI —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
    _userProfiles[_currentUserId!] = user.copyWith(
      profileImageFile: file,
      profileImageUrl: null,
    );

    _notifyListeners();

    if (file != null) {
      final exists = await file.exists();
      if (exists) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        await StorageService.saveProfileImageFilePath(_currentUserId!, file.path);

        // üéØ –ó–ê–ì–†–£–ñ–ê–ï–ú –§–ê–ô–õ –ù–ê –°–ï–†–í–ï–†
        try {
          print('üîÑ Uploading profile image to server...');
          final imageUrl = await ImageUploadService.uploadUserAvatar(file, _currentUserId!);

          // –û–±–Ω–æ–≤–ª—è–µ–º URL –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
          _userProfiles[_currentUserId!] = user.copyWith(
            profileImageUrl: imageUrl,
            profileImageFile: null,
          );

          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
          await ApiService.updateProfile({
            'profileImageUrl': imageUrl,
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          await StorageService.saveProfileImageUrl(_currentUserId!, imageUrl);
          await StorageService.saveProfileImageFilePath(_currentUserId!, null);

          _notifyListeners();
          print('‚úÖ Profile image uploaded to server: $imageUrl');

        } catch (e) {
          print('‚ùå Error uploading profile image to server: $e');
          // –û—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∫–∞–∫ fallback
          _showUploadErrorNotification();
        }
      } else {
        _userProfiles[_currentUserId!] = user.copyWith(profileImageFile: null);
        await StorageService.saveProfileImageFilePath(_currentUserId!, null);
      }
    } else {
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
      await StorageService.saveProfileImageFilePath(_currentUserId!, null);

      // üéØ –£–î–ê–õ–Ø–ï–ú –ê–í–ê–¢–ê–†–ö–£ –ù–ê –°–ï–†–í–ï–†–ï
      try {
        await ApiService.updateProfile({
          'profileImageUrl': null,
        });
        print('‚úÖ Profile image removed from server');
      } catch (e) {
        print('‚ùå Error removing profile image from server: $e');
      }
    }

    await _loadUserProfileData(_currentUserId!);
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø URL –û–ë–õ–û–ñ–ö–ò
  Future<void> updateCoverImageUrl(String? url) async {
    if (_currentUserId == null) return;

    final user = _userProfiles[_currentUserId!];
    if (user == null) return;

    String? validatedUrl = await _validateImageUrl(url);

    _userProfiles[_currentUserId!] = user.copyWith(
      coverImageUrl: validatedUrl,
      coverImageFile: null,
    );

    _notifyListeners();

    await StorageService.saveCoverImageUrl(_currentUserId!, validatedUrl);

    if (validatedUrl != null) {
      try {
        await ApiService.updateProfile({
          'coverImageUrl': validatedUrl,
        });
        print('‚úÖ Cover image URL synced with server: $validatedUrl');
      } catch (e) {
        print('‚ùå Error syncing cover image with server: $e');
      }
    }

    await _loadUserProfileData(_currentUserId!);
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –§–ê–ô–õ–ê –û–ë–õ–û–ñ–ö–ò
  Future<void> updateCoverImageFile(File? file) async {
    if (_currentUserId == null) return;

    final user = _userProfiles[_currentUserId!];
    if (user == null) return;

    _userProfiles[_currentUserId!] = user.copyWith(
      coverImageFile: file,
      coverImageUrl: null,
    );

    _notifyListeners();

    if (file != null) {
      final exists = await file.exists();
      if (exists) {
        await StorageService.saveCoverImageFilePath(_currentUserId!, file.path);

        // üéØ TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –æ–±–ª–æ–∂–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        // final coverUrl = await ImageUploadService.uploadCoverImage(file, _currentUserId!);
        // await ApiService.updateProfile({'coverImageUrl': coverUrl});

      } else {
        _userProfiles[_currentUserId!] = user.copyWith(coverImageFile: null);
      }
    } else {
      await StorageService.saveCoverImageFilePath(_currentUserId!, null);
    }

    await _loadUserProfileData(_currentUserId!);
  }

  // üéØ –í–ê–õ–ò–î–ê–¶–ò–Ø URL –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
  Future<String?> _validateImageUrl(String? url) async {
    if (url == null || url.isEmpty) return null;

    try {
      final uri = Uri.parse(url);
      String validatedUrl = uri.hasScheme ? url : 'https://$url';

      final response = await http.head(Uri.parse(validatedUrl));
      if (response.statusCode != 200) {
        throw Exception('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${response.statusCode}');
      }

      return validatedUrl;
    } catch (e) {
      throw Exception('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: $e');
    }
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –ó–ê–ì–†–£–ó–ö–ò –õ–û–ö–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•
  Future<void> _loadUserProfileData(String userId) async {
    try {
      final savedUrl = await StorageService.loadProfileImageUrl(userId);
      final savedFilePath = await StorageService.loadProfileImageFilePath(userId);
      final savedCoverUrl = await StorageService.loadCoverImageUrl(userId);
      final savedCoverPath = await StorageService.loadCoverImageFilePath(userId);

      File? profileFile = await _getValidFile(savedFilePath);
      File? coverFile = await _getValidFile(savedCoverPath);

      if (_userProfiles.containsKey(userId)) {
        _userProfiles[userId] = _userProfiles[userId]!.copyWith(
          profileImageUrl: savedUrl,
          profileImageFile: profileFile,
          coverImageUrl: savedCoverUrl,
          coverImageFile: coverFile,
        );
      }

      _notifyListeners();
      print('‚úÖ Local profile data loaded for: $userId');
    } catch (e) {
      print('‚ùå Error loading local profile data: $e');
    }
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ò–ó –î–ê–ù–ù–´–• –°–ï–†–í–ï–†–ê
  void _updateProfileFromServer(String userId, Map<String, dynamic> serverData) {
    if (_userProfiles.containsKey(userId)) {
      final currentProfile = _userProfiles[userId]!;

      _userProfiles[userId] = currentProfile.copyWith(
        profileImageUrl: serverData['profileImageUrl'] ?? currentProfile.profileImageUrl,
        coverImageUrl: serverData['coverImageUrl'] ?? currentProfile.coverImageUrl,
        userName: serverData['name'] ?? currentProfile.userName,
        userEmail: serverData['email'] ?? currentProfile.userEmail,
        stats: serverData['stats'] ?? currentProfile.stats,
      );

      // üéØ –°–û–•–†–ê–ù–Ø–ï–ú –õ–û–ö–ê–õ–¨–ù–û –î–õ–Ø –û–§–§–õ–ê–ô–ù –î–û–°–¢–£–ü–ê
      if (serverData['profileImageUrl'] != null) {
        StorageService.saveProfileImageUrl(userId, serverData['profileImageUrl']);
      }
      if (serverData['coverImageUrl'] != null) {
        StorageService.saveCoverImageUrl(userId, serverData['coverImageUrl']);
      }

      _notifyListeners();
      print('‚úÖ Profile updated from server data for: $userId');
    }
  }

  Future<File?> _getValidFile(String? filePath) async {
    if (filePath == null || filePath.isEmpty) return null;

    final file = File(filePath);
    if (await file.exists()) {
      return file;
    } else {
      await StorageService.saveProfileImageFilePath(_currentUserId!, null);
      return null;
    }
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ê–í–ê–¢–ê–†–ö–ò
  String getUserAvatarUrl(String userId, String userName) {
    print('üîç UserProfileManager: Getting avatar for $userName ($userId)');

    // 1. –ò—â–µ–º –ø–æ userId
    UserProfile? userProfile = getUserProfile(userId);

    // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –∏—â–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
    if (userProfile == null && _currentUserId != null) {
      final currentUser = _getCurrentUser();
      if (currentUser != null && currentUser.userName == userName) {
        userProfile = currentUser;
      }
    }

    // 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
    if (userProfile == null) {
      userProfile = _getUserProfileByName(userName);
    }

    // 4. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–µ—Ä–≤–µ—Ä–Ω—ã–π URL > –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª > fallback
    if (userProfile != null) {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π URL
      if (userProfile.profileImageUrl != null && userProfile.profileImageUrl!.isNotEmpty) {
        print('‚úÖ UserProfileManager: Using server profile URL: ${userProfile.profileImageUrl}');
        return userProfile.profileImageUrl!;
      }
      // –ó–∞—Ç–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
      if (userProfile.profileImageFile != null) {
        print('‚úÖ UserProfileManager: Using local profile file: ${userProfile.profileImageFile!.path}');
        return userProfile.profileImageFile!.path;
      }
    }

    // 5. Final fallback
    final fallback = _getFallbackAvatarUrl(userName);
    print('‚ö†Ô∏è UserProfileManager: Using fallback avatar: $fallback');
    return fallback;
  }

  String _getFallbackAvatarUrl(String userName) {
    final avatars = [
      'assets/images/ava_news/ava1.png',
      'assets/images/ava_news/ava2.png',
      'assets/images/ava_news/ava3.png',
      'assets/images/ava_news/ava4.png',
      'assets/images/ava_news/ava5.png',
      'assets/images/ava_news/ava6.png',
      'assets/images/ava_news/ava7.png',
      'assets/images/ava_news/ava8.png',
      'assets/images/ava_news/ava9.png',
      'assets/images/ava_news/ava10.png',
      'assets/images/ava_news/ava11.png',
      'assets/images/ava_news/ava12.png',
    ];

    final index = userName.hashCode.abs() % avatars.length;
    return avatars[index];
  }

  void _notifyListeners() {
    _onProfileUpdated?.call();
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –£–î–ê–õ–ï–ù–ò–Ø –ê–í–ê–¢–ê–†–ö–ò
  void removeProfileImage() {
    if (_currentUserId == null) return;

    final user = _userProfiles[_currentUserId!];
    if (user == null) return;

    _userProfiles[_currentUserId!] = user.copyWith(
      profileImageUrl: null,
      profileImageFile: null,
    );

    _notifyListeners();

    // üéØ –£–î–ê–õ–Ø–ï–ú –õ–û–ö–ê–õ–¨–ù–û –ò –° –°–ï–†–í–ï–†–ê
    StorageService.saveProfileImageUrl(_currentUserId!, null);
    StorageService.saveProfileImageFilePath(_currentUserId!, null);

    try {
      ApiService.updateProfile({
        'profileImageUrl': null,
      });
      print('‚úÖ Profile image removed from server');
    } catch (e) {
      print('‚ùå Error removing profile image from server: $e');
    }
  }

  bool hasProfileImage() {
    if (_currentUserId == null) return false;
    final user = _userProfiles[_currentUserId!];
    return user?.profileImageUrl != null || user?.profileImageFile != null;
  }

  bool hasCoverImage() {
    if (_currentUserId == null) return false;
    final user = _userProfiles[_currentUserId!];
    return user?.coverImageUrl != null || user?.coverImageFile != null;
  }

  // üéØ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–ë –û–®–ò–ë–ö–ï –ó–ê–ì–†–£–ó–ö–ò
  void _showUploadErrorNotification() {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    print('‚ùå Failed to upload profile image to server');
  }

  // üéØ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–°–ï–• –î–ê–ù–ù–´–• –° –°–ï–†–í–ï–†–û–ú
  Future<void> syncAllProfilesWithServer() async {
    print('üîÑ Syncing all profiles with server...');

    try {
      for (final profile in _userProfiles.values) {
        try {
          final serverProfile = await ApiService.getUserProfile(profile.id);
          if (serverProfile != null) {
            _updateProfileFromServer(profile.id, serverProfile);
          }
        } catch (e) {
          print('‚ùå Error syncing profile ${profile.id}: $e');
        }
      }
      print('‚úÖ All profiles synced with server');
    } catch (e) {
      print('‚ùå Error during profile sync: $e');
    }
  }
}