import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../services/api_service.dart';
import '../services/auth_service.dart';

class UserProvider with ChangeNotifier {
  String _userName = '';
  String _userEmail = '';
  String _userId = '';
  String? _profileImageUrl;
  String? _coverImageUrl;
  Map<String, int> _stats = {
    'posts': 0,
    'likes': 0,
    'comments': 0,
    'followers': 0,
    'following': 0,
  };

  // üÜï –ü–û–õ–Ø –î–õ–Ø –ü–û–î–ü–ò–°–û–ö –ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ô
  Set<String> _following = <String>{};
  Set<String> _followers = <String>{};
  Set<String> _likedPosts = <String>{};
  Set<String> _bookmarkedPosts = <String>{};
  Set<String> _repostedPosts = <String>{};

  String get userName => _userName;
  String get userEmail => _userEmail;
  String get userId => _userId;
  String? get profileImageUrl => _profileImageUrl;
  String? get coverImageUrl => _coverImageUrl;
  Map<String, int> get stats => _stats;
  bool get isLoggedIn => _userName.isNotEmpty && _userId.isNotEmpty;

  // üÜï –ì–ï–¢–¢–ï–†–´ –î–õ–Ø –ü–û–î–ü–ò–°–û–ö
  Set<String> get following => _following;
  Set<String> get followers => _followers;
  Set<String> get likedPosts => _likedPosts;
  Set<String> get bookmarkedPosts => _bookmarkedPosts;
  Set<String> get repostedPosts => _repostedPosts;

  // –ú–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
  bool isFollowing(String userId) => _following.contains(userId);
  bool isLiked(String postId) => _likedPosts.contains(postId);
  bool isBookmarked(String postId) => _bookmarkedPosts.contains(postId);
  bool isReposted(String postId) => _repostedPosts.contains(postId);

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª—é—á–µ–π SharedPreferences
  static const String _userNameKey = 'user_name';
  static const String _userEmailKey = 'user_email';
  static const String _userIdKey = 'user_id';
  static const String _profileImageUrlKey = 'profile_image_url';
  static const String _coverImageUrlKey = 'cover_image_url';
  static const String _userStatsKey = 'user_stats';

  // üÜï –ö–õ–Æ–ß–ò –î–õ–Ø –ü–û–î–ü–ò–°–û–ö –ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ô
  static const String _followingKey = 'user_following';
  static const String _followersKey = 'user_followers';
  static const String _likedPostsKey = 'user_liked_posts';
  static const String _bookmarkedPostsKey = 'user_bookmarked_posts';
  static const String _repostedPostsKey = 'user_reposted_posts';

  UserProvider() {
    _loadUserData();
  }

  // üéØ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó SHARED_PREFERENCES
  Future<void> _loadUserData() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      _userName = prefs.getString(_userNameKey) ?? '';
      _userEmail = prefs.getString(_userEmailKey) ?? '';
      _userId = prefs.getString(_userIdKey) ?? '';
      _profileImageUrl = prefs.getString(_profileImageUrlKey);
      _coverImageUrl = prefs.getString(_coverImageUrlKey);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      final statsJson = prefs.getString(_userStatsKey);
      if (statsJson != null) {
        final statsMap = Map<String, dynamic>.from(json.decode(statsJson));
        _stats = statsMap.map((key, value) => MapEntry(key, value as int));
      }

      // üÜï –ó–ê–ì–†–£–ó–ö–ê –ü–û–î–ü–ò–°–û–ö –ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ô
      _following = _loadStringSet(prefs, _followingKey);
      _followers = _loadStringSet(prefs, _followersKey);
      _likedPosts = _loadStringSet(prefs, _likedPostsKey);
      _bookmarkedPosts = _loadStringSet(prefs, _bookmarkedPostsKey);
      _repostedPosts = _loadStringSet(prefs, _repostedPostsKey);

      if (_userName.isNotEmpty) {
        print('‚úÖ UserProvider: Loaded user data from storage');
        print('   üë§ Name: $_userName');
        print('   üìß Email: $_userEmail');
        print('   üÜî ID: $_userId');
        print('   üìä Stats: $_stats');
        print('   üë• Following: ${_following.length} users');
        print('   ‚ù§Ô∏è Liked posts: ${_likedPosts.length}');
        print('   üîñ Bookmarked posts: ${_bookmarkedPosts.length}');
        print('   üîÅ Reposted posts: ${_repostedPosts.length}');

        notifyListeners();
      }
    } catch (e) {
      print('‚ùå UserProvider: Error loading user data: $e');
    }
  }

  // üÜï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò SET –ò–ó SHARED_PREFERENCES
  Set<String> _loadStringSet(SharedPreferences prefs, String key) {
    try {
      final jsonString = prefs.getString(key);
      if (jsonString != null) {
        final list = List<String>.from(json.decode(jsonString));
        return list.toSet();
      }
    } catch (e) {
      print('‚ùå Error loading $key: $e');
    }
    return <String>{};
  }

  // üéØ –ó–ê–ì–†–£–ó–ö–ê –ü–†–û–§–ò–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó YDB
  Future<void> loadUserProfile(String userId) async {
    try {
      print('üë§ Loading user profile from YDB: $userId');

      final profile = await ApiService.getUserProfile(userId);
      if (profile != null) {
        await setUserData(
          profile['name'] ?? _userName,
          profile['email'] ?? _userEmail,
          userId: profile['id']?.toString() ?? userId,
        );

        if (profile['avatar'] != null) {
          await updateProfileImage(profile['avatar']);
        }

        print('‚úÖ User profile loaded from YDB: ${profile['name']}');
      }
    } catch (e) {
      print('‚ùå Error loading user profile: $e');
    }
  }

  // üéØ –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –í SHARED_PREFERENCES
  Future<void> _saveUserData() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      await prefs.setString(_userNameKey, _userName);
      await prefs.setString(_userEmailKey, _userEmail);
      await prefs.setString(_userIdKey, _userId);

      if (_profileImageUrl != null) {
        await prefs.setString(_profileImageUrlKey, _profileImageUrl!);
      }

      if (_coverImageUrl != null) {
        await prefs.setString(_coverImageUrlKey, _coverImageUrl!);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await prefs.setString(_userStatsKey, json.encode(_stats));

      // üÜï –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–î–ü–ò–°–û–ö –ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ô
      await _saveStringSet(prefs, _followingKey, _following);
      await _saveStringSet(prefs, _followersKey, _followers);
      await _saveStringSet(prefs, _likedPostsKey, _likedPosts);
      await _saveStringSet(prefs, _bookmarkedPostsKey, _bookmarkedPosts);
      await _saveStringSet(prefs, _repostedPostsKey, _repostedPosts);

      print('üíæ UserProvider: Saved user data to storage');
    } catch (e) {
      print('‚ùå UserProvider: Error saving user data: $e');
    }
  }

  // üÜï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø SET –í SHARED_PREFERENCES
  Future<void> _saveStringSet(SharedPreferences prefs, String key, Set<String> set) async {
    try {
      await prefs.setString(key, json.encode(set.toList()));
    } catch (e) {
      print('‚ùå Error saving $key: $e');
    }
  }

  // üéØ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –£–°–¢–ê–ù–û–í–ö–ò –î–ê–ù–ù–´–•
  Future<void> setUserData(String name, String email, {String userId = ''}) async {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å –∏ –Ω–æ–≤—ã–π –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if (userId.isEmpty && _userId.isNotEmpty) {
      print('üîÑ Preserving existing user ID: $_userId');
    } else if (userId.isNotEmpty) {
      _userId = userId;
      print('üéØ Using provided user ID: $userId');
    } else {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ email —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
      _userId = 'user_${email.trim().toLowerCase().hashCode.abs()}';
      print('üîÑ Generated new user ID: $_userId');
    }

    _userName = name;
    _userEmail = email;

    print('üÜî UserProvider: Set user data');
    print('   üë§ Name: $name');
    print('   üìß Email: $email');
    print('   üÜî ID: $_userId');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await _saveUserData();
    notifyListeners();
  }

  // üÜï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–û–î–ü–ò–°–û–ö –° –°–ï–†–í–ï–†–û–ú
  Future<void> syncFollowsWithServer() async {
    try {
      if (!isLoggedIn) return;

      print('üë• Syncing follows with YDB...');

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
      final following = await ApiService.getUserFollowing();
      final followers = await ApiService.getUserFollowers();

      // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
      _following = _convertToSet<String>(following);
      _followers = _convertToSet<String>(followers);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      _stats['following'] = _following.length;
      _stats['followers'] = _followers.length;

      await _saveUserData();
      _safeNotifyListeners();

      print('‚úÖ Follows synced: ${_following.length} following, ${_followers.length} followers');
    } catch (e) {
      print('‚ùå Sync follows error: $e');
    }
  }

  // üÜï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ô –° –°–ï–†–í–ï–†–û–ú
  Future<void> syncInteractionsWithServer() async {
    try {
      if (!isLoggedIn) return;

      print('üîÑ Syncing interactions with YDB...');

      // –ü–æ–ª—É—á–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
      final likes = await ApiService.getUserLikes();
      final bookmarks = await ApiService.getUserBookmarks();
      final reposts = await ApiService.getUserReposts();

      // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
      _likedPosts = _convertToSet<String>(likes);
      _bookmarkedPosts = _convertToSet<String>(bookmarks);
      _repostedPosts = _convertToSet<String>(reposts);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      _stats['likes'] = _likedPosts.length;

      await _saveUserData();
      _safeNotifyListeners();

      print('‚úÖ Interactions synced: ${_likedPosts.length} likes, ${_bookmarkedPosts.length} bookmarks, ${_repostedPosts.length} reposts');
    } catch (e) {
      print('‚ùå Sync interactions error: $e');
    }
  }

  // üÜï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø –í SET –° –Ø–í–ù–´–ú –¢–ò–ü–û–ú
  Set<T> _convertToSet<T>(List<dynamic> list) {
    return list.map((item) => item as T).toSet();
  }

  // üÜï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò
  Future<void> followUser(String targetUserId) async {
    try {
      if (!isLoggedIn) return;

      print('üë• Following user in YDB: $targetUserId');

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      _following.add(targetUserId);
      _stats['following'] = _following.length;

      await _saveUserData();
      _safeNotifyListeners();

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      try {
        await ApiService.followUser(targetUserId);
        print('‚úÖ User followed successfully in YDB');
      } catch (e) {
        print('‚ö†Ô∏è Follow action saved locally: $e');
      }
    } catch (e) {
      print('‚ùå Follow user error: $e');
      rethrow;
    }
  }

  Future<void> unfollowUser(String targetUserId) async {
    try {
      if (!isLoggedIn) return;

      print('üë• Unfollowing user in YDB: $targetUserId');

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      _following.remove(targetUserId);
      _stats['following'] = _following.length;

      await _saveUserData();
      _safeNotifyListeners();

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      try {
        await ApiService.unfollowUser(targetUserId);
        print('‚úÖ User unfollowed successfully in YDB');
      } catch (e) {
        print('‚ö†Ô∏è Unfollow action saved locally: $e');
      }
    } catch (e) {
      print('‚ùå Unfollow user error: $e');
      rethrow;
    }
  }

  // üÜï –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–ê–ô–ö–ê–ú–ò
  Future<void> addLike(String postId) async {
    _likedPosts.add(postId);
    _stats['likes'] = _likedPosts.length;
    await _saveUserData();
    _safeNotifyListeners();
  }

  Future<void> removeLike(String postId) async {
    _likedPosts.remove(postId);
    _stats['likes'] = _likedPosts.length;
    await _saveUserData();
    _safeNotifyListeners();
  }

  // üÜï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–õ–ê–î–ö–ê–ú–ò
  Future<void> addBookmark(String postId) async {
    _bookmarkedPosts.add(postId);
    await _saveUserData();
    _safeNotifyListeners();
  }

  Future<void> removeBookmark(String postId) async {
    _bookmarkedPosts.remove(postId);
    await _saveUserData();
    _safeNotifyListeners();
  }

  // üÜï –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ü–û–°–¢–ê–ú–ò
  Future<void> addRepost(String postId) async {
    _repostedPosts.add(postId);
    await _saveUserData();
    _safeNotifyListeners();
  }

  Future<void> removeRepost(String postId) async {
    _repostedPosts.remove(postId);
    await _saveUserData();
    _safeNotifyListeners();
  }

  // üéØ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° –°–ï–†–í–ï–†–û–ú
  Future<void> syncWithServer() async {
    try {
      print('üîÑ UserProvider: Starting server sync...');

      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞
      final serverUserId = await AuthService.getServerUserId();
      if (serverUserId == null) {
        print('‚ö†Ô∏è No server user ID found in token');
        return;
      }

      print('üéØ Server user ID from token: $serverUserId');

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π user_id —Å–µ—Ä–≤–µ—Ä–Ω—ã–º
      if (_userId != serverUserId) {
        print('üîÑ Updating local user ID from $_userId to $serverUserId');
        _userId = serverUserId;
        await _saveUserData();
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
      final serverUserData = await AuthService.getServerUserData();
      if (serverUserData != null) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        await setUserData(
          serverUserData['name'] ?? _userName,
          serverUserData['email'] ?? _userEmail,
          userId: serverUserId,
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (serverUserData['avatar'] != null) {
          await updateProfileImage(serverUserData['avatar']);
        }

        // üÜï –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –ü–û–î–ü–ò–°–ö–ò –ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø
        await syncFollowsWithServer();
        await syncInteractionsWithServer();

        print('‚úÖ UserProvider: Successfully synced with server');
      } else {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ –µ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–π ID
        print('‚ö†Ô∏è Could not fetch server user data, but using server ID: $serverUserId');
        await setUserData(_userName, _userEmail, userId: serverUserId);
      }

    } catch (e) {
      print('‚ùå UserProvider: Error syncing with server: $e');
    }
  }

  // üéØ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° AUTH SERVICE
  Future<void> syncWithAuthService() async {
    try {
      print('üîÑ UserProvider: Syncing with AuthService...');

      final authUser = await AuthService.getCurrentUser();
      if (authUser != null) {
        print('üîÑ UserProvider: AuthService data: $authUser');

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        final serverUserId = authUser['id'] ?? authUser['user_id'];
        final serverUserName = authUser['name'] ?? _userName;
        final serverUserEmail = authUser['email'] ?? _userEmail;

        if (serverUserId != null && serverUserId.isNotEmpty) {
          print('üéØ Using SERVER user ID from AuthService: $serverUserId');
          await setUserData(
            serverUserName,
            serverUserEmail,
            userId: serverUserId.toString(),
          );
        } else {
          print('‚ö†Ô∏è No server user ID in AuthService, using existing ID');
          await setUserData(serverUserName, serverUserEmail);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (authUser['avatar'] != null) {
          await updateProfileImage(authUser['avatar']);
        }

        print('‚úÖ UserProvider: Synced with AuthService');
      } else {
        print('‚ö†Ô∏è UserProvider: No auth user data found');
      }
    } catch (e) {
      print('‚ùå UserProvider: Error syncing with AuthService: $e');
      // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å syncWithServer –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
      await syncWithServer();
    }
  }

  // üéØ –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
  Future<bool> checkAuthStatus() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final hasUserData = prefs.getString(_userNameKey) != null;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Auth Service
      final isAuthLoggedIn = await AuthService.isLoggedIn();

      print('üîê UserProvider: Auth check - Local: $hasUserData, AuthService: $isAuthLoggedIn');

      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ AuthService, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      if (isAuthLoggedIn && hasUserData) {
        await syncWithServer();
      }

      return hasUserData && isAuthLoggedIn;
    } catch (e) {
      print('‚ùå UserProvider: Error checking auth status: $e');
      return false;
    }
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –°–ï–†–í–ï–†–ê
  Future<void> updateUserFromServer() async {
    try {
      print('üîÑ UserProvider: Updating user data from server');
      await syncWithServer();
    } catch (e) {
      print('‚ùå UserProvider: Error updating from server: $e');
    }
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–í–ê–¢–ê–†–ö–ò
  Future<void> updateProfileImage(String? imageUrl) async {
    _profileImageUrl = imageUrl;
    await _saveUserData();
    notifyListeners();

    print('üñºÔ∏è UserProvider: Profile image updated: $imageUrl');
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–ë–õ–û–ñ–ö–ò
  Future<void> updateCoverImage(String? imageUrl) async {
    _coverImageUrl = imageUrl;
    await _saveUserData();
    notifyListeners();

    print('üèûÔ∏è UserProvider: Cover image updated: $imageUrl');
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
  Future<void> updateStats(Map<String, int> newStats) async {
    _stats.addAll(newStats);
    await _saveUserData();
    notifyListeners();

    print('üìä UserProvider: Stats updated: $newStats');
  }

  // üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ú–ï–ù–ò
  Future<void> updateUserName(String newName) async {
    _userName = newName;
    await _saveUserData();
    notifyListeners();

    print('‚úèÔ∏è UserProvider: Username updated: $newName');
  }

  // üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–°–¢–ï–ô
  Map<String, dynamic> getAuthorData() {
    return {
      'author_id': _userId,
      'author_name': _userName,
      'author_email': _userEmail,
      'author_avatar': _profileImageUrl ?? '',
    };
  }

  // üéØ –ü–†–û–í–ï–†–ö–ê –Ø–í–õ–Ø–ï–¢–°–Ø –õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ê–í–¢–û–†–û–ú
  bool isAuthorOf(String authorId) {
    return _userId == authorId;
  }

  // üÜï –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–°–ï–• –î–ê–ù–ù–´–•
  Future<void> fullSync() async {
    try {
      print('üîÑ UserProvider: Starting full sync...');

      await syncWithServer();
      await syncFollowsWithServer();
      await syncInteractionsWithServer();

      print('‚úÖ UserProvider: Full sync completed');
    } catch (e) {
      print('‚ùå UserProvider: Full sync error: $e');
    }
  }

  // üéØ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• (LOGOUT)
  Future<void> clearUserData() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      await prefs.remove(_userNameKey);
      await prefs.remove(_userEmailKey);
      await prefs.remove(_userIdKey);
      await prefs.remove(_profileImageUrlKey);
      await prefs.remove(_coverImageUrlKey);
      await prefs.remove(_userStatsKey);

      // üÜï –û–ß–ò–°–¢–ö–ê –ü–û–î–ü–ò–°–û–ö –ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ô
      await prefs.remove(_followingKey);
      await prefs.remove(_followersKey);
      await prefs.remove(_likedPostsKey);
      await prefs.remove(_bookmarkedPostsKey);
      await prefs.remove(_repostedPostsKey);

      _userName = '';
      _userEmail = '';
      _userId = '';
      _profileImageUrl = null;
      _coverImageUrl = null;
      _stats = {
        'posts': 0,
        'likes': 0,
        'comments': 0,
        'followers': 0,
        'following': 0,
      };

      // üÜï –û–ß–ò–°–¢–ö–ê –ü–û–î–ü–ò–°–û–ö –ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ô
      _following.clear();
      _followers.clear();
      _likedPosts.clear();
      _bookmarkedPosts.clear();
      _repostedPosts.clear();

      print('üö™ UserProvider: Cleared all user data');
      notifyListeners();
    } catch (e) {
      print('‚ùå UserProvider: Error clearing user data: $e');
    }
  }

  // üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –í –§–û–†–ú–ê–¢–ï –î–õ–Ø API
  Map<String, dynamic> toMap() {
    return {
      'id': _userId,
      'name': _userName,
      'email': _userEmail,
      'profileImageUrl': _profileImageUrl,
      'coverImageUrl': _coverImageUrl,
      'stats': _stats,
      'following': _following.toList(),
      'followers': _followers.toList(),
      'likedPosts': _likedPosts.toList(),
      'bookmarkedPosts': _bookmarkedPosts.toList(),
      'repostedPosts': _repostedPosts.toList(),
    };
  }

  // üÜï –ë–ï–ó–û–ü–ê–°–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –°–õ–£–®–ê–¢–ï–õ–ï–ô
  void _safeNotifyListeners() {
    if (hasListeners) {
      notifyListeners();
    }
  }

  @override
  String toString() {
    return 'UserProvider{name: $_userName, email: $_userEmail, id: $_userId, stats: $_stats, following: ${_following.length}, followers: ${_followers.length}}';
  }
}