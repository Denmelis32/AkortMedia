// providers/user_tags_provider.dart
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:my_app/providers/user_provider.dart';
import 'package:provider/provider.dart';
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';

import 'news_provider.dart';

class UserTagsProvider with ChangeNotifier {
  Map<String, Map<String, Map<String, Map<String, dynamic>>>> _userTags = {};
  bool _isInitialized = false;
  String _currentUserId = '';

  final List<Color> _availableColors = [
    Colors.blue, Colors.green, Colors.orange, Colors.purple, Colors.red,
    Colors.teal, Colors.pink, Colors.indigo, Colors.amber, Colors.cyan,
  ];

  List<Color> get availableColors => _availableColors;
  bool get isInitialized => _isInitialized;
  String get currentUserId => _currentUserId;

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> initialize(UserProvider userProvider) async {
    if (_isInitialized) {
      print('‚ö†Ô∏è UserTagsProvider: —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ UserProvider
    if (userProvider.isLoggedIn && userProvider.userId.isNotEmpty) {
      _currentUserId = userProvider.userId;
      print('‚úÖ UserTagsProvider: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ UserProvider: $_currentUserId');
    } else {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ UserProvider –Ω–µ –≥–æ—Ç–æ–≤
      _currentUserId = 'temp_user_${DateTime.now().millisecondsSinceEpoch}';
      print('‚ö†Ô∏è UserTagsProvider: UserProvider –Ω–µ –≥–æ—Ç–æ–≤, —Å–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $_currentUserId');
    }

    await _initializeCore();
  }

  void clearCurrentUserTags() {
    if (_currentUserId.isNotEmpty && _userTags.containsKey(_currentUserId)) {
      _userTags.remove(_currentUserId);
      print('‚úÖ UserTagsProvider: —Ç–µ–≥–∏ –æ—á–∏—â–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_currentUserId');
      notifyListeners();

      // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      _saveUserTagsToStorage();
    }
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä—è–º—ã–º userId
  Future<void> initializeWithUserId(String userId) async {
    if (_isInitialized) return;

    if (userId.isNotEmpty) {
      _currentUserId = userId;
      print('‚úÖ UserTagsProvider: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $userId');
    } else {
      _currentUserId = 'temp_user_${DateTime.now().millisecondsSinceEpoch}';
      print('‚ö†Ô∏è UserTagsProvider: –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Å—Ç–æ–π userId, —Å–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $_currentUserId');
    }

    await _initializeCore();
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  Future<void> _initializeCore() async {
    print('üîÑ UserTagsProvider: –Ω–∞—á–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_currentUserId');

    await _loadUserTagsFromStorage();
    _isInitialized = true;

    // –ï—Å–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–µ–≥–æ–≤, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
    if (!_userTags.containsKey(_currentUserId) || _userTags[_currentUserId]!.isEmpty) {
      await _createDefaultTagsForUser(_currentUserId);
    }

    debugPrintTags();
    notifyListeners();
    print('‚úÖ UserTagsProvider: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_currentUserId');
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–∫–∫–∞—É–Ω—Ç–∞
  Future<void> updateCurrentUser(String newUserId) async {
    if (newUserId == _currentUserId) return;

    print('üîÑ UserTagsProvider: —Å–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å $_currentUserId –Ω–∞ $newUserId');

    await _saveUserTagsToStorage();
    _currentUserId = newUserId;

    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await _loadUserTagsForCurrentUser();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _loadUserTagsForCurrentUser() async {
    if (_currentUserId.isEmpty) return;

    await _loadUserTagsFromStorage();

    if (!_userTags.containsKey(_currentUserId) || _userTags[_currentUserId]!.isEmpty) {
      await _createDefaultTagsForUser(_currentUserId);
    }

    notifyListeners();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<void> _loadUserTagsFromStorage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final tagsJson = prefs.getString('personal_user_tags_by_user');

      if (tagsJson != null && tagsJson.isNotEmpty) {
        _userTags = _parseTagsJson(tagsJson);
        print('‚úÖ UserTagsProvider: –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è ${_userTags.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      } else {
        print('‚ÑπÔ∏è UserTagsProvider: –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–≥–∞—Ö');
        _userTags = {};
      }
    } catch (e) {
      print('‚ùå UserTagsProvider: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤: $e');
      _userTags = {};
    }
  }

  Map<String, Map<String, Map<String, Map<String, dynamic>>>> _parseTagsJson(String jsonString) {
    final Map<String, Map<String, Map<String, Map<String, dynamic>>>> result = {};
    try {
      final Map<String, dynamic> parsed = json.decode(jsonString);
      print('üîç UserTagsProvider: –ø–∞—Ä—Å–∏–Ω–≥ JSON, –Ω–∞–π–¥–µ–Ω–æ ${parsed.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

      parsed.forEach((userId, userData) {
        if (userData is Map) {
          final userTags = <String, Map<String, Map<String, dynamic>>>{};

          userData.forEach((postId, postData) {
            if (postData is Map) {
              final postTags = <String, Map<String, dynamic>>{};

              postData.forEach((tagId, tagData) {
                if (tagData is Map) {
                  postTags[tagId] = {
                    'name': tagData['name']?.toString() ?? '–¢–µ–≥',
                    'color': Color(tagData['color'] as int? ?? Colors.blue.value),
                  };
                }
              });

              userTags[postId] = postTags;
            }
          });

          result[userId] = userTags;
        }
      });
    } catch (e) {
      print('‚ùå UserTagsProvider: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–≥–æ–≤: $e');
    }
    return result;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _createDefaultTagsForUser(String userId) async {
    if (userId.isEmpty) return;

    _userTags[userId] = {
      'default': {
        'tag1': {
          'name': '–§–∞–Ω–∞—Ç –ú–∞–Ω—á–µ—Å—Ç–µ—Ä–∞',
          'color': Colors.blue,
        },
        'tag2': {
          'name': '–°–ø–æ—Ä—Ç',
          'color': Colors.green,
        },
        'tag3': {
          'name': '–ù–æ–≤–æ—Å—Ç–∏',
          'color': Colors.orange,
        },
      }
    };

    await _saveUserTagsToStorage();
    print('‚úÖ UserTagsProvider: —Å–æ–∑–¥–∞–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  Future<void> _saveUserTagsToStorage() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      final Map<String, dynamic> jsonData = {};

      _userTags.forEach((userId, userData) {
        final userJson = <String, dynamic>{};

        userData.forEach((postId, postData) {
          final postJson = <String, dynamic>{};

          postData.forEach((tagId, tagData) {
            postJson[tagId] = {
              'name': tagData['name'],
              'color': (tagData['color'] as Color).value,
            };
          });

          userJson[postId] = postJson;
        });

        jsonData[userId] = userJson;
      });

      await prefs.setString('personal_user_tags_by_user', json.encode(jsonData));
      print('üíæ UserTagsProvider: –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è ${_userTags.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    } catch (e) {
      print('‚ùå UserTagsProvider: –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤: $e');
    }
  }

  Color getTagColorForPost(String postId, String tagId) {
    if (_currentUserId.isEmpty || !_userTags.containsKey(_currentUserId)) {
      print('‚ö†Ô∏è UserTagsProvider: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–≥–∞ $tagId');
      return _getDefaultColor(tagId);
    }

    final userTags = _userTags[_currentUserId]!;

    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —Ç–µ–≥–∞—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    if (userTags.containsKey(postId) && userTags[postId]!.containsKey(tagId)) {
      final tagData = userTags[postId]![tagId];
      if (tagData != null && tagData['color'] is Color) {
        final color = tagData['color'] as Color;
        print('‚úÖ UserTagsProvider: –Ω–∞–π–¥–µ–Ω —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–≥–∞ $tagId –≤ –ø–æ—Å—Ç–µ $postId: $color');
        return color;
      }
    }

    // –ü–æ—Ç–æ–º –∏—â–µ–º –≤ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Ç–µ–≥–∞—Ö
    if (userTags.containsKey('default') && userTags['default']!.containsKey(tagId)) {
      final tagData = userTags['default']![tagId];
      if (tagData != null && tagData['color'] is Color) {
        final color = tagData['color'] as Color;
        print('‚úÖ UserTagsProvider: –Ω–∞–π–¥–µ–Ω —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–≥–∞ $tagId –≤ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Ç–µ–≥–∞—Ö: $color');
        return color;
      }
    }

    // –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ ID —Ç–µ–≥–∞
    final generatedColor = _getDefaultColor(tagId);
    print('‚ÑπÔ∏è UserTagsProvider: —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–≥–∞ $tagId —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: $generatedColor');
    return generatedColor;
  }

  // –î–û–ë–ê–í–õ–ï–ù –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ô –ú–ï–¢–û–î
  Map<String, Color> getLastUsedTagColors() {
    if (_currentUserId.isEmpty || !_userTags.containsKey(_currentUserId)) {
      return {'tag1': _getDefaultColor('tag1')};
    }

    final userTags = _userTags[_currentUserId]!;

    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userTags.containsKey('default') && userTags['default']!.isNotEmpty) {
      final defaultTags = userTags['default']!;
      final result = <String, Color>{};

      defaultTags.forEach((tagId, tagData) {
        if (tagData['color'] is Color &&
            tagData['name']?.toString() != '–ù–æ–≤—ã–π —Ç–µ–≥' &&
            tagData['name']?.toString().isNotEmpty == true) {
          result[tagId] = tagData['color'] as Color;
        }
      });

      if (result.isNotEmpty) {
        return result;
      }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç —Å —Ç–µ–≥–∞–º–∏
    final postsWithTags = userTags.entries
        .where((entry) => entry.key != 'default' && entry.value.isNotEmpty)
        .toList();

    if (postsWithTags.isNotEmpty) {
      final lastPostTags = postsWithTags.last.value;
      final result = <String, Color>{};

      lastPostTags.forEach((tagId, tagData) {
        if (tagData['color'] is Color &&
            tagData['name']?.toString() != '–ù–æ–≤—ã–π —Ç–µ–≥' &&
            tagData['name']?.toString().isNotEmpty == true) {
          result[tagId] = tagData['color'] as Color;
        }
      });

      if (result.isNotEmpty) {
        return result;
      }
    }

    return {'tag1': _getDefaultColor('tag1')};
  }

  Future<void> initializeTagsForNewPost(String postId) async {
    if (_currentUserId.isEmpty) {
      print('‚ùå UserTagsProvider: currentUserId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞');
      return;
    }

    if (!_isInitialized) {
      print('üîÑ UserTagsProvider: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–µ–≥–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞');
      await initializeWithUserId(_currentUserId);
    }

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!_userTags.containsKey(_currentUserId)) {
      _userTags[_currentUserId] = {};
      print('‚úÖ UserTagsProvider: —Å–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_currentUserId');
    }

    // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–û–°–õ–ï–î–ù–ò–ï –¢–ï–ì–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç—ã—Ö
    final lastTags = getLastUsedTags();
    final lastColors = getLastUsedTagColors();

    if (!_userTags[_currentUserId]!.containsKey(postId)) {
      _userTags[_currentUserId]![postId] = {};

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
      lastTags.forEach((tagId, tagName) {
        final color = lastColors[tagId] ?? _getDefaultColor(tagId);
        _userTags[_currentUserId]![postId]![tagId] = {
          'name': tagName,
          'color': color,
        };
      });

      await _saveUserTagsToStorage();
      print('‚úÖ UserTagsProvider: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ–≥–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ $postId: $lastTags');

      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      debugPrintTags();
    } else {
      print('‚ÑπÔ∏è UserTagsProvider: —Ç–µ–≥–∏ –¥–ª—è –ø–æ—Å—Ç–∞ $postId —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }
  }

  Future<void> updateTagForPost({
    required String postId,
    required String tagId,
    required String newName,
    required Color color,
    bool updateGlobally = true,
    BuildContext? context,
  }) async {
    if (_currentUserId.isEmpty) {
      print('‚ùå UserTagsProvider: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞');
      return;
    }

    if (!_isInitialized) {
      print('üîÑ UserTagsProvider: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–µ–≥–∞');
      await initializeWithUserId(_currentUserId);
    }

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!_userTags.containsKey(_currentUserId)) {
      _userTags[_currentUserId] = {};
      print('‚úÖ UserTagsProvider: —Å–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_currentUserId');
    }

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å
    if (!_userTags[_currentUserId]!.containsKey(postId)) {
      _userTags[_currentUserId]![postId] = {};
      print('‚úÖ UserTagsProvider: —Å–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Å—Ç–∞ $postId');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    _userTags[_currentUserId]![postId]![tagId] = {
      'name': newName,
      'color': color,
    };

    // –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ì–õ–û–ë–ê–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï
    if (updateGlobally) {
      await updateTagGlobally(tagId, newName, color, context: context);
    } else {
      await _saveUserTagsToStorage();
      notifyListeners();

      // –í—Å–µ —Ä–∞–≤–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º NewsProvider –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
      if (context != null) {
        _notifyNewsProvider(context);
      }
    }

    print('‚úÖ UserTagsProvider: —Ç–µ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_currentUserId –∏ –ø–æ—Å—Ç–∞ $postId: $tagId -> $newName ($color)');

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    debugPrintTags();
  }

  Future<void> _updateUserDefaultTags(String tagId, String newName, Color color) async {
    if (!_userTags.containsKey(_currentUserId)) {
      _userTags[_currentUserId] = {};
    }

    if (!_userTags[_currentUserId]!.containsKey('default')) {
      _userTags[_currentUserId]!['default'] = {};
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥ –≤ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    _userTags[_currentUserId]!['default']![tagId] = {
      'name': newName,
      'color': color,
    };

    await _saveUserTagsToStorage();
    print('‚úÖ UserTagsProvider: —Ç–µ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $tagId -> $newName');
  }

  Future<void> saveTagsForNewPost({
    required String postId,
    required Map<String, String> tags,
    required Map<String, Color> tagColors,
  }) async {
    if (_currentUserId.isEmpty) {
      print('‚ùå UserTagsProvider: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
      return;
    }

    if (!_isInitialized) {
      await initializeWithUserId(_currentUserId);
    }

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!_userTags.containsKey(_currentUserId)) {
      _userTags[_currentUserId] = {};
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ—Å—Ç–∞
    _userTags[_currentUserId]![postId] = {};

    tags.forEach((tagId, tagName) {
      final color = tagColors[tagId] ?? _getDefaultColor(tagId);
      _userTags[_currentUserId]![postId]![tagId] = {
        'name': tagName,
        'color': color,
      };
    });

    await _saveUserTagsToStorage();
    notifyListeners();

    print('‚úÖ UserTagsProvider: —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–µ–≥–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ $postId: $tags');
  }

  Map<String, String> _getDefaultTags() {
    return {
      'tag1': '–§–∞–Ω–∞—Ç –ú–∞–Ω—á–µ—Å—Ç–µ—Ä–∞',
      'tag2': '–°–ø–æ—Ä—Ç',
      'tag3': '–ù–æ–≤–æ—Å—Ç–∏',
    };
  }

  Map<String, String> getTagsForPost(String postId) {
    if (_currentUserId.isEmpty) {
      print('‚ö†Ô∏è UserTagsProvider: currentUserId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ $postId');
      return <String, String>{};
    }

    if (!_isInitialized) {
      print('‚ö†Ô∏è UserTagsProvider: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ $postId');
      return <String, String>{};
    }

    if (!_userTags.containsKey(_currentUserId)) {
      print('‚ö†Ô∏è UserTagsProvider: –Ω–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_currentUserId');
      return <String, String>{};
    }

    final userTags = _userTags[_currentUserId]!;

    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–µ–≥–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    if (userTags.containsKey(postId) && userTags[postId]!.isNotEmpty) {
      final tags = userTags[postId]!;
      final result = tags.map((key, value) => MapEntry(key, value['name']?.toString() ?? '–¢–µ–≥'));

      // –§–ò–õ–¨–¢–†–£–ï–ú –ü–£–°–¢–´–ï –¢–ï–ì–ò - –µ—Å–ª–∏ —Ç–µ–≥ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–ù–æ–≤—ã–π —Ç–µ–≥", —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –ø—É—Å—Ç—ã–º
      final filteredResult = Map<String, String>.fromEntries(
          result.entries.where((entry) => entry.value != '–ù–æ–≤—ã–π —Ç–µ–≥' && entry.value.isNotEmpty)
      );

      if (filteredResult.isNotEmpty) {
        print('‚úÖ UserTagsProvider: –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ—Å—Ç–∞ $postId: $filteredResult');
        return filteredResult;
      } else {
        print('‚ÑπÔ∏è UserTagsProvider: –¥–ª—è –ø–æ—Å—Ç–∞ $postId —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ —Ç–µ–≥–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ');
        return <String, String>{};
      }
    }

    // –ï—Å–ª–∏ –¥–ª—è –ø–æ—Å—Ç–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ü–£–°–¢–´–ï —Ç–µ–≥–∏
    print('‚ÑπÔ∏è UserTagsProvider: –¥–ª—è –ø–æ—Å—Ç–∞ $postId –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–≥–∏');
    return <String, String>{};
  }

  Color _getDefaultColor(String tagId) {
    final colors = _availableColors;
    final hash = tagId.hashCode;
    return colors[hash.abs() % colors.length];
  }

  Map<String, String> getLastUsedTags() {
    if (_currentUserId.isEmpty || !_userTags.containsKey(_currentUserId)) {
      return {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'};
    }

    final userTags = _userTags[_currentUserId]!;

    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userTags.containsKey('default') && userTags['default']!.isNotEmpty) {
      final defaultTags = userTags['default']!;
      final result = defaultTags.map((key, value) =>
          MapEntry(key, value['name']?.toString() ?? '–¢–µ–≥'));

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–≥–∏
      final filtered = Map<String, String>.fromEntries(
          result.entries.where((entry) => entry.value != '–ù–æ–≤—ã–π —Ç–µ–≥' && entry.value.isNotEmpty)
      );

      if (filtered.isNotEmpty) {
        print('‚úÖ UserTagsProvider: –Ω–∞–π–¥–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $filtered');
        return filtered;
      }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç —Å —Ç–µ–≥–∞–º–∏
    final postsWithTags = userTags.entries
        .where((entry) => entry.key != 'default' && entry.value.isNotEmpty)
        .toList();

    if (postsWithTags.isNotEmpty) {
      // –ë–µ—Ä–µ–º —Ç–µ–≥–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞
      final lastPostTags = postsWithTags.last.value;
      final result = lastPostTags.map((key, value) =>
          MapEntry(key, value['name']?.toString() ?? '–¢–µ–≥'));

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–≥–∏
      final filtered = Map<String, String>.fromEntries(
          result.entries.where((entry) => entry.value != '–ù–æ–≤—ã–π —Ç–µ–≥' && entry.value.isNotEmpty)
      );

      if (filtered.isNotEmpty) {
        print('‚úÖ UserTagsProvider: –Ω–∞–π–¥–µ–Ω—ã —Ç–µ–≥–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞: $filtered');
        return filtered;
      }
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ–≥–∏
    return {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'};
  }

  Future<void> updateTagGlobally(String tagId, String newName, Color color, {BuildContext? context}) async {
    if (_currentUserId.isEmpty) {
      print('‚ùå UserTagsProvider: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞');
      return;
    }

    if (!_isInitialized) {
      print('üîÑ UserTagsProvider: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–µ–≥–∞');
      await initializeWithUserId(_currentUserId);
    }

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!_userTags.containsKey(_currentUserId)) {
      _userTags[_currentUserId] = {};
      print('‚úÖ UserTagsProvider: —Å–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_currentUserId');
    }

    bool hasChanges = false;

    // –û–ë–ù–û–í–õ–Ø–ï–ú –¢–ï–ì –í–û –í–°–ï–• –ü–û–°–¢–ê–•
    _userTags[_currentUserId]!.forEach((postId, postTags) {
      if (postTags.containsKey(tagId)) {
        final currentName = postTags[tagId]!['name']?.toString() ?? '';

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–æ–π —Ç–µ–≥
        if (currentName != newName && currentName != '–ù–æ–≤—ã–π —Ç–µ–≥') {
          postTags[tagId] = {
            'name': newName,
            'color': color,
          };
          hasChanges = true;
          print('‚úÖ UserTagsProvider: –æ–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–≥ $tagId –≤ –ø–æ—Å—Ç–µ $postId: $currentName -> $newName');
        }
      }
    });

    // –û–ë–ù–û–í–õ–Ø–ï–ú –î–ï–§–û–õ–¢–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
    if (!_userTags[_currentUserId]!.containsKey('default')) {
      _userTags[_currentUserId]!['default'] = {};
    }

    _userTags[_currentUserId]!['default']![tagId] = {
      'name': newName,
      'color': color,
    };
    hasChanges = true;

    if (hasChanges) {
      await _saveUserTagsToStorage();
      notifyListeners();
      print('‚úÖ UserTagsProvider: —Ç–µ–≥ $tagId –≥–ª–æ–±–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "$newName" ($color)');

      // –£–í–ï–î–û–ú–õ–Ø–ï–ú NewsProvider –û–ë –û–ë–ù–û–í–õ–ï–ù–ò–ò (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω context)
      if (context != null) {
        _notifyNewsProvider(context);
      }
    } else {
      print('‚ÑπÔ∏è UserTagsProvider: —Ç–µ–≥ $tagId –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –ø–æ—Å—Ç–∞—Ö');
    }

    debugPrintTags();
  }

  void _notifyNewsProvider(BuildContext context) {
    try {
      final newsProvider = Provider.of<NewsProvider>(context, listen: false);
      newsProvider.refreshAllPostsUserTags();
      print('‚úÖ UserTagsProvider: NewsProvider —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤');
    } catch (e) {
      print('‚ö†Ô∏è UserTagsProvider: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å NewsProvider: $e');
    }
  }

  // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—á–∞—Ç–∏ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
  void debugPrintTags() {
    print('=== DEBUG USER TAGS PROVIDER ===');
    print('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $_currentUserId');
    print('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: $_isInitialized');
    print('–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${_userTags.length}');

    if (_userTags.containsKey(_currentUserId)) {
      final userData = _userTags[_currentUserId]!;
      print('–ü–æ—Å—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏ —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData.length}');

      userData.forEach((postId, tags) {
        print('üìù –ü–æ—Å—Ç "$postId": ${tags.length} —Ç–µ–≥–æ–≤');
        tags.forEach((tagId, tagData) {
          print('   - $tagId: "${tagData['name']}" (${tagData['color']})');
        });
      });
    } else {
      print('‚ùå –ù–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_currentUserId');
    }
    print('================================');
  }

  @override
  void dispose() {
    print('üîö UserTagsProvider: dispose');
    super.dispose();
  }
}