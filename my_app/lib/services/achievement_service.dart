import '../pages/rooms_pages/models_room/achievement.dart';
import '../pages/rooms_pages/models_room/user_permissions.dart';
import '../pages/rooms_pages/models_room/channel.dart'; // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è Channel

class AchievementService {
  static final Map<AchievementType, Achievement> _achievementData = {
    AchievementType.firstMessage: Achievement(
      id: 'first_message',
      type: AchievementType.firstMessage,
      title: '–ü–µ—Ä–≤—ã–π —à–∞–≥',
      description: '–ù–∞–ø–∏—Å–∞–Ω–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      icon: 'üéØ',
      earnedAt: DateTime.now(),
      isUnlocked: false,
    ),
    AchievementType.topicCreator: Achievement(
      id: 'topic_creator',
      type: AchievementType.topicCreator,
      title: '–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å',
      description: '–°–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–≤–∞—è —Ç–µ–º–∞',
      icon: 'üèóÔ∏è',
      earnedAt: DateTime.now(),
      isUnlocked: false,
    ),
    AchievementType.activeUser: Achievement(
      id: 'active_user',
      type: AchievementType.activeUser,
      title: '–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
      description: '–ù–∞–ø–∏—Å–∞–Ω–æ 10+ —Å–æ–æ–±—â–µ–Ω–∏–π',
      icon: 'üí¨',
      earnedAt: DateTime.now(),
      isUnlocked: false,
    ),
    AchievementType.popularTopic: Achievement(
      id: 'popular_topic',
      type: AchievementType.popularTopic,
      title: '–ü–æ–ø—É–ª—è—Ä–Ω–∞—è —Ç–µ–º–∞',
      description: '–¢–µ–º–∞ —Å–æ–±—Ä–∞–ª–∞ 10+ —Å–æ–æ–±—â–µ–Ω–∏–π',
      icon: 'üî•',
      earnedAt: DateTime.now(),
      isUnlocked: false,
    ),
    AchievementType.categoryExplorer: Achievement(
      id: 'category_explorer',
      type: AchievementType.categoryExplorer,
      title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
      description: '–£—á–∞—Å—Ç–∏–µ –≤ 3+ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö',
      icon: 'üß≠',
      earnedAt: DateTime.now(),
      isUnlocked: false,
    ),
    AchievementType.nightOwl: Achievement(
      id: 'night_owl',
      type: AchievementType.nightOwl,
      title: '–ù–æ—á–Ω–∞—è —Å–æ–≤–∞',
      description: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ—á—å—é (22:00-6:00)',
      icon: 'ü¶â',
      earnedAt: DateTime.now(),
      isUnlocked: false,
    ),
    AchievementType.quickReplier: Achievement(
      id: 'quick_replier',
      type: AchievementType.quickReplier,
      title: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –æ—Ç–≤–µ—Ç',
      description: '–û—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç',
      icon: '‚ö°',
      earnedAt: DateTime.now(),
      isUnlocked: false,
    ),
    AchievementType.conversationStarter: Achievement(
      id: 'conversation_starter',
      type: AchievementType.conversationStarter,
      title: '–ó–∞–≤–æ–¥–∏–ª–∞',
      description: '–°–æ–∑–¥–∞–Ω–æ 5+ —Ç–µ–º',
      icon: 'üé§',
      earnedAt: DateTime.now(),
      isUnlocked: false,
    ),
    AchievementType.socialButterfly: Achievement(
      id: 'social_butterfly',
      type: AchievementType.socialButterfly,
      title: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞',
      description: '–ù–∞–ø–∏—Å–∞–Ω–æ 50+ —Å–æ–æ–±—â–µ–Ω–∏–π',
      icon: 'ü¶ã',
      earnedAt: DateTime.now(),
      isUnlocked: false,
    ),
    AchievementType.expert: Achievement(
      id: 'expert',
      type: AchievementType.expert,
      title: '–≠–∫—Å–ø–µ—Ä—Ç',
      description: '–ù–∞–ø–∏—Å–∞–Ω–æ 100+ —Å–æ–æ–±—â–µ–Ω–∏–π',
      icon: 'üéì',
      earnedAt: DateTime.now(),
      isUnlocked: false,
    ),
    // –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –î–õ–Ø –ü–û–î–ü–ò–°–û–ö
    AchievementType.firstSubscription: Achievement(
      id: 'first_subscription',
      type: AchievementType.firstSubscription,
      title: '–ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª!',
      description: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª',
      icon: '‚≠ê',
      earnedAt: DateTime.now(),
      isUnlocked: false,
    ),
    AchievementType.subscriber: Achievement(
      id: 'subscriber',
      type: AchievementType.subscriber,
      title: '–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫',
      description: '–ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ 5 –∫–∞–Ω–∞–ª–æ–≤',
      icon: 'üì∫',
      earnedAt: DateTime.now(),
      isUnlocked: false,
    ),
    AchievementType.channelExplorer: Achievement(
      id: 'channel_explorer',
      type: AchievementType.channelExplorer,
      title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –∫–∞–Ω–∞–ª–æ–≤',
      description: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –≤ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      icon: 'üîç',
      earnedAt: DateTime.now(),
      isUnlocked: false,
    ),
    AchievementType.superFan: Achievement(
      id: 'super_fan',
      type: AchievementType.superFan,
      title: '–°—É–ø–µ—Ä-—Ñ–∞–Ω–∞—Ç',
      description: '–ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ 10+ –∫–∞–Ω–∞–ª–æ–≤',
      icon: 'ü§©',
      earnedAt: DateTime.now(),
      isUnlocked: false,
    ),
    AchievementType.verifiedLover: Achievement(
      id: 'verified_lover',
      type: AchievementType.verifiedLover,
      title: '–õ—é–±–∏—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ',
      description: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª',
      icon: '‚úÖ',
      earnedAt: DateTime.now(),
      isUnlocked: false,
    ),
  };

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  static List<Achievement> checkAchievements({
    required UserPermissions userPermissions,
    required String currentCategoryId,
    required DateTime messageTime,
    DateTime? lastMessageTime,
    int currentTopicMessageCount = 0,
  }) {
    final newAchievements = <Achievement>[];
    final achieved = userPermissions.achievements;

    for (final type in AchievementType.values) {
      if (!achieved.containsKey(type) &&
          _checkAchievement(
            type: type,
            user: userPermissions,
            categoryId: currentCategoryId,
            messageTime: messageTime,
            lastMessageTime: lastMessageTime,
            currentTopicMessageCount: currentTopicMessageCount,
          )) {
        newAchievements.add(_achievementData[type]!.copyWith(
          isUnlocked: true,
          earnedAt: DateTime.now(),
        ));
      }
    }

    return newAchievements;
  }

  /// –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
  static List<Achievement> checkSubscriptionAchievements({
    required UserPermissions userPermissions,
    required Channel channel,
    required bool isSubscribing,
  }) {
    final newAchievements = <Achievement>[];
    final achieved = userPermissions.achievements;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final currentSubscriptionsCount = userPermissions.subscribedChannels.length;
    final newSubscriptionsCount = isSubscribing
        ? currentSubscriptionsCount + 1
        : currentSubscriptionsCount;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    final subscriptionAchievementTypes = [
      AchievementType.firstSubscription,
      AchievementType.subscriber,
      AchievementType.channelExplorer,
      AchievementType.superFan,
      AchievementType.verifiedLover,
    ];

    for (final type in subscriptionAchievementTypes) {
      if (!achieved.containsKey(type) &&
          _checkSubscriptionAchievement(
            type: type,
            user: userPermissions,
            channel: channel,
            isSubscribing: isSubscribing,
            currentSubscriptionsCount: currentSubscriptionsCount,
            newSubscriptionsCount: newSubscriptionsCount,
          )) {
        newAchievements.add(_achievementData[type]!.copyWith(
          isUnlocked: true,
          earnedAt: DateTime.now(),
        ));
      }
    }

    return newAchievements;
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
  static bool _checkAchievement({
    required AchievementType type,
    required UserPermissions user,
    required String categoryId,
    required DateTime messageTime,
    DateTime? lastMessageTime,
    int currentTopicMessageCount = 0,
  }) {
    switch (type) {
      case AchievementType.firstMessage:
        return user.messagesCount == 1;

      case AchievementType.topicCreator:
        return user.topicsCreated == 1;

      case AchievementType.activeUser:
        return user.messagesCount >= 10;

      case AchievementType.popularTopic:
        return currentTopicMessageCount >= 10;

      case AchievementType.categoryExplorer:
        return user.participatedCategories.length >= 3;

      case AchievementType.nightOwl:
        final hour = messageTime.hour;
        return hour >= 22 || hour < 6;

      case AchievementType.quickReplier:
        if (lastMessageTime == null) return false;
        return messageTime.difference(lastMessageTime).inMinutes <= 5;

      case AchievementType.conversationStarter:
        return user.topicsCreated >= 5;

      case AchievementType.socialButterfly:
        return user.messagesCount >= 50;

      case AchievementType.expert:
        return user.messagesCount >= 100;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–æ–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Ç–æ–¥–µ)
      case AchievementType.firstSubscription:
      case AchievementType.subscriber:
      case AchievementType.channelExplorer:
      case AchievementType.superFan:
      case AchievementType.verifiedLover:
        return false; // –≠—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ checkSubscriptionAchievements
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
  static bool _checkSubscriptionAchievement({
    required AchievementType type,
    required UserPermissions user,
    required Channel channel,
    required bool isSubscribing,
    required int currentSubscriptionsCount,
    required int newSubscriptionsCount,
  }) {
    if (!isSubscribing) return false; // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ

    switch (type) {
      case AchievementType.firstSubscription:
        return currentSubscriptionsCount == 0; // –ü–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞

      case AchievementType.subscriber:
        return newSubscriptionsCount >= 5; // 5+ –ø–æ–¥–ø–∏—Å–æ–∫

      case AchievementType.channelExplorer:
      // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –≤ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        return !user.participatedCategories.contains(channel.categoryId);

      case AchievementType.superFan:
        return newSubscriptionsCount >= 10; // 10+ –ø–æ–¥–ø–∏—Å–æ–∫

      case AchievementType.verifiedLover:
        return channel.isVerified; // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª

    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º
      default:
        return false;
    }
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static List<Achievement> getAllAchievements(UserPermissions userPermissions) {
    return AchievementType.values.map((type) {
      final achievement = _achievementData[type]!;
      final isUnlocked = userPermissions.achievements.containsKey(type);
      final earnedAt = userPermissions.achievements[type];

      return achievement.copyWith(
        isUnlocked: isUnlocked,
        earnedAt: earnedAt ?? achievement.earnedAt,
      );
    }).toList();
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
  static bool isAchievementUnlocked(AchievementType type, UserPermissions user) {
    return user.achievements.containsKey(type);
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É
  static Achievement getAchievement(AchievementType type) {
    return _achievementData[type]!;
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  static int getUnlockedCount(UserPermissions userPermissions) {
    return userPermissions.achievements.length;
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  static int getTotalCount() {
    return AchievementType.values.length;
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  static double getProgress(UserPermissions userPermissions) {
    return getUnlockedCount(userPermissions) / getTotalCount();
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  static List<AchievementType> getAllAchievementTypes() {
    return AchievementType.values;
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ ID
  static Achievement? getAchievementById(String id) {
    return _achievementData.values.firstWhere(
          (achievement) => achievement.id == id,
      orElse: () => _achievementData.values.first,
    );
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  static List<Achievement> getAchievementsByCategory(String category) {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    final categories = {
      'messages': [
        AchievementType.firstMessage,
        AchievementType.activeUser,
        AchievementType.socialButterfly,
        AchievementType.expert,
        AchievementType.nightOwl,
        AchievementType.quickReplier,
      ],
      'topics': [
        AchievementType.topicCreator,
        AchievementType.conversationStarter,
        AchievementType.popularTopic,
      ],
      'exploration': [
        AchievementType.categoryExplorer,
        AchievementType.channelExplorer,
      ],
      'subscriptions': [
        AchievementType.firstSubscription,
        AchievementType.subscriber,
        AchievementType.superFan,
        AchievementType.verifiedLover,
      ],
    };

    final types = categories[category] ?? [];
    return types.map((type) => _achievementData[type]!).toList();
  }
}