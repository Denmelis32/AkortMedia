// lib/services/api_service.dart
import 'dart:convert'; // üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –≠–¢–û–¢ –ò–ú–ü–û–†–¢
import 'package:http/http.dart' as http;
import 'auth_service.dart';

class ApiService {
  static const String baseUrl = 'https://your-api-id.apigw.yandexcloud.net';

  // üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –ü–£–ë–õ–ò–ß–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ó–ê–ì–û–õ–û–í–ö–û–í
  static Future<Map<String, String>> _getHeaders() async {
    final token = await AuthService.getToken();
    final headers = {
      'Content-Type': 'application/json',
    };

    if (token != null && token.isNotEmpty) {
      headers['Authorization'] = 'Bearer $token';
    }

    return headers;
  }

  // üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –ü–£–ë–õ–ò–ß–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –¢–û–ö–ï–ù–ê
  static Future<String?> getToken() async {
    return await AuthService.getToken();
  }

  static dynamic _handleResponse(http.Response response) {
    print('üîß API Response: ${response.statusCode} - ${response.body}');

    if (response.statusCode >= 200 && response.statusCode < 300) {
      return response.body.isNotEmpty ? json.decode(response.body) : null;
    } else {
      final errorData = response.body.isNotEmpty ? json.decode(response.body) : {};
      final errorMessage = errorData['error'] ?? errorData['message'] ?? '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusCode}';
      throw Exception(errorMessage);
    }
  }

  // ========== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ==========

  static Future<Map<String, dynamic>> login(String email, String password) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/auth/login'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'email': email,
          'password': password,
        }),
      );

      return _handleResponse(response);
    } catch (e) {
      print('‚ùå API Error (login): $e');
      throw Exception('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: $e');
    }
  }

  static Future<Map<String, dynamic>> register(String email, String password, String name) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/auth/register'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'email': email,
          'password': password,
          'name': name,
        }),
      );

      return _handleResponse(response);
    } catch (e) {
      print('‚ùå API Error (register): $e');
      throw Exception('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e');
    }
  }

  // ========== –ù–û–í–û–°–¢–ò ==========

  static Future<List<dynamic>> getNews() async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/news'),
        headers: await _getHeaders(),
      );

      final newsList = _handleResponse(response) as List<dynamic>;
      return newsList.map((news) => _formatNewsItem(news)).toList();
    } catch (e) {
      print('‚ùå API Error (getNews): $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: $e');
    }
  }

  static Future<dynamic> createNews(Map<String, dynamic> newsData) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/news'),
        headers: await _getHeaders(),
        body: json.encode(newsData),
      );

      final createdNews = _handleResponse(response);
      return _formatNewsItem(createdNews);
    } catch (e) {
      print('‚ùå API Error (createNews): $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å: $e');
    }
  }

  // üéØ –ò–°–ü–†–ê–í–õ–Ø–ï–ú –û–ü–ï–ß–ê–¢–ö–£: static –≤–º–µ—Å—Ç–æ tatic
  static Future<dynamic> updateNews(String newsId, Map<String, dynamic> newsData) async {
    try {
      final response = await http.put(
        Uri.parse('$baseUrl/news/$newsId'),
        headers: await _getHeaders(),
        body: json.encode(newsData),
      );

      final updatedNews = _handleResponse(response);
      return _formatNewsItem(updatedNews);
    } catch (e) {
      print('‚ùå API Error (updateNews): $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å: $e');
    }
  }

  // üéØ –ò–°–ü–†–ê–í–õ–Ø–ï–ú –û–ü–ï–ß–ê–¢–ö–£: static –≤–º–µ—Å—Ç–æ tatic
  static Future<void> deleteNews(String newsId) async {
    try {
      final response = await http.delete(
        Uri.parse('$baseUrl/news/$newsId'),
        headers: await _getHeaders(),
      );

      _handleResponse(response);
    } catch (e) {
      print('‚ùå API Error (deleteNews): $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å: $e');
    }
  }

  // ========== –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø ==========

  static Future<void> toggleLikeNews(String newsId, bool isLiked) async {
    try {
      final endpoint = isLiked ? 'like' : 'unlike';
      final response = await http.post(
        Uri.parse('$baseUrl/news/$newsId/$endpoint'),
        headers: await _getHeaders(),
      );

      _handleResponse(response);
    } catch (e) {
      print('‚ùå API Error (toggleLikeNews): $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∞–π–∫: $e');
    }
  }

  static Future<void> toggleBookmarkNews(String newsId, bool isBookmarked) async {
    try {
      final endpoint = isBookmarked ? 'bookmark' : 'unbookmark';
      final response = await http.post(
        Uri.parse('$baseUrl/news/$newsId/$endpoint'),
        headers: await _getHeaders(),
      );

      _handleResponse(response);
    } catch (e) {
      print('‚ùå API Error (toggleBookmarkNews): $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É: $e');
    }
  }

  static Future<void> toggleRepostNews(String newsId, bool isReposted) async {
    try {
      final endpoint = isReposted ? 'repost' : 'unrepost';
      final response = await http.post(
        Uri.parse('$baseUrl/news/$newsId/$endpoint'),
        headers: await _getHeaders(),
      );

      _handleResponse(response);
    } catch (e) {
      print('‚ùå API Error (toggleRepostNews): $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ—Å—Ç: $e');
    }
  }

  // ========== –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò ==========

  static Future<dynamic> addComment(String newsId, Map<String, dynamic> comment) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/news/$newsId/comments'),
        headers: await _getHeaders(),
        body: json.encode(comment),
      );

      return _handleResponse(response);
    } catch (e) {
      print('‚ùå API Error (addComment): $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: $e');
    }
  }

  static Future<void> deleteComment(String newsId, String commentId) async {
    try {
      final response = await http.delete(
        Uri.parse('$baseUrl/news/$newsId/comments/$commentId'),
        headers: await _getHeaders(),
      );

      _handleResponse(response);
    } catch (e) {
      print('‚ùå API Error (deleteComment): $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: $e');
    }
  }

  // ========== –ü–†–û–§–ò–õ–¨ ==========

  static Future<dynamic> updateProfile(Map<String, dynamic> userData) async {
    try {
      final response = await http.put(
        Uri.parse('$baseUrl/users/profile'),
        headers: await _getHeaders(),
        body: json.encode(userData),
      );

      return _handleResponse(response);
    } catch (e) {
      print('‚ùå API Error (updateProfile): $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: $e');
    }
  }

  static Future<dynamic> getUserProfile(String userId) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/users/$userId'),
        headers: await _getHeaders(),
      );

      return _handleResponse(response);
    } catch (e) {
      print('‚ùå API Error (getUserProfile): $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: $e');
    }
  }

  // ========== –£–¢–ò–õ–ò–¢–´ ==========

  static Future<bool> checkConnection() async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/health'),
        headers: await _getHeaders(),
      );

      return response.statusCode == 200;
    } catch (e) {
      print('‚ùå Connection check failed: $e');
      return false;
    }
  }

  static Future<List<dynamic>> searchNews(String query) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/news/search?q=${Uri.encodeComponent(query)}'),
        headers: await _getHeaders(),
      );

      final newsList = _handleResponse(response) as List<dynamic>;
      return newsList.map((news) => _formatNewsItem(news)).toList();
    } catch (e) {
      print('‚ùå API Error (searchNews): $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫: $e');
    }
  }

  // üéØ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–°–¢–ò –î–õ–Ø –ï–î–ò–ù–û–û–ë–†–ê–ó–ò–Ø
  static Map<String, dynamic> _formatNewsItem(Map<String, dynamic> news) {
    return {
      'id': news['id'] ?? news['_id'] ?? 'unknown',
      'title': news['title'] ?? '',
      'description': news['description'] ?? '',
      'author_name': news['author_name'] ?? news['author']?['name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä',
      'author_id': news['author_id'] ?? news['author']?['id'] ?? '',
      'author_avatar': news['author_avatar'] ?? news['author']?['avatar'] ?? '',
      'hashtags': news['hashtags'] ?? [],
      'user_tags': news['user_tags'] ?? {},
      'comments': news['comments'] ?? [],
      'likes': news['likes'] is int ? news['likes'] : (news['likes'] as List?)?.length ?? 0,
      'reposts': news['reposts'] ?? 0,
      'created_at': news['created_at'] ?? news['createdAt'] ?? DateTime.now().toIso8601String(),
      'isLiked': news['isLiked'] ?? false,
      'isBookmarked': news['isBookmarked'] ?? false,
      'isFollowing': news['isFollowing'] ?? false,
      'isReposted': news['isReposted'] ?? false,
      'is_repost': news['is_repost'] ?? false,
      'is_channel_post': news['is_channel_post'] ?? false,
    };
  }
}