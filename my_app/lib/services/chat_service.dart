// services/chat_service.dart
import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';

import '../pages/chat/models/chat_member.dart';
import '../pages/chat/models/chat_message.dart';
import '../pages/chat/models/enums.dart';

class ChatService {
  final Random _random = Random();
  final Map<String, List<ChatMessage>> _roomMessages = {};
  final Map<String, List<ChatMember>> _roomMembers = {};
  final Map<String, String> _translationCache = {};

  // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
  Future<void> _simulateNetworkDelay([int minMs = 300, int maxMs = 1000]) async {
    await Future.delayed(Duration(milliseconds: minMs + _random.nextInt(maxMs - minMs)));
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  Future<List<ChatMessage>> loadMessages(String roomId, {int limit = 50, int offset = 0}) async {
    await _simulateNetworkDelay();

    if (!_roomMessages.containsKey(roomId)) {
      _roomMessages[roomId] = await _generateSampleMessages(roomId);
    }

    final allMessages = _roomMessages[roomId]!;
    final startIndex = max(0, allMessages.length - offset - limit);
    final endIndex = allMessages.length - offset;

    if (startIndex >= endIndex) {
      return [];
    }

    return allMessages.sublist(startIndex, endIndex).reversed.toList();
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<ChatMessage> sendMessage(ChatMessage message) async {
    await _simulateNetworkDelay(200, 500);

    if (!_roomMessages.containsKey(message.roomId)) {
      _roomMessages[message.roomId] = [];
    }

    final sentMessage = message.copyWith(
      id: 'msg-${DateTime.now().millisecondsSinceEpoch}-${_random.nextInt(1000)}',
      status: MessageStatus.sent,
      time: DateTime.now(),
    );

    _roomMessages[message.roomId]!.add(sentMessage);

    return sentMessage;
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<ChatMessage> editMessage(String messageId, String newText, String roomId) async {
    await _simulateNetworkDelay();

    final messages = _roomMessages[roomId] ?? [];
    final messageIndex = messages.indexWhere((msg) => msg.id == messageId);

    if (messageIndex == -1) {
      throw Exception('Message not found');
    }

    final updatedMessage = messages[messageIndex].copyWith(
      text: newText,
      isEdited: true,
      editTime: DateTime.now(),
    );

    messages[messageIndex] = updatedMessage;
    return updatedMessage;
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<bool> deleteMessage(String messageId, String roomId) async {
    await _simulateNetworkDelay();

    final messages = _roomMessages[roomId] ?? [];
    final messageIndex = messages.indexWhere((msg) => msg.id == messageId);

    if (messageIndex == -1) {
      return false;
    }

    messages.removeAt(messageIndex);
    return true;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ AI
  Future<String> getAIResponse(String userMessage, String roomId, {String? context}) async {
    await _simulateNetworkDelay(1000, 3000);

    final responses = await _getEnhancedResponses(userMessage, roomId, context);
    return responses[_random.nextInt(responses.length)];
  }

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ AI
  Future<List<String>> _getEnhancedResponses(String message, String roomId, String? context) async {
    message = message.toLowerCase();

    // –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞
    if (message.contains('–º–∞—Ç—á') || message.contains('–∏–≥—Ä–∞') || message.contains('game')) {
      return [
        '–î–∞, —ç—Ç–æ –±—ã–ª –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π –º–∞—Ç—á! –ö–∞–∫ –≤–∞–º –∏–≥—Ä–∞ –∫–æ–º–∞–Ω–¥? ‚öΩ',
        '–ö–∞–∫–æ–π –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –º–∞—Ç—á! –û—Å–æ–±–µ–Ω–Ω–æ –≤–ø–µ—á–∞—Ç–ª–∏–ª–∞ –∏–≥—Ä–∞ –≤–æ –≤—Ç–æ—Ä–æ–º —Ç–∞–π–º–µ. üèÜ',
        '–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞! –ö—Ç–æ –Ω–∞ –≤–∞—à –≤–∑–≥–ª—è–¥ –±—ã–ª –ª—É—á—à–∏–º –∏–≥—Ä–æ–∫–æ–º? ü•Ö',
        '–ú–∞—Ç—á –±—ã–ª –ø—Ä–æ—Å—Ç–æ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π! –ù–∞–¥–µ—é—Å—å, —Å–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞ –±—É–¥–µ—Ç —Ç–∞–∫–æ–π –∂–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π. ‚öΩ',
      ];
    }

    if (message.contains('–≥–æ–ª') || message.contains('—Å—á–µ—Ç') || message.contains('score')) {
      return [
        '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π –≥–æ–ª! –¢–µ—Ö–Ω–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –±—ã–ª–∞ –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ! ü•Ö',
        '–ö–∞–∫ –≤–∞–º —ç—Ç–æ—Ç –≥–æ–ª? –ü–æ-–º–æ–µ–º—É, —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö –≤ —Å–µ–∑–æ–Ω–µ! ‚öΩ',
        '–°—á–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–∞–∂–∞–µ—Ç –∏–≥—Ä—É. –ö–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞–∑–∞–ª–∏ –æ—Ç–ª–∏—á–Ω—É—é –±–æ—Ä—å–±—É! üî•',
        '–≠—Ç–æ—Ç –≥–æ–ª —Ä–µ—à–∏–ª –∏—Å—Ö–æ–¥ –º–∞—Ç—á–∞! –ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π –º–æ–º–µ–Ω—Ç! üéØ',
      ];
    }

    if (message.contains('–∫–æ–º–∞–Ω–¥–∞') || message.contains('team') || message.contains('–∏–≥—Ä–æ–∫') || message.contains('player')) {
      return [
        '–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞–ª–∞ –æ—Ç–ª–∏—á–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä! –û—Å–æ–±–µ–Ω–Ω–æ –≤ –∑–∞—â–∏—Ç–µ. üõ°Ô∏è',
        '–ö–∞–∫–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–æ–∏–∑–≤–µ–ª –Ω–∞ –≤–∞—Å –Ω–∞–∏–±–æ–ª—å—à–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ? –î–ª—è –º–µ–Ω—è —ç—Ç–æ –±—ã–ª –Ω–æ–º–µ—Ä 10! ‚≠ê',
        '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞ –≤—ã—Å–æ—Ç–µ! –ó–∞–º–µ—Ç–∏–ª–∏ –∫–∞–∫ –æ–Ω–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç? ü§ù',
        '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∞ –∫–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ, –∫–∞–∫–∏–µ –∑–∞–º–µ–Ω—ã —Å—Ç–æ–∏–ª–æ —Å–¥–µ–ª–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä—É? üß†',
      ];
    }

    if (message.contains('—Ç—Ä–µ–Ω–µ—Ä') || message.contains('coach') || message.contains('—Å—Ç—Ä–∞—Ç–µ–≥–∏')) {
      return [
        '–¢—Ä–µ–Ω–µ—Ä—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ –±—ã–ª–∞ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞! –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ —Ö–æ–¥—É –º–∞—Ç—á–∞. üë®‚Äçüíº',
        '–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ä–∞–≤–¥–∞–ª–∞ —Å–µ–±—è. –ß—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö? üéØ',
        '–ó–∞–º–µ–Ω—ã –≤–æ –≤—Ç–æ—Ä–æ–º —Ç–∞–π–º–µ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∏–≥—Ä—É. –ì–µ–Ω–∏–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞! üîÑ',
        '–ö–∞–∫ –≤–∞–º —Ä–∞–±–æ—Ç–∞ —Ç—Ä–µ–Ω–µ—Ä—Å–∫–æ–≥–æ —à—Ç–∞–±–∞ –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ? –ü–æ-–º–æ–µ–º—É, –æ–Ω–∏ –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å! üí™',
      ];
    }

    if (message.contains('–≤—Ä–µ–º—è') || message.contains('when') || message.contains('–∫–æ–≥–¥–∞')) {
      return [
        '–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 20:00. –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ! üïó',
        '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ –ª–∏–≥–∏. –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ—á–µ–Ω—å –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π! üìÖ',
        '–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è –≤ 19:30, –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ! üì∫',
        '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∏–≥—Ä—ã –±—É–¥—É—Ç –≤ —ç—Ç–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ. –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏—è–º! üèÜ',
      ];
    }

    if (message.contains('–ø–æ–≥–æ–¥') || message.contains('weather') || message.contains('–¥–æ–∂–¥')) {
      return [
        '–ü–æ–≥–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤–ª–∏—è–ª–∞ –Ω–∞ –∏–≥—Ä—É. –ó–∞–º–µ—Ç–∏–ª–∏ –∫–∞–∫ –≤–µ—Ç–µ—Ä –º–µ—à–∞–ª –¥–∞–ª—å–Ω–∏–º –ø–µ—Ä–µ–¥–∞—á–∞–º? üå¨Ô∏è',
        '–î–æ–∂–¥—å –¥–æ–±–∞–≤–∏–ª –æ—Å—Ç—Ä–æ—Ç—ã –∏–≥—Ä–µ! –ú—è—á —Å–∫–æ–ª—å–∑–∏–ª —Å–æ–≤—Å–µ–º –ø–æ-–¥—Ä—É–≥–æ–º—É. üåßÔ∏è',
        '–ò–≥—Ä–∞ –≤ —Ç–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –ö–æ–º–∞–Ω–¥—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å –¥–æ—Å—Ç–æ–π–Ω–æ! üí™',
        '–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∫–æ–º–∞–Ω–¥! ‚òÄÔ∏èüåßÔ∏è',
      ];
    }

    if (message.contains('–ø—Ä–∏–≤–µ—Ç') || message.contains('hi') || message.contains('hello')) {
      return [
        '–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ! üòä',
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤—ã –æ–±—Å—É–∂–¥–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è? ‚öΩ',
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ö–∞–∫ –≤–∞—à–∞ –ª—é–±–∏–º–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã—Å—Ç—É–ø–∞–µ—Ç –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ? üèÜ',
        '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ª–∏—á–Ω—ã–π –º–∞—Ç—á —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –Ω–µ –ø—Ä–∞–≤–¥–∞ –ª–∏? üëã',
      ];
    }

    if (message.contains('–∫–∞–∫ –¥–µ–ª–∞') || message.contains('how are you')) {
      return [
        '–û—Ç–ª–∏—á–Ω–æ! –û–±—Å—É–∂–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è. –ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞? ‚öΩ',
        '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–æ–ª—å–∫–æ —á—Ç–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–ª highlights –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –º–∞—Ç—á–∞. –ê –≤—ã —Å–º–æ—Ç—Ä–µ–ª–∏? üì∫',
        '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –°–ø–æ—Ä—Ç –≤—Å–µ–≥–¥–∞ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ö–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞? üòä',
        '–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤–ª—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–∞—Ç—á—É. –ê —É –≤–∞—Å –∫–∞–∫ –Ω–æ–≤–æ—Å—Ç–∏? üìä',
      ];
    }

    if (message.contains('—Å–ø–∞—Å–∏–±–æ') || message.contains('thank you')) {
      return [
        '–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ —Å–ø–æ—Ä—Ç–∞! üéâ',
        '–ù–µ –∑–∞ —á—Ç–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ–π –∏–≥—Ä–æ–π! ‚öΩ',
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –ï—Å–ª–∏ –±—É–¥—É—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å! üòä',
        '–†–∞–¥ –ø–æ–º–æ—á—å! –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏! üëè',
      ];
    }

    // –û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    final generalResponses = [
      '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! –ß—Ç–æ –µ—â–µ –¥—É–º–∞–µ—Ç–µ –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É? ü§î',
      '–°–æ–≥–ª–∞—Å–µ–Ω —Å –≤–∞–º–∏! –î–æ–±–∞–≤–ª—é, —á—Ç–æ –≤–∞–∂–Ω–∞ —Ç–∞–∫–∂–µ –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞. üí™',
      '–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. üó£Ô∏è',
      '–û—Ç–ª–∏—á–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ! –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –≤–∞—à—É —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è. üëç',
      '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê —á—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ —Ç–∞–∫—Ç–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ? üéØ',
      '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å –º–Ω–µ–Ω–∏–µ–º! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞. üôè',
      '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å –≤–∞–º–∏ —Å–æ–≥–ª–∞—Å–µ–Ω! –î–æ–±–∞–≤–ª—é, —á—Ç–æ –∫–ª—é—á–µ–≤—ã–º –±—ã–ª –º–æ–º–µ–Ω—Ç –Ω–∞ 65-–π –º–∏–Ω—É—Ç–µ. ‚è±Ô∏è',
      '–û—Ç–ª–∏—á–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è! –ö–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ —Ä–µ—à–∏–ª–æ –∏—Å—Ö–æ–¥ –º–∞—Ç—á–∞? üèÖ',
      '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–∑–≥–ª—è–¥! –ê –∫–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –∏–≥—Ä—É –≤—Ä–∞—Ç–∞—Ä—è? ü•Ö',
      '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ —Å–∫–∞–∑–∞–Ω–æ! –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–¥–µ–ª—è—é –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ. üëå',
      '–û—Ç–ª–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑! –ß—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞—Ö –∫–æ–º–∞–Ω–¥—ã –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ? üìà',
      '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è! –ê –∫–∞–∫ –≤–∞–º —Ä–∞–±–æ—Ç–∞ —Å—É–¥–µ–π –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ? üë®‚Äç‚öñÔ∏è',
    ];

    return generalResponses;
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
  Future<List<ChatMember>> loadRoomMembers(String roomId) async {
    await _simulateNetworkDelay(500, 1500);

    if (!_roomMembers.containsKey(roomId)) {
      _roomMembers[roomId] = await _generateSampleMembers();
    }

    return _roomMembers[roomId]!;
  }

  // –ü–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<String?> translateMessage(String text, String targetLanguage) async {
    final cacheKey = '${text.hashCode}_$targetLanguage';

    if (_translationCache.containsKey(cacheKey)) {
      return _translationCache[cacheKey];
    }

    await _simulateNetworkDelay(500, 2000);

    final translations = {
      '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –†–∞–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é! üëã':
      'Hello everyone! Glad to join the discussion! üëã',
      '–ö—Ç–æ —É–∂–µ —Å–º–æ—Ç—Ä–µ–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á? –ö–∞–∫–∏–µ –º—ã—Å–ª–∏? ‚öΩ':
      'Who has already watched the last match? Any thoughts? ‚öΩ',
      '–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞ –±—ã–ª–∞! –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞—â–∏—Ç–µ.':
      'It was a great game! I especially liked the team\'s defensive strategy.',
      '–ê –∫–∞–∫ –≤–∞–º –≥–æ–ª –Ω–∞ 89-–π –º–∏–Ω—É—Ç–µ? –ü—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! ü•Ö':
      'What about the goal at the 89th minute? Just great! ü•Ö',
      '–ö—Å—Ç–∞—Ç–∏, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –º–∞—Ç—á! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 20:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.':
      'By the way, don\'t miss tomorrow\'s match! Starts at 20:00 Moscow time.',
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç! üéâ':
      'Welcome to the chat! üéâ',
      '–ß—Ç–æ –¥—É–º–∞–µ—Ç–µ –æ —Å–æ—Å—Ç–∞–≤–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á?':
      'What do you think about the lineup for the next match?',
      '–û—Ç–ª–∏—á–Ω—ã–π –ø–∞—Å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ!':
      'Great pass and finish!',
      '–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞–ª–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–µ–≥–æ–¥–Ω—è.':
      'The team showed character today.',
      '–ö–∞–∫ –≤–∞–º —Å—É–¥–µ–π—Å—Ç–≤–æ –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ?':
      'How do you like the refereeing in this match?',
    };

    final translation = translations[text] ?? '$text [Translated]';
    _translationCache[cacheKey] = translation;

    return translation;
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
  Future<Map<String, Set<String>>?> addReaction(
      String messageId,
      String roomId,
      String reaction,
      String userName,
      ) async {
    await _simulateNetworkDelay(100, 300);

    final messages = _roomMessages[roomId] ?? [];
    final messageIndex = messages.indexWhere((msg) => msg.id == messageId);

    if (messageIndex == -1) {
      return null;
    }

    final message = messages[messageIndex];
    final currentReactions = Map<String, Set<String>>.from(message.reactions ?? {});
    final usersWhoReacted = currentReactions[reaction] ?? <String>{};

    if (usersWhoReacted.contains(userName)) {
      usersWhoReacted.remove(userName);
      if (usersWhoReacted.isEmpty) {
        currentReactions.remove(reaction);
      }
    } else {
      usersWhoReacted.add(userName);
      currentReactions[reaction] = usersWhoReacted;
    }

    messages[messageIndex] = message.copyWith(reactions: currentReactions);

    return currentReactions;
  }

  // –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ/–æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<bool> toggleMessagePin(String messageId, String roomId) async {
    await _simulateNetworkDelay(200, 500);

    final messages = _roomMessages[roomId] ?? [];
    final messageIndex = messages.indexWhere((msg) => msg.id == messageId);

    if (messageIndex == -1) {
      return false;
    }

    final message = messages[messageIndex];
    messages[messageIndex] = message.copyWith(isPinned: !message.isPinned);

    return true;
  }

  // –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
  Future<List<ChatMessage>> searchMessages(String roomId, String query) async {
    await _simulateNetworkDelay(300, 1000);

    final messages = _roomMessages[roomId] ?? [];

    return messages.where((message) {
      return message.text.toLowerCase().contains(query.toLowerCase()) &&
          message.messageType == MessageType.text;
    }).toList();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  Future<List<ChatMessage>> getPinnedMessages(String roomId) async {
    await _simulateNetworkDelay(200, 600);

    final messages = _roomMessages[roomId] ?? [];

    return messages.where((message) => message.isPinned).toList();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è sample —Å–æ–æ–±—â–µ–Ω–∏–π
  Future<List<ChatMessage>> _generateSampleMessages(String roomId) async {
    final sampleMessages = [
      ChatMessage(
        id: '1',
        roomId: roomId,
        text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç! üéâ\n–ó–¥–µ—Å—å –æ–±—Å—É–∂–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –º–∞—Ç—á–∏. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏—è–º–∏!',
        sender: '–°–∏—Å—Ç–µ–º–∞',
        time: DateTime.now().subtract(const Duration(hours: 2)),
        isMe: false,
        messageType: MessageType.system,
        status: MessageStatus.sent,
      ),
      ChatMessage(
        id: '2',
        roomId: roomId,
        text: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –†–∞–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é! üëã',
        sender: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
        time: DateTime.now().subtract(const Duration(hours: 1, minutes: 45)),
        isMe: false,
        reactions: {'üëç': {'–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤', '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞'}, '‚ù§Ô∏è': {'–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤'}},
        status: MessageStatus.sent,
        userColor: Colors.blue,
        userAvatar: 'https://i.pravatar.cc/150?img=1',
      ),
      ChatMessage(
        id: '3',
        roomId: roomId,
        text: '–ö—Ç–æ —É–∂–µ —Å–º–æ—Ç—Ä–µ–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á? –ö–∞–∫–∏–µ –º—ã—Å–ª–∏? ‚öΩ',
        sender: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        time: DateTime.now().subtract(const Duration(hours: 1, minutes: 30)),
        isMe: false,
        reactions: {'‚ù§Ô∏è': {'–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤'}, 'üî•': {'–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤'}},
        status: MessageStatus.sent,
        userColor: Colors.pink,
        userAvatar: 'https://i.pravatar.cc/150?img=2',
      ),
      ChatMessage(
        id: '4',
        roomId: roomId,
        text: '–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞ –±—ã–ª–∞! –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞—â–∏—Ç–µ. –ù–∞ –º–æ–π –≤–∑–≥–ª—è–¥, –∫–ª—é—á–µ–≤—ã–º –º–æ–º–µ–Ω—Ç–æ–º —Å—Ç–∞–ª–∞ –∑–∞–º–µ–Ω–∞ –Ω–∞ 70-–π –º–∏–Ω—É—Ç–µ.',
        sender: '–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤',
        time: DateTime.now().subtract(const Duration(hours: 1, minutes: 15)),
        isMe: false,
        status: MessageStatus.sent,
        userColor: Colors.green,
        userAvatar: 'https://i.pravatar.cc/150?img=3',
      ),
      ChatMessage(
        id: '5',
        roomId: roomId,
        text: '–ê –∫–∞–∫ –≤–∞–º –≥–æ–ª –Ω–∞ 89-–π –º–∏–Ω—É—Ç–µ? –ü—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! ü•Ö',
        sender: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
        time: DateTime.now().subtract(const Duration(hours: 1)),
        isMe: false,
        isEdited: true,
        editTime: DateTime.now().subtract(const Duration(minutes: 55)),
        status: MessageStatus.sent,
        userColor: Colors.blue,
        userAvatar: 'https://i.pravatar.cc/150?img=1',
      ),
      ChatMessage(
        id: '6',
        roomId: roomId,
        text: '–ö—Å—Ç–∞—Ç–∏, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –º–∞—Ç—á! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 20:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏. –ë—É–¥–µ—Ç –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üèÜ',
        sender: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        time: DateTime.now().subtract(const Duration(minutes: 45)),
        isMe: false,
        isPinned: true,
        status: MessageStatus.sent,
        userColor: Colors.pink,
        userAvatar: 'https://i.pravatar.cc/150?img=2',
      ),
      ChatMessage(
        id: '7',
        roomId: roomId,
        text: 'üéµ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        sender: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
        time: DateTime.now().subtract(const Duration(minutes: 30)),
        isMe: false,
        messageType: MessageType.voice,
        status: MessageStatus.sent,
        userColor: Colors.blue,
        userAvatar: 'https://i.pravatar.cc/150?img=1',
        voiceDuration: 30,
      ),
    ];

    return sampleMessages;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è sample —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  Future<List<ChatMember>> _generateSampleMembers() async {
    return [
      ChatMember(
        id: '1',
        name: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
        avatar: 'https://i.pravatar.cc/150?img=1',
        isOnline: true,
        role: MemberRole.admin,
        lastSeen: DateTime.now(),
        joinDate: DateTime.now().subtract(const Duration(days: 30)),
      ),
      ChatMember(
        id: '2',
        name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        avatar: 'https://i.pravatar.cc/150?img=2',
        isOnline: true,
        role: MemberRole.moderator,
        lastSeen: DateTime.now(),
        joinDate: DateTime.now().subtract(const Duration(days: 25)),
      ),
      ChatMember(
        id: '3',
        name: '–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤',
        avatar: 'https://i.pravatar.cc/150?img=3',
        isOnline: true,
        role: MemberRole.member,
        lastSeen: DateTime.now(),
        joinDate: DateTime.now().subtract(const Duration(days: 15)),
      ),
      ChatMember(
        id: '4',
        name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
        avatar: 'https://i.pravatar.cc/150?img=4',
        isOnline: false,
        role: MemberRole.member,
        lastSeen: DateTime.now().subtract(const Duration(hours: 2)),
        joinDate: DateTime.now().subtract(const Duration(days: 10)),
      ),
      ChatMember(
        id: '5',
        name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
        avatar: 'https://i.pravatar.cc/150?img=5',
        isOnline: false,
        role: MemberRole.member,
        lastSeen: DateTime.now().subtract(const Duration(days: 1)),
        joinDate: DateTime.now().subtract(const Duration(days: 5)),
      ),
    ];
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  void clearTranslationCache() {
    _translationCache.clear();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
  Future<Map<String, dynamic>> getRoomStats(String roomId) async {
    await _simulateNetworkDelay(500, 1500);

    final messages = _roomMessages[roomId] ?? [];
    final members = _roomMembers[roomId] ?? [];

    final today = DateTime.now();
    final todayMessages = messages.where((msg) =>
    msg.time.year == today.year &&
        msg.time.month == today.month &&
        msg.time.day == today.day
    ).length;

    final onlineMembers = members.where((member) => member.isOnline).length;

    return {
      'totalMessages': messages.length,
      'totalMembers': members.length,
      'onlineMembers': onlineMembers,
      'todayMessages': todayMessages,
      'pinnedMessages': messages.where((msg) => msg.isPinned).length,
    };
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã (–¥–ª—è real-time —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
  Stream<List<ChatMessage>> watchRoomMessages(String roomId) {
    final controller = StreamController<List<ChatMessage>>();

    // –°–∏–º—É–ª—è—Ü–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    Timer.periodic(const Duration(seconds: 10), (timer) {
      if (!controller.isClosed && _roomMessages.containsKey(roomId)) {
        controller.add(_roomMessages[roomId]!);
      }
    });

    return controller.stream;
  }
}