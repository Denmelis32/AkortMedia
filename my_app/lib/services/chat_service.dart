// services/chat_service.dart
import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';

import '../pages/chat/models/chat_member.dart';
import '../pages/chat/models/chat_message.dart';
import '../pages/chat/models/chat_session.dart';
import '../pages/chat/models/chat_settings.dart';
import '../pages/chat/models/enums.dart';

class ChatService {
  static final ChatService _instance = ChatService._internal();
  factory ChatService() => _instance;
  ChatService._internal();

  final Random _random = Random();
  final Map<String, List<ChatMessage>> _roomMessages = {};
  final Map<String, List<ChatMember>> _roomMembers = {};
  final Map<String, ChatSession> _chatSessions = {};
  final Map<String, ChatSettings> _chatSettings = {};
  final Map<String, String> _translationCache = {};

  // –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –±–æ—Ç—ã
  final Map<String, List<String>> _conversationContext = {};
  final Map<String, String> _lastUserMessage = {};
  final List<ChatBot> _availableBots = [];
  final Map<String, StreamController<List<ChatMessage>>> _roomControllers = {};

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    _initializeBots();
    await _loadDefaultSettings();
  }

  void _initializeBots() {
    _availableBots.addAll([
      ChatBot(
        id: 'sports_analyst',
        name: '–ê–ª–µ–∫—Å–µ–π –ê–Ω–∞–ª–∏—Ç–∏–∫–æ–≤',
        avatar: 'üß†',
        description: '–ë—ã–≤—à–∏–π —Ç—Ä–µ–Ω–µ—Ä, —Ç–µ–ø–µ—Ä—å –∞–Ω–∞–ª–∏—Ç–∏–∫',
        isActive: true,
        personality: 'analytical',
        responseStyle: 'detailed',
        color: Colors.blue,
        expertise: ['—Ç–∞–∫—Ç–∏–∫–∞', '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è', '—Ç–µ—Ö–Ω–∏–∫–∞', '–∞–Ω–∞–ª–∏–∑', '—Ç—Ä–µ–Ω–µ—Ä'],
        favoriteTeams: ['–ó–µ–Ω–∏—Ç', '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞', '–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥'],
        memory: {},
        responseDelay: 1500,
      ),
      ChatBot(
        id: 'funny_commentator',
        name: '–ú–∏—Ö–∞–∏–ª –Æ–º–æ—Ä–∏—Å—Ç–∏–Ω—Å–∫–∏–π',
        avatar: 'üòÇ',
        description: '–ö–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä —Å –æ—Ç–ª–∏—á–Ω—ã–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞',
        isActive: true,
        personality: 'funny',
        responseStyle: 'entertaining',
        color: Colors.orange,
        expertise: ['—é–º–æ—Ä', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã', '–∏—Å—Ç–æ—Ä–∏–∏', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'],
        favoriteTeams: ['–°–ø–∞—Ä—Ç–∞–∫', '–õ–∏–≤–µ—Ä–ø—É–ª—å', '–ë–æ—Ä—É—Å—Å–∏—è –î–æ—Ä—Ç–º—É–Ω–¥'],
        memory: {},
        responseDelay: 2000,
      ),
      ChatBot(
        id: 'stats_expert',
        name: '–î–º–∏—Ç—Ä–∏–π –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–≤',
        avatar: 'üìà',
        description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫',
        isActive: true,
        personality: 'professional',
        responseStyle: 'factual',
        color: Colors.green,
        expertise: ['—Ü–∏—Ñ—Ä—ã', '—Ä–µ–∫–æ—Ä–¥—ã', '—Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏', '–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö'],
        favoriteTeams: ['–¶–°–ö–ê', '–ë–∞–≤–∞—Ä–∏—è', '–Æ–≤–µ–Ω—Ç—É—Å'],
        memory: {},
        responseDelay: 1200,
      ),
      ChatBot(
        id: 'historian',
        name: '–°–µ—Ä–≥–µ–π –ò—Å—Ç–æ—Ä–∏–∫–æ–≤',
        avatar: 'üìö',
        description: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—Ä–∏–∫ –∏ –∞—Ä—Ö–∏–≤–∞—Ä–∏—É—Å',
        isActive: true,
        personality: 'knowledgeable',
        responseStyle: 'storytelling',
        color: Colors.purple,
        expertise: ['–∏—Å—Ç–æ—Ä–∏—è', '–ª–µ–≥–µ–Ω–¥—ã', '—ç–≤–æ–ª—é—Ü–∏—è', '–∞—Ä—Ö–∏–≤—ã'],
        favoriteTeams: ['–î–∏–Ω–∞–º–æ', '–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥', '–ú–∏–ª–∞–Ω'],
        memory: {},
        responseDelay: 1800,
      ),
    ]);
  }

  Future<void> _loadDefaultSettings() async {
    _chatSettings['default'] = ChatSettings(
      id: 'default',
      enableBotResponses: true,
      translationEnabled: false,
      soundEnabled: true,
      vibrationEnabled: true,
      fontSize: 16.0,
      theme: ThemeMode.light,
    );
  }

  // === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ß–ê–¢–ê ===

  Future<List<ChatMessage>> loadMessages(String roomId, {int limit = 50, int offset = 0}) async {
    await _simulateNetworkDelay();

    if (!_roomMessages.containsKey(roomId)) {
      _roomMessages[roomId] = await _generateSampleMessages(roomId);
    }

    final allMessages = _roomMessages[roomId]!;
    final startIndex = max(0, allMessages.length - offset - limit);
    final endIndex = allMessages.length - offset;

    if (startIndex >= endIndex) return [];

    return allMessages.sublist(startIndex, endIndex).reversed.toList();
  }

  Future<ChatMessage> sendMessage(ChatMessage message) async {
    await _simulateNetworkDelay(200, 500);

    if (!_roomMessages.containsKey(message.roomId)) {
      _roomMessages[message.roomId] = [];
    }

    final sentMessage = message.copyWith(
      id: 'msg-${DateTime.now().millisecondsSinceEpoch}-${_random.nextInt(1000)}',
      status: MessageStatus.sent,
      time: DateTime.now(),
    );

    _roomMessages[message.roomId]!.add(sentMessage);
    _notifyMessageUpdate(message.roomId);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    _updateConversationContext(message.roomId, message.text, message.sender);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–æ–≤
    final settings = _chatSettings[message.roomId] ?? _chatSettings['default']!;
    if (settings.enableBotResponses &&
        message.messageType == MessageType.text &&
        !message.sender.contains('–ë–æ—Ç') &&
        !message.isBot) {
      _triggerBotResponses(message.roomId, message.text, message.sender);
    }

    return sentMessage;
  }

  void _updateConversationContext(String roomId, String message, String sender) {
    _conversationContext[roomId] ??= [];
    _conversationContext[roomId]!.add('$sender: $message');

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if (_conversationContext[roomId]!.length > 10) {
      _conversationContext[roomId]!.removeAt(0);
    }

    _lastUserMessage[roomId] = message;
  }

  Future<ChatMessage> editMessage(String messageId, String newText, String roomId) async {
    await _simulateNetworkDelay();

    final messages = _roomMessages[roomId] ?? [];
    final messageIndex = messages.indexWhere((msg) => msg.id == messageId);

    if (messageIndex == -1) {
      throw Exception('Message not found');
    }

    final updatedMessage = messages[messageIndex].copyWith(
      text: newText,
      isEdited: true,
      editTime: DateTime.now(),
    );

    messages[messageIndex] = updatedMessage;
    _notifyMessageUpdate(roomId);

    return updatedMessage;
  }

  Future<bool> deleteMessage(String messageId, String roomId) async {
    await _simulateNetworkDelay();

    final messages = _roomMessages[roomId] ?? [];
    final messageIndex = messages.indexWhere((msg) => msg.id == messageId);

    if (messageIndex == -1) return false;

    messages.removeAt(messageIndex);
    _notifyMessageUpdate(roomId);

    return true;
  }

  // === –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ë–û–¢–û–í ===

  void _triggerBotResponses(String roomId, String userMessage, String userName) async {
    final activeBots = _getActiveBotsForRoom(roomId);

    for (final bot in activeBots) {
      if (_shouldBotRespond(bot, userMessage, roomId)) {
        // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        final delay = bot.responseDelay + _random.nextInt(2000);
        await Future.delayed(Duration(milliseconds: delay));

        final response = await _generateBotResponse(bot, userMessage, roomId, userName);
        if (response.isNotEmpty) {
          final botMessage = ChatMessage(
            id: 'bot-${DateTime.now().millisecondsSinceEpoch}-${_random.nextInt(1000)}',
            roomId: roomId,
            text: response,
            sender: bot.name,
            time: DateTime.now().add(Duration(milliseconds: delay)),
            isMe: false,
            messageType: MessageType.text,
            status: MessageStatus.sent,
            userColor: bot.color,
            userAvatar: bot.avatar,
            isBot: true,
            botId: bot.id,
            botPersonality: bot.personality,
          );

          _roomMessages[roomId]!.add(botMessage);
          _notifyMessageUpdate(roomId);

          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–æ–º –±–æ—Ç–∞
          _updateConversationContext(roomId, response, bot.name);
        }
      }
    }
  }

  List<ChatBot> _getActiveBotsForRoom(String roomId) {
    return _availableBots.where((bot) => bot.isActive).toList();
  }

  bool _shouldBotRespond(ChatBot bot, String userMessage, String roomId) {
    final message = userMessage.toLowerCase();
    final responseChance = _random.nextDouble();

    // –ë–æ—Ç—ã –∑–∞–ø–æ–º–∏–Ω–∞—é—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∞–∫—Ç–∏–≤–Ω–µ–µ —Ä–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ "—Å–≤–æ–∏" —Ç–µ–º—ã
    final context = _conversationContext[roomId] ?? [];
    final hasRelevantContext = context.any((ctx) =>
        _isTopicRelevantForBot(bot, ctx.toLowerCase()));

    // –ü–æ–≤—ã—à–∞–µ–º —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ —Ç–µ–º–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞
    double baseChance = hasRelevantContext ? 0.6 : 0.3;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
    switch (bot.id) {
      case 'sports_analyst':
        if (message.contains('—Ç–∞–∫—Ç–∏–∫') || message.contains('–∞–Ω–∞–ª–∏–∑') ||
            message.contains('—Å—Ç—Ä–∞—Ç–µ–≥–∏') || message.contains('—Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫') ||
            message.contains('—Ç—Ä–µ–Ω–µ—Ä') || message.contains('–∑–∞–º–µ–Ω')) {
          return responseChance < 0.85;
        }
        if (message.contains('—Å—Ö–µ–º') || message.contains('–ø–æ–∑–∏—Ü–∏–æ–Ω') ||
            message.contains('–ø–æ—Å—Ç—Ä–æ–µ–Ω')) {
          return responseChance < 0.8;
        }
        break;

      case 'funny_commentator':
        if (message.contains('—Å–º–µ—Ö') || message.contains('—é–º–æ—Ä') ||
            message.contains('—à—É—Ç–∫–∞') || message.contains('–∑–∞–±–∞–≤–Ω') ||
            message.contains('–ø—Ä–∏–∫–æ–ª') || message.contains('–∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä')) {
          return responseChance < 0.9;
        }
        if (message.contains('—Å–º–µ—à–Ω') || message.contains('—É–º–æ—Ä–∞') ||
            message.contains('—ç—Ñ–∏—Ä')) {
          return responseChance < 0.75;
        }
        break;

      case 'stats_expert':
        if (message.contains('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫') || message.contains('—Ü–∏—Ñ—Ä') ||
            message.contains('–¥–∞–Ω–Ω') || message.contains('–ø—Ä–æ—Ü–µ–Ω—Ç') ||
            message.contains('—Ä–µ–∫–æ—Ä–¥') || message.contains('—Ç–æ–ø')) {
          return responseChance < 0.95;
        }
        if (message.contains('–ø–æ–∫–∞–∑–∞—Ç–µ–ª') || message.contains('—Ä–µ–∑—É–ª—å—Ç–∞—Ç') ||
            message.contains('—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω')) {
          return responseChance < 0.8;
        }
        break;

      case 'historian':
        if (message.contains('–∏—Å—Ç–æ—Ä–∏') || message.contains('–ø—Ä–æ—à–ª') ||
            message.contains('—Ä–µ–∫–æ—Ä–¥') || message.contains('–ª–µ—Ç –Ω–∞–∑–∞–¥') ||
            message.contains('–ª–µ–≥–µ–Ω–¥') || message.contains('–∫–ª–∞—Å—Å–∏–∫')) {
          return responseChance < 0.9;
        }
        if (message.contains('–∞—Ä—Ö–∏–≤') || message.contains('–≤ –ø—Ä–æ—à–ª–æ–º') ||
            message.contains('–≤—Å–ø–æ–º–Ω')) {
          return responseChance < 0.7;
        }
        break;
    }

    // –û–±—â–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    if (message.contains('–≥–æ–ª') || message.contains('—Å—á–µ—Ç') || message.contains('–º–∞—Ç—á') ||
        message.contains('–∏–≥—Ä') || message.contains('—Ñ—É—Ç–±–æ–ª') || message.contains('–∫–æ–º–∞–Ω–¥–∞')) {
      return responseChance < baseChance + 0.2;
    }

    return responseChance < baseChance;
  }

  bool _isTopicRelevantForBot(ChatBot bot, String topic) {
    return bot.expertise.any((expertise) => topic.contains(expertise)) ||
        bot.favoriteTeams.any((team) => topic.contains(team.toLowerCase()));
  }

  Future<String> _generateBotResponse(ChatBot bot, String userMessage, String roomId, String userName) async {
    await _simulateNetworkDelay(1000, 2000);

    final message = userMessage.toLowerCase();
    final context = _conversationContext[roomId] ?? [];

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –±–æ—Ç–∞
    _updateBotMemory(bot, roomId, userMessage, userName);

    switch (bot.id) {
      case 'sports_analyst':
        return _generateSportsAnalystResponse(bot, message, context, userName, roomId);
      case 'funny_commentator':
        return _generateFunnyCommentatorResponse(bot, message, context, userName, roomId);
      case 'stats_expert':
        return _generateStatsExpertResponse(bot, message, context, userName, roomId);
      case 'historian':
        return _generateHistorianResponse(bot, message, context, userName, roomId);
      default:
        return '';
    }
  }

  void _updateBotMemory(ChatBot bot, String roomId, String message, String userName) {
    bot.memory[roomId] ??= {};
    bot.memory[roomId]!['last_interaction'] = DateTime.now().toString();
    bot.memory[roomId]!['last_user'] = userName;
    bot.memory[roomId]!['interaction_count'] =
        (bot.memory[roomId]!['interaction_count'] ?? 0) + 1;

    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (message.toLowerCase().contains('–ª—é–±–∏–º')) {
      bot.memory[roomId]!['user_preference_$userName'] = '—É–ø–æ–º—è–Ω—É–ª –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è';
    }

    if (message.toLowerCase().contains('–∫–æ–º–∞–Ω–¥–∞')) {
      bot.memory[roomId]!['last_team_mention'] = DateTime.now().toString();
    }
  }

  // === –£–õ–£–ß–®–ï–ù–ù–´–ï –ì–ï–ù–ï–†–ê–¢–û–†–´ –û–¢–í–ï–¢–û–í ===

  String _generateSportsAnalystResponse(ChatBot bot, String message, List<String> context, String userName, String roomId) {
    final memory = bot.memory[roomId] ?? {};
    final lastUser = memory['last_user'] ?? userName;
    final interactionCount = memory['interaction_count'] ?? 0;

    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    final hasGoalContext = context.any((msg) => msg.toLowerCase().contains('–≥–æ–ª'));
    final hasTacticContext = context.any((msg) => msg.toLowerCase().contains('—Ç–∞–∫—Ç–∏–∫'));
    final hasDefenseContext = context.any((msg) => msg.toLowerCase().contains('–∑–∞—â–∏—Ç'));
    final hasAttackContext = context.any((msg) => msg.toLowerCase().contains('–∞—Ç–∞–∫'));

    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    final personalization = interactionCount > 3 ? ', –¥—Ä—É–≥' : '';

    if (hasGoalContext) {
      final goalResponses = [
        'ü•Ö –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –≥–æ–ª –¥–µ—Ç–∞–ª—å–Ω–æ$personalization. –í–∏–∂—É, –∫–∞–∫ $lastUser –æ–±—Ä–∞—Ç–∏–ª –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç. –ü–æ-–º–æ–µ–º—É, —Ä–µ—à–∞—é—â–∏–º –±—ã–ª–∞ —Ä–∞–±–æ—Ç–∞ –∫—Ä–∞–π–Ω–µ–≥–æ –∑–∞—â–∏—Ç–Ω–∏–∫–∞ - –æ–Ω —Å–æ–∑–¥–∞–ª –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –ø–∞—Å–∞.',
        'üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—è –≥–æ–ª–µ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é$personalization: –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é —Å—Ö–µ–º—É "—Å—Ç–µ–Ω–∫–∞ –≤ –¥–≤–∞ –∫–∞—Å–∞–Ω–∏—è". $lastUser, –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏, –∫–∞–∫ —Å–º–µ—Å—Ç–∏–ª—Å—è —Ü–µ–Ω—Ç—Ä –∞—Ç–∞–∫–∏ –ø–µ—Ä–µ–¥ —É–¥–∞—Ä–æ–º?',
        'üéØ –≠—Ç–æ—Ç –≥–æ–ª –Ω–∞–ø–æ–º–Ω–∏–ª –º–Ω–µ –º–∞—Ç—á 2018 –≥–æ–¥–∞$personalization. –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ –±—ã–ª–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ –±—ã—Å—Ç—Ä–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ. $lastUser, –∫–∞–∫ –≤–∞–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –ø—Ä–æ—à–ª—ã–º–∏ —Å–µ–∑–æ–Ω–∞–º–∏?',
        'üí´ –ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≥–æ–ª$personalization! –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–º–µ–Ω—Ç: –∏–≥—Ä–∞ –≤ –æ–¥–Ω–æ –∫–∞—Å–∞–Ω–∏–µ, —Å–º–µ—â–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–æ–π –ª–∏–Ω–∏–∏... $lastUser, –≤—ã –≤–∏–¥–µ–ª–∏, –∫–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ –±–µ–∑ –º—è—á–∞?',
      ];
      return goalResponses[_random.nextInt(goalResponses.length)];
    }

    if (hasTacticContext) {
      final tacticResponses = [
        'üß© –ì–æ–≤–æ—Ä—è –æ —Ç–∞–∫—Ç–∏–∫–µ$personalization, —Å–µ–π—á–∞—Å –Ω–∞–±–ª—é–¥–∞—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ç—Ä–µ–Ω–¥ - –º–Ω–æ–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –Ω–∞ –≥–∏–±—Ä–∏–¥–Ω—É—é –∑–∞—â–∏—Ç—É. $lastUser, –∫–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ, —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—Ç–∞–∫?',
        '‚öôÔ∏è –í —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –ø–ª–∞–Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –º–∞—Ç—á –ø–æ–∫–∞–∑–∞–ª —ç–≤–æ–ª—é—Ü–∏—é –ø—Ä–µ—Å—Å–∏–Ω–≥–∞$personalization. –ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞–ª–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —É–º–Ω–µ–µ, –∞ –Ω–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–µ–µ. –í–∞—à–µ –º–Ω–µ–Ω–∏–µ, $lastUser?',
        'üîß –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞$personalization. –ó–∞–º–µ—Ç–∏–ª, –∫–∞–∫ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–æ–ª—è. $lastUser, –≤—ã —Å–ª–µ–¥–∏–ª–∏ –∑–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è–º–∏ –æ–ø–æ—Ä–Ω—ã—Ö –ø–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤?',
      ];
      return tacticResponses[_random.nextInt(tacticResponses.length)];
    }

    if (hasDefenseContext) {
      final defenseResponses = [
        'üõ°Ô∏è –ê–Ω–∞–ª–∏–∑ –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π$personalization –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. $lastUser, –≤—ã –æ–±—Ä–∞—Ç–∏–ª–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –∑–∞—â–∏—Ç–Ω–æ–π –ª–∏–Ω–∏–∏?',
        'üìè –í –∑–∞—â–∏—Ç–µ —Å–µ–≥–æ–¥–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å—Ç—Ä–æ–∏–ª–∞—Å—å –ª–∏–Ω–∏—è –æ—Ñ—Å–∞–π–¥–∞$personalization. $lastUser, –∫–∞–∫ –≤–∞–º —Ä–∞–±–æ—Ç–∞ –∫—Ä–∞–π–Ω–∏—Ö –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤ –≤ —Å—Ç—Ä–∞—Ö–æ–≤–∫–µ?',
      ];
      return defenseResponses[_random.nextInt(defenseResponses.length)];
    }

    // –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
    final personalizedResponses = [
      'üîç $lastUser, –≤—ã –ø–æ–¥–Ω—è–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å$personalization. –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏, —Ç–æ –≤–∏–¥–Ω–∞ —á–µ—Ç–∫–∞—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è –∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –∫–æ–Ω—Ç—Ä-–∞—Ç–∞–∫—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π. –ö–∞–∫ –≤–∞–º —Ç–∞–∫–∞—è —ç–≤–æ–ª—é—Ü–∏—è –∏–≥—Ä—ã?',
      'üìà –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è$personalization, —Ö–æ—á—É –¥–æ–±–∞–≤–∏—Ç—å: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ—É—Ç–±–æ–ª —Ç—Ä–µ–±—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏. –ò–≥—Ä–æ–∫–∏ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã —É–º–µ—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ö–µ–º–∞—Ö. –°–æ–≥–ª–∞—Å–Ω—ã?',
      'üí≠ –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à –ø–æ–¥—Ö–æ–¥ –∫ –∞–Ω–∞–ª–∏–∑—É$personalization. –ö—Å—Ç–∞—Ç–∏, –≤—á–µ—Ä–∞ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–ª –º–∞—Ç—á –∏ –∑–∞–º–µ—Ç–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –¥–µ—Ç–∞–ª—å –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∞—Ç–∞–∫–∏... –•–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å?',
      'üéì –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–∑–≥–ª—è–¥$personalization, $lastUser! –î–æ–±–∞–≤–ª—é, —á—Ç–æ –≤–∞–∂–Ω–∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏–∫–∞, –Ω–æ –∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞. –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —ç—Ç–∏–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º?',
      '‚öΩ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å$personalization! –ï—Å–ª–∏ —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –∞–Ω–∞–ª–∏–∑, —Ç–æ –º–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å...',
    ];

    return personalizedResponses[_random.nextInt(personalizedResponses.length)];
  }

  String _generateFunnyCommentatorResponse(ChatBot bot, String message, List<String> context, String userName, String roomId) {
    final memory = bot.memory[roomId] ?? {};
    final lastUser = memory['last_user'] ?? userName;
    final interactionCount = memory['interaction_count'] ?? 0;

    final personalization = interactionCount > 2 ? ', –¥—Ä—É–∂–∏—â–µ' : '';

    // –ê–Ω–∞–ª–∏–∑ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    final hasFunnyContext = context.any((msg) =>
    msg.toLowerCase().contains('—Å–º–µ—Ö') ||
        msg.toLowerCase().contains('—à—É—Ç–∫') ||
        msg.toLowerCase().contains('–ø—Ä–∏–∫–æ–ª'));

    final hasMistakeContext = context.any((msg) =>
    msg.toLowerCase().contains('–æ—à–∏–±–∫') ||
        msg.toLowerCase().contains('–ø—Ä–æ–º–∞—Ö'));

    final hasDramaContext = context.any((msg) =>
    msg.toLowerCase().contains('–¥—Ä–∞–º') ||
        msg.toLowerCase().contains('—ç–º–æ—Ü–∏'));

    if (hasMistakeContext) {
      final mistakeJokes = [
        'ü§¶‚Äç‚ôÇÔ∏è –≠—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –±—ã–ª —Å–º–µ—à–Ω–µ–µ$personalization, —á–µ–º –º–æ—è –ø–æ–ø—ã—Ç–∫–∞ —Å—ã–≥—Ä–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª –ø–æ—Å–ª–µ –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–≥–æ —Å—Ç–æ–ª–∞! $lastUser, –≤—ã —Ç–æ–∂–µ –∑–∞–º–µ—Ç–∏–ª–∏, –∫–∞–∫ –∏–≥—Ä–æ–∫ –ø—ã—Ç–∞–ª—Å—è –ø–æ–π–º–∞—Ç—å –º—è—á, —Å–ª–æ–≤–Ω–æ —ç—Ç–æ –±—ã–ª–∞ –≥–æ—Ä—è—á–∞—è –∫–∞—Ä—Ç–æ—à–∫–∞? üòÑ',
        'üé™ –ï—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª–æ —Ü–∏—Ä–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ$personalization, —Ç–æ –∫–ª–æ—É–Ω—ã –±—ã –∞–ø–ª–æ–¥–∏—Ä–æ–≤–∞–ª–∏! $lastUser, –ø—Ä–∏–∑–Ω–∞–≤–∞–π—Ç–µ—Å—å, –≤—ã —Ç–æ–∂–µ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥—É–º–∞–ª–∏, —á—Ç–æ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä—é–∫? ü§°',
        'üçå –≠—Ç–æ—Ç –ø—Ä–æ–º–∞—Ö –¥–æ—Å—Ç–æ–∏–Ω –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–∑–æ—Ä–∞$personalization! $lastUser, –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –º—è—á —Å–µ–≥–æ–¥–Ω—è —Ä–µ—à–∏–ª –ø–æ—à—É—Ç–∏—Ç—å –Ω–∞–¥ –≤—Å–µ–º–∏ –Ω–∞–º–∏!',
        'üé≠ –ù–∞—Å—Ç–æ—è—â–∏–π —Ç–µ–∞—Ç—Ä –∞–±—Å—É—Ä–¥–∞$personalization! $lastUser, –∏–Ω–æ–≥–¥–∞ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –º—ã –Ω–∞ –∫–æ–º–µ–¥–∏–π–Ω–æ–º —à–æ—É, –∞ –Ω–µ –Ω–∞ —Ñ—É—Ç–±–æ–ª–µ! üòÇ',
      ];
      return mistakeJokes[_random.nextInt(mistakeJokes.length)];
    }

    if (hasFunnyContext) {
      final funnyResponses = [
        'üòÇ –û—Ö, $lastUser$personalization, –≤—ã –∑–Ω–∞–µ—Ç–µ, —ç—Ç–æ –Ω–∞–ø–æ–º–Ω–∏–ª–æ –º–Ω–µ –æ–¥–∏–Ω –∑–∞–±–∞–≤–Ω—ã–π —Å–ª—É—á–∞–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ... –ö–∞–∫-—Ç–æ —Ä–∞–∑ –Ω–∞—à –≤—Ä–∞—Ç–∞—Ä—å –ø–µ—Ä–µ–ø—É—Ç–∞–ª —Å–≤–æ–∏ –≤–æ—Ä–æ—Ç–∞ —Å —á—É–∂–∏–º–∏! –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ? ü§™',
        'üé≠ $lastUser, –≤–∞—à —é–º–æ—Ä –ø—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–æ–ª–µ–ø–µ–Ω$personalization! –ö—Å—Ç–∞—Ç–∏, –∑–Ω–∞–µ—Ç–µ, –ø–æ—á–µ–º—É —Ñ—É—Ç–±–æ–ª–∏—Å—Ç—ã –Ω–æ—Å—è—Ç —Ç—Ä—É—Å—ã? –ü–æ—Ç–æ–º—É —á—Ç–æ —à–æ—Ä—Ç—ã –∑–≤—É—á–∞–ª–æ –±—ã –Ω–µ —Ç–∞–∫ —Å–æ–ª–∏–¥–Ω–æ! üòÑ',
        'ü§£ –°–º–µ—Ö –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –∂–∏–∑–Ω—å$personalization, –∫–∞–∫ –∏ —Ö–æ—Ä–æ—à–∏–π —Ñ—É—Ç–±–æ–ª! $lastUser, –¥–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –ø–æ—Å–º–µ–µ–º—Å—è –Ω–∞–¥ —ç—Ç–∏–º –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–º –º–æ–º–µ–Ω—Ç–æ–º!',
      ];
      return funnyResponses[_random.nextInt(funnyResponses.length)];
    }

    if (hasDramaContext) {
      final dramaJokes = [
        'üé¨ –≠—Ç–∞ –¥—Ä–∞–º–∞ –¥–æ—Å—Ç–æ–π–Ω–∞ "–û—Å–∫–∞—Ä–∞"$personalization! $lastUser, –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –º—ã –Ω–∞–±–ª—é–¥–∞–µ–º –Ω–µ —Ñ—É—Ç–±–æ–ª, –∞ –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–µ—Ä–∏–∞–ª! üì∫',
        'üíî –û—Ö —É–∂ —ç—Ç–∏ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Å—Ç–∏$personalization! $lastUser, –∏–Ω–æ–≥–¥–∞ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —ç–º–æ—Ü–∏–π –∑–¥–µ—Å—å –±–æ–ª—å—à–µ, —á–µ–º –≤ –º—ã–ª—å–Ω–æ–π –æ–ø–µ—Ä–µ! üòÖ',
      ];
      return dramaJokes[_random.nextInt(dramaJokes.length)];
    }

    // –£–º–Ω—ã–µ —à—É—Ç–∫–∏ —Å —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    final smartJokes = [
      'üòÑ $lastUser, –æ—Ç–ª–∏—á–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ$personalization! –≠—Ç–æ –Ω–∞–ø–æ–º–Ω–∏–ª–æ –º–Ω–µ, –∫–∞–∫ –æ–¥–∏–Ω —Ç—Ä–µ–Ω–µ—Ä —Å–∫–∞–∑–∞–ª: "–§—É—Ç–±–æ–ª - —ç—Ç–æ –∫–∞–∫ —à–∞—Ö–º–∞—Ç—ã, —Ç–æ–ª—å–∫–æ —Ñ–∏–≥—É—Ä—ã –±–µ–≥–∞—é—Ç, –∞ –∏–Ω–æ–≥–¥–∞ –ø–∞–¥–∞—é—Ç –∫—Ä–∞—Å–∏–≤–æ!" –ö–∞–∫ –≤–∞–º —Ç–∞–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ?',
      'ü§£ –ì–æ–≤–æ—Ä—è –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –∏–≥—Ä–µ$personalization, –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è, VAR —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–ª –¥–æ–ª—å—à–µ, —á–µ–º —è –∏—â—É —Å–≤–æ–∏ –∫–ª—é—á–∏ –ø–æ —É—Ç—Ä–∞–º! –®—É—á—É, –∫–æ–Ω–µ—á–Ω–æ... –ò–ª–∏ –Ω–µ—Ç? üòâ',
      'üé§ $lastUser, –∑–Ω–∞–µ—Ç–µ$personalization, –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ - —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è –æ–±—ä—è—Å–Ω–∏—Ç—å, –ø–æ—á–µ–º—É 22 —á–µ–ª–æ–≤–µ–∫–∞ –±–µ–≥–∞—é—Ç –∑–∞ –æ–¥–Ω–∏–º –º—è—á–æ–º, –∏ –¥–µ–ª–∞–µ—à—å –≤–∏–¥, —á—Ç–æ —ç—Ç–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –º–∏—Ä–µ! –õ—é–±–ª—é —Å–≤–æ—é —Ä–∞–±–æ—Ç—É!',
      '‚öΩ –§—É—Ç–±–æ–ª - —ç—Ç–æ –∂–∏–∑–Ω—å$personalization, $lastUser! –ò–Ω–æ–≥–¥–∞ —Å–º–µ—à–Ω–∞—è, –∏–Ω–æ–≥–¥–∞ –¥—Ä–∞–º–∞—Ç–∏—á–Ω–∞—è, –Ω–æ –≤—Å–µ–≥–¥–∞ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—è! üòÑ',
      'üåü $lastUser$personalization, –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ—Å—Ç–æ –±–ª–µ—Å—Ç—è—â–∏–π! –ù–∞–¥–æ –±—ã –º–Ω–µ –µ–≥–æ –≤ —Å–≤–æ—é –∫–æ–ø–∏–ª–∫—É —é–º–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å! üòä',
    ];

    return smartJokes[_random.nextInt(smartJokes.length)];
  }

  String _generateStatsExpertResponse(ChatBot bot, String message, List<String> context, String userName, String roomId) {
    final memory = bot.memory[roomId] ?? {};
    final lastUser = memory['last_user'] ?? userName;
    final interactionCount = memory['interaction_count'] ?? 0;

    final personalization = interactionCount > 3 ? ', –∫–æ–ª–ª–µ–≥–∞' : '';

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    final possession = '${_random.nextInt(20) + 40}%';
    final passes = _random.nextInt(300) + 500;
    final shots = _random.nextInt(15) + 8;
    final goals = _random.nextInt(4) + 1;
    final passAccuracy = '${_random.nextInt(15) + 80}%';
    final distance = _random.nextInt(50) + 110;

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    final hasStatsContext = context.any((msg) =>
    msg.toLowerCase().contains('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫') ||
        msg.toLowerCase().contains('—Ü–∏—Ñ—Ä'));

    final hasComparisonContext = context.any((msg) =>
    msg.toLowerCase().contains('—Å—Ä–∞–≤–Ω–µ–Ω') ||
        msg.toLowerCase().contains('–ª—É—á—à'));

    final hasEfficiencyContext = context.any((msg) =>
    msg.toLowerCase().contains('—ç—Ñ—Ñ–µ–∫—Ç–∏–≤') ||
        msg.toLowerCase().contains('—Ä–µ–∑—É–ª—å—Ç–∞—Ç'));

    if (hasStatsContext) {
      final statsResponses = [
        'üìä $lastUser$personalization, –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–∞–Ω–Ω—ã–º: –≤–ª–∞–¥–µ–Ω–∏–µ –º—è—á–æ–º $possession, —Ç–æ—á–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á $passAccuracy. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã –Ω–∞ 15% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ –ª–∏–≥–µ. –ö–∞–∫ –≤–∞–º —Ç–∞–∫–∞—è –¥–∏–Ω–∞–º–∏–∫–∞?',
        'üî¢ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç$personalization: –∫–æ–º–∞–Ω–¥–∞ —Å–æ–≤–µ—Ä—à–∏–ª–∞ $passes –ø–µ—Ä–µ–¥–∞—á, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö $passAccuracy –±—ã–ª–∏ —Ç–æ—á–Ω—ã–º–∏. $lastUser, –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–µ—Ä–µ–¥–∞—á –∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏?',
        'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç$personalization: $shots —É–¥–∞—Ä–æ–≤, $goals –≥–æ–ª–æ–≤, –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –ø—Ä–æ–±–µ–≥–∞ $distance –∫–º. $lastUser, –∫–∞–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤–∞—Å —É–¥–∏–≤–∏–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?',
      ];
      return statsResponses[_random.nextInt(statsResponses.length)];
    }

    if (hasComparisonContext) {
      final comparisonResponses = [
        'üìà $lastUser$personalization, –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: –≤ –ø—Ä–æ—à–ª–æ–º —Å–µ–∑–æ–Ω–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞ 8% –Ω–∏–∂–µ. –°–µ–π—á–∞—Å –∫–æ–º–∞–Ω–¥–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∑–∞–≤–µ—Ä—à–∞—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö - $shots —É–¥–∞—Ä–æ–≤, $goals –≥–æ–ª–æ–≤.',
        '‚öñÔ∏è –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ$personalization! –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Ç–æ –Ω—ã–Ω–µ—à–Ω–∏–π —Å–æ—Å—Ç–∞–≤ –Ω–∞ 12% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –≤ –∞—Ç–∞–∫–µ, –Ω–æ –Ω–∞ 5% —Å–ª–∞–±–µ–µ –≤ –æ–±–æ—Ä–æ–Ω–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –≥–æ–¥–æ–º.',
        'üîç –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑$personalization –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç –Ω–∞ 7% –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º. $lastUser, –∫–∞–∫ –≤–∞–º —Ç–∞–∫–∏–µ —Ç–µ–º–ø—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞?',
      ];
      return comparisonResponses[_random.nextInt(comparisonResponses.length)];
    }

    if (hasEfficiencyContext) {
      final efficiency = ((goals/shots)*100).toStringAsFixed(1);
      final efficiencyResponses = [
        'üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏$personalization: $efficiency% –ø—Ä–æ—Ç–∏–≤ —Å—Ä–µ–¥–Ω–∏—Ö 9.2% –ø–æ –ª–∏–≥–µ. $lastUser, –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ?',
        'üí´ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏$personalization –Ω–∞ –≤—ã—Å–æ—Ç–µ! $lastUser, –∫–æ–º–∞–Ω–¥–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Ç–ª–∏—á–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –º–æ–º–µ–Ω—Ç–æ–≤.',
      ];
      return efficiencyResponses[_random.nextInt(efficiencyResponses.length)];
    }

    // –£–º–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã
    final insightResponses = [
      'üí° $lastUser$personalization, –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö–æ—á—É –æ—Ç–º–µ—Ç–∏—Ç—å: –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –≤–ª–∞–¥–µ–Ω–∏–∏ –º—è—á–æ–º –æ–∫–æ–ª–æ 55%. –°–µ–π—á–∞—Å —É –Ω–∏—Ö $possession - –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ –∏–¥–µ–∞–ª—É!',
      'üéØ $lastUser, –≤—ã –æ–±—Ä–∞—Ç–∏–ª–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É$personalization? $shots —É–¥–∞—Ä–æ–≤, $goals –≥–æ–ª–æ–≤ - —ç—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–∫–æ–ª–æ ${((goals/shots)*100).toStringAsFixed(1)}%. –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, —Å—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ª–∏–≥–∏ - 9.2%.',
      'üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É—è —Ü–∏—Ñ—Ä—ã$personalization: –∫–æ–º–∞–Ω–¥–∞ –¥–µ–ª–∞–µ—Ç –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–æ–Ω–Ω—É—é –∏–≥—Ä—É. $passes –ø–µ—Ä–µ–¥–∞—á –∑–∞ –º–∞—Ç—á - —ç—Ç–æ –Ω–∞ 18% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ. –ö–∞–∫ –≤–∞–º —Ç–∞–∫–æ–π —Å—Ç–∏–ª—å?',
      'üî¨ –ì–ª—É–±–æ–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É$personalization –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏. $lastUser, —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏?',
      'üìä $lastUser$personalization, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã, —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –∏–≥—Ä—ã! –°–µ–≥–æ–¥–Ω—è –º—ã –≤–∏–¥–µ–ª–∏ –æ—Ç–ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –≤—Å–µ–º —Ñ—Ä–æ–Ω—Ç–∞–º.',
    ];

    return insightResponses[_random.nextInt(insightResponses.length)];
  }

  String _generateHistorianResponse(ChatBot bot, String message, List<String> context, String userName, String roomId) {
    final memory = bot.memory[roomId] ?? {};
    final lastUser = memory['last_user'] ?? userName;
    final interactionCount = memory['interaction_count'] ?? 0;

    final personalization = interactionCount > 2 ? ', –∑–Ω–∞—Ç–æ–∫' : '';

    // –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–∞–∫—Ç—ã
    final yearsAgo = _random.nextInt(20) + 5;
    final recordYears = _random.nextInt(30) + 10;
    final historicalScore = '${_random.nextInt(4) + 1}:${_random.nextInt(3)}';
    final decade = 1990 + _random.nextInt(3) * 10;

    // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    final hasHistoryContext = context.any((msg) =>
    msg.toLowerCase().contains('–∏—Å—Ç–æ—Ä–∏') ||
        msg.toLowerCase().contains('–ø—Ä–æ—à–ª'));

    final hasRecordContext = context.any((msg) =>
    msg.toLowerCase().contains('—Ä–µ–∫–æ—Ä–¥') ||
        msg.toLowerCase().contains('–¥–æ—Å—Ç–∏–∂–µ–Ω'));

    final hasLegendContext = context.any((msg) =>
    msg.toLowerCase().contains('–ª–µ–≥–µ–Ω–¥') ||
        msg.toLowerCase().contains('–∑–≤–µ–∑–¥'));

    if (hasRecordContext) {
      final recordResponses = [
        'üèÜ $lastUser$personalization, –≥–æ–≤–æ—Ä—è –æ —Ä–µ–∫–æ—Ä–¥–∞—Ö, —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ${recordYears}-–ª–µ—Ç–Ω–µ–π –¥–∞–≤–Ω–æ—Å—Ç–∏. –¢–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ ${_random.nextInt(10) + 15} –º–∞—Ç—á–µ–π –ø–æ–¥—Ä—è–¥!',
        'üìú –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç$personalization: –Ω—ã–Ω–µ—à–Ω–∏–π –±–æ–º–±–∞—Ä–¥–∏—Ä –ø–æ–≤—Ç–æ—Ä–∏–ª —Ä–µ–∫–æ—Ä–¥ –∫–ª—É–±–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –µ—â–µ –≤ 90-—Ö. 25 –≥–æ–ª–æ–≤ –∑–∞ —Å–µ–∑–æ–Ω - –≤–ø–µ—á–∞—Ç–ª—è—é—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
        'ü•á –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ$personalization –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ —Ä–µ–∫–æ—Ä–¥—É —Å–µ–∑–æ–Ω–∞ ${2000 + _random.nextInt(20)} –≥–æ–¥–∞. $lastUser, –≤–µ—Ä–∏—Ç–µ –≤ –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é?',
      ];
      return recordResponses[_random.nextInt(recordResponses.length)];
    }

    if (hasHistoryContext) {
      final historyResponses = [
        'üï∞Ô∏è $lastUser$personalization, –≤—ã –∑–∞—Ç—Ä–æ–Ω—É–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Ç–µ–º—É! –†–æ–≤–Ω–æ $yearsAgo –ª–µ—Ç –Ω–∞–∑–∞–¥ –≤ —Ç–∞–∫–æ–π –∂–µ –¥–µ–Ω—å –∫–æ–º–∞–Ω–¥–∞ —Å—ã–≥—Ä–∞–ª–∞ —Å–æ —Å—á–µ—Ç–æ–º $historicalScore. –ò—Å—Ç–æ—Ä–∏—è –ª—é–±–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ?',
        'üìñ –ò–∑—É—á–∞—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏$personalization, –≤–∏–∂—É –º–Ω–æ–≥–æ –æ–±—â–µ–≥–æ —Å —Ç–∞–∫—Ç–∏–∫–æ–π ${decade}-—Ö –≥–æ–¥–æ–≤. –¢–µ –∂–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã, –Ω–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ.',
        'üèõÔ∏è –ü–æ–≥—Ä—É–∂–∞—è—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é$personalization: —ç—Ç–æ—Ç —Å—Ç–∞–¥–∏–æ–Ω –≤–∏–¥–µ–ª –º–Ω–æ–≥–æ –≤–µ–ª–∏–∫–∏—Ö –º–∞—Ç—á–µ–π. $lastUser, –∫–∞–∫–∞—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –≤—Å—Ç—Ä–µ—á–∞ –≤–∞–º –∑–∞–ø–æ–º–Ω–∏–ª–∞—Å—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?',
      ];
      return historyResponses[_random.nextInt(historyResponses.length)];
    }

    if (hasLegendContext) {
      final legendResponses = [
        '‚≠ê –ì–æ–≤–æ—Ä—è –æ –ª–µ–≥–µ–Ω–¥–∞—Ö$personalization, –Ω–µ–ª—å–∑—è –Ω–µ –≤—Å–ø–æ–º–Ω–∏—Ç—å –≤–µ–ª–∏–∫–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ—à–ª–æ–≥–æ. $lastUser, —É –≤–∞—Å –µ—Å—Ç—å –ª—é–±–∏–º—ã–π —Ñ—É—Ç–±–æ–ª–∏—Å—Ç –∏–∑ –ø—Ä–æ—à–ª–æ–π —ç–ø–æ—Ö–∏?',
        'üéñÔ∏è –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏$personalization —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞. $lastUser, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—å—è –∫–∞—Ä—å–µ—Ä–∞ –≤–∞—Å –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?',
      ];
      return legendResponses[_random.nextInt(legendResponses.length)];
    }

    // –£–º–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    final historicalInsights = [
      'üé≠ $lastUser$personalization, –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –º–µ–Ω—è –≤—Å–µ–≥–¥–∞ –≤–æ—Å—Ö–∏—â–∞–µ—Ç? –ö–∞–∫ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–ª–∞ —Ç–∞–∫—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –ª–µ—Ç. –û—Ç –∫–∞—Ç–∞–Ω—å—è –º—è—á–∞ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–µ—Å—Å–∏–Ω–≥–æ–≤—ã—Ö —Å—Ö–µ–º. –ò –≤–µ–¥—å –æ—Å–Ω–æ–≤—ã –æ—Å—Ç–∞–ª–∏—Å—å —Ç–µ–º–∏ –∂–µ!',
      'üí≠ –õ—é–±–ª—é –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏$personalization. –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –º–∞—Ç—á –Ω–∞–ø–æ–º–Ω–∏–ª –º–Ω–µ –∏–≥—Ä—É $yearsAgo-–ª–µ—Ç–Ω–µ–π –¥–∞–≤–Ω–æ—Å—Ç–∏ - —Ç–∞ –∂–µ —Å—Ç—Ä–∞—Å—Ç—å, —Ç–µ –∂–µ —ç–º–æ—Ü–∏–∏, —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å.',
      'üìö $lastUser$personalization, –∫–∞–∫ –∏—Å—Ç–æ—Ä–∏–∫ –æ—Ç–º–µ—á—É: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ—É—Ç–±–æ–ª —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–ª –ª—É—á—à–∏–µ —á–µ—Ä—Ç—ã —Ä–∞–∑–Ω—ã—Ö —ç–ø–æ—Ö. –ö–æ–º–±–∏–Ω–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–≥—Ä–∞ 80-—Ö, —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å 2000-—Ö –∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≥–∏–±–∫–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.',
      'üåç –§—É—Ç–±–æ–ª - —ç—Ç–æ –∂–∏–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è$personalization. $lastUser, –∫–∞–∂–¥–∞—è –∏–≥—Ä–∞ –ø–∏—à–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ª–µ—Ç–æ–ø–∏—Å–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞!',
      'üï∞Ô∏è –û–≥–ª—è–¥—ã–≤–∞—è—Å—å –≤ –ø—Ä–æ—à–ª–æ–µ$personalization, –ø–æ–Ω–∏–º–∞–µ—à—å, –∫–∞–∫ –¥–∞–ª–µ–∫–æ –º—ã –ø—Ä–æ–¥–≤–∏–Ω—É–ª–∏—Å—å. $lastUser, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ —Å–∫–∞–∂—É—Ç –æ –Ω–∞—à–µ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ 20 –ª–µ—Ç?',
    ];

    return historicalInsights[_random.nextInt(historicalInsights.length)];
  }

  // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–ê–ú–ò ===

  List<ChatBot> getAvailableBots() => List.from(_availableBots);

  Future<void> toggleBot(String botId, bool active) async {
    final botIndex = _availableBots.indexWhere((b) => b.id == botId);
    if (botIndex != -1) {
      _availableBots[botIndex] = _availableBots[botIndex].copyWith(isActive: active);
    }
  }

  Future<List<ChatBot>> getActiveBots(String roomId) async {
    await _simulateNetworkDelay(200, 500);
    return _availableBots.where((bot) => bot.isActive).toList();
  }

  // === –£–õ–£–ß–®–ï–ù–ù–´–ï AI –û–¢–í–ï–¢–´ –° –ö–û–ù–¢–ï–ö–°–¢–û–ú ===

  Future<String> getAIResponse(String userMessage, String roomId, {String? context}) async {
    await _simulateNetworkDelay(800, 2000);

    _lastUserMessage[roomId] = userMessage;
    _conversationContext[roomId] ??= [];
    _conversationContext[roomId]!.add(userMessage);

    if (_conversationContext[roomId]!.length > 5) {
      _conversationContext[roomId]!.removeAt(0);
    }

    final responses = await _getEnhancedResponses(userMessage, roomId, context);
    final selectedResponse = responses[_random.nextInt(responses.length)];

    _conversationContext[roomId]!.add(selectedResponse);

    return selectedResponse;
  }

  Future<List<String>> _getEnhancedResponses(String message, String roomId, String? context) async {
    message = message.toLowerCase();
    final contextMessages = _conversationContext[roomId] ?? [];
    final lastUserMessage = _lastUserMessage[roomId] ?? '';

    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    final hasGreetingContext = contextMessages.any((msg) =>
    msg.toLowerCase().contains('–ø—Ä–∏–≤–µ—Ç') ||
        msg.toLowerCase().contains('–∑–¥—Ä–∞–≤—Å—Ç–≤'));

    final hasQuestionContext = message.contains('?') ||
        contextMessages.any((msg) => msg.contains('?'));

    final hasThanksContext = message.contains('—Å–ø–∞—Å') || message.contains('–±–ª–∞–≥–æ–¥–∞—Ä');

    // –£–º–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if (hasGreetingContext || message.contains('–ø—Ä–∏–≤–µ—Ç') || message.contains('hi')) {
      final timeOfDay = _getTimeOfDay();
      return [
        '–ü—Ä–∏–≤–µ—Ç! $timeOfDay –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ö–∞–∫ –≤–∞–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è? üìÖ',
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! $timeOfDay –¢–æ–ª—å–∫–æ —á—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤—á–µ—Ä–∞—à–Ω–∏–µ –º–∞—Ç—á–∏ - –µ—Å—Ç—å –æ —á–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å! ‚öΩ',
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! $timeOfDay –ì–æ—Ç–æ–≤ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é —Ñ—É—Ç–±–æ–ª–∞? –°–µ–≥–æ–¥–Ω—è –±—ã–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω—ã–µ —Å–ª—É—Ö–∏! üîÑ',
        '$timeOfDay –ö–æ–ª–ª–µ–≥–∞! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? –ì–æ—Ç–æ–≤—ã –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Å—Ç–µ–π? üéØ',
      ];
    }

    // –û—Ç–≤–µ—Ç—ã –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
    if (hasThanksContext) {
      return [
        '–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –§—É—Ç–±–æ–ª –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç, –∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ! ü§ù',
        '–ù–µ —Å—Ç–æ–∏—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π! –û–±—Å—É–∂–¥–∞—Ç—å —Ñ—É—Ç–±–æ–ª —Å —Ç–∞–∫–∏–º–∏ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–∞–º–∏ - –æ–¥–Ω–æ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ! ‚öΩ',
        '–†–∞–¥, —á—Ç–æ —Å–º–æ–≥ –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏—è–º–∏ –æ –Ω–∞—à–µ–π –ª—é–±–∏–º–æ–π –∏–≥—Ä–µ! üí´',
      ];
    }

    // –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    if (hasQuestionContext) {
      return [
        '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏, —Ç–æ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å... üìà',
        '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –ø–æ –ø—É–Ω–∫—Ç–∞–º... üîç',
        '–•–æ—Ä–æ—à–æ, —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª–∏! –ù–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞... üìä',
        '–í–æ–ø—Ä–æ—Å –ø–æ –¥–µ–ª—É! –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –≤–∑–≥–ª—è–¥–æ–º –Ω–∞ —ç—Ç—É —Ç–µ–º—É... üí≠',
      ];
    }

    // –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º —Ç–µ–º—ã
    if (lastUserMessage.isNotEmpty) {
      return [
        '–ü—Ä–æ–¥–æ–ª–∂–∞—è –≤–∞—à—É –º—ã—Å–ª—å, —Ö–æ—á—É –¥–æ–±–∞–≤–∏—Ç—å... üí≠',
        '–í—ã –ø–æ–¥–Ω—è–ª–∏ –≤–∞–∂–Ω—É—é —Ç–µ–º—É! –ï—Å–ª–∏ —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –¥–µ—Ç–∞–ª–∏... üéØ',
        '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–∑–≥–ª—è–¥! –ê –µ—Å–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã... üîÑ',
        '–†–∞–∑–≤–∏–≤–∞—è –≤–∞—à—É –∏–¥–µ—é... –ß—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ... üí´',
      ];
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    final smartResponses = [
      '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! –ê –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏, –∫–∞–∫ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Ç–∞–∫—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã? üï∞Ô∏è',
      '–°–æ–≥–ª–∞—Å–µ–Ω —Å –≤–∞–º–∏! –ö—Å—Ç–∞—Ç–∏, —Å–µ–≥–æ–¥–Ω—è —á–∏—Ç–∞–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - –æ—á–µ–Ω—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã. üìà',
      '–•–æ—Ä–æ—à–µ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ! –≠—Ç–æ –Ω–∞–ø–æ–º–Ω–∏–ª–æ –º–Ω–µ –æ–¥–∏–Ω –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∞—Ç—á... üìö',
      '–û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è! –î–æ–±–∞–≤–ª—é, —á—Ç–æ –≤–∞–∂–Ω–∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏–∫–∞, –Ω–æ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è. üß†',
      '–ì–ª—É–±–æ–∫–æ–º—ã—Å–ª–µ–Ω–Ω–æ! –ê –∫–∞–∫ –≤–∞–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –≤ —Ñ—É—Ç–±–æ–ª–µ? üîÑ',
      '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–∞–∫—É—Ä—Å! –•–æ—á—É –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–µ-—á—Ç–æ —Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è... üìä',
    ];

    return smartResponses;
  }

  String _getTimeOfDay() {
    final hour = DateTime.now().hour;
    if (hour < 6) return '–î–æ–±—Ä–æ–π –Ω–æ—á–∏!';
    if (hour < 12) return '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!';
    if (hour < 18) return '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!';
    return '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!';
  }

  // === –£–ß–ê–°–¢–ù–ò–ö–ò –ò –°–ï–°–°–ò–ò ===

  Future<List<ChatMember>> loadRoomMembers(String roomId) async {
    await _simulateNetworkDelay(500, 1500);

    if (!_roomMembers.containsKey(roomId)) {
      _roomMembers[roomId] = await _generateSampleMembers();
    }

    return _roomMembers[roomId]!;
  }

  Future<ChatSession> getChatSession(String roomId) async {
    await _simulateNetworkDelay(300, 800);

    final messages = _roomMessages[roomId] ?? [];
    final members = _roomMembers[roomId] ?? [];
    final membersMap = <String, ChatMember>{};
    for (final member in members) {
      membersMap[member.id] = member;
    }

    final stats = await getRoomStats(roomId);

    if (!_chatSessions.containsKey(roomId)) {
      _chatSessions[roomId] = ChatSession(
        roomId: roomId,
        messages: messages,
        members: membersMap,
        settings: _chatSettings[roomId] ?? _chatSettings['default']!,
        lastUpdate: DateTime.now(),
        title: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –ß–∞—Ç',
        description: '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π',
        createdAt: DateTime.now().subtract(Duration(days: 7)),
        totalMemberCount: members.length,
        totalMessageCount: messages.length,
        onlineMembers: stats['onlineMembers'] as int,
        todayMessages: stats['todayMessages'] as int,
        pinnedMessages: stats['pinnedMessages'] as int,
        activeBots: stats['activeBots'] as int,
      );
    }

    return _chatSessions[roomId]!;
  }

  // === –ù–ê–°–¢–†–û–ô–ö–ò ===

  Future<ChatSettings> getChatSettings(String roomId) async {
    await _simulateNetworkDelay(200, 500);
    return _chatSettings[roomId] ?? _chatSettings['default']!;
  }

  Future<void> updateChatSettings(String roomId, ChatSettings settings) async {
    await _simulateNetworkDelay(300, 700);
    _chatSettings[roomId] = settings;
  }

  // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

  Future<String?> translateMessage(String text, String targetLanguage) async {
    final cacheKey = '${text.hashCode}_$targetLanguage';

    if (_translationCache.containsKey(cacheKey)) {
      return _translationCache[cacheKey];
    }

    await _simulateNetworkDelay(500, 2000);

    final translations = {
      '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –†–∞–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é! üëã':
      'Hello everyone! Glad to join the discussion! üëã',
      '–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞ –±—ã–ª–∞! –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞—â–∏—Ç–µ.':
      'It was a great game! I especially liked the team\'s defensive strategy.',
      '–ö–∞–∫ –≤–∞–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –º–∞—Ç—á?':
      'What do you think about today\'s match?',
      '–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –ø—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–æ–ª–µ–ø–µ–Ω!':
      'This player is just magnificent!',
    };

    final translation = translations[text] ?? '$text [Translated]';
    _translationCache[cacheKey] = translation;

    return translation;
  }

  Future<Map<String, Set<String>>?> addReaction(
      String messageId, String roomId, String reaction, String userName) async {
    await _simulateNetworkDelay(100, 300);

    final messages = _roomMessages[roomId] ?? [];
    final messageIndex = messages.indexWhere((msg) => msg.id == messageId);

    if (messageIndex == -1) return null;

    final message = messages[messageIndex];
    final currentReactions = Map<String, Set<String>>.from(message.reactions ?? {});
    final usersWhoReacted = currentReactions[reaction] ?? <String>{};

    if (usersWhoReacted.contains(userName)) {
      usersWhoReacted.remove(userName);
      if (usersWhoReacted.isEmpty) {
        currentReactions.remove(reaction);
      }
    } else {
      usersWhoReacted.add(userName);
      currentReactions[reaction] = usersWhoReacted;
    }

    messages[messageIndex] = message.copyWith(reactions: currentReactions);
    _notifyMessageUpdate(roomId);

    return currentReactions;
  }

  Future<bool> toggleMessagePin(String messageId, String roomId) async {
    await _simulateNetworkDelay(200, 500);

    final messages = _roomMessages[roomId] ?? [];
    final messageIndex = messages.indexWhere((msg) => msg.id == messageId);

    if (messageIndex == -1) return false;

    final message = messages[messageIndex];
    messages[messageIndex] = message.copyWith(isPinned: !message.isPinned);
    _notifyMessageUpdate(roomId);

    return true;
  }

  Future<List<ChatMessage>> searchMessages(String roomId, String query) async {
    await _simulateNetworkDelay(300, 1000);

    final messages = _roomMessages[roomId] ?? [];

    return messages.where((message) {
      return message.text.toLowerCase().contains(query.toLowerCase()) &&
          message.messageType == MessageType.text;
    }).toList();
  }

  Future<List<ChatMessage>> getPinnedMessages(String roomId) async {
    await _simulateNetworkDelay(200, 600);

    final messages = _roomMessages[roomId] ?? [];

    return messages.where((message) => message.isPinned).toList();
  }

  // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê ===

  Future<Map<String, dynamic>> getRoomStats(String roomId) async {
    await _simulateNetworkDelay(500, 1500);

    final messages = _roomMessages[roomId] ?? [];
    final members = _roomMembers[roomId] ?? [];

    final today = DateTime.now();
    final todayMessages = messages.where((msg) =>
    msg.time.year == today.year &&
        msg.time.month == today.month &&
        msg.time.day == today.day
    ).length;

    final onlineMembers = members.where((member) => member.isOnline).length;

    return {
      'totalMessages': messages.length,
      'totalMembers': members.length,
      'onlineMembers': onlineMembers,
      'todayMessages': todayMessages,
      'pinnedMessages': messages.where((msg) => msg.isPinned).length,
      'activeBots': _availableBots.where((bot) => bot.isActive).length,
    };
  }

  // === STREAM –ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø ===

  Stream<List<ChatMessage>> watchRoomMessages(String roomId) {
    _roomControllers[roomId] ??= StreamController<List<ChatMessage>>.broadcast();
    return _roomControllers[roomId]!.stream;
  }

  void _notifyMessageUpdate(String roomId) {
    if (_roomControllers.containsKey(roomId) && !_roomControllers[roomId]!.isClosed) {
      final messages = _roomMessages[roomId] ?? [];
      _roomControllers[roomId]!.add(List.from(messages));
    }
  }

  // === –£–¢–ò–õ–ò–¢–´ ===

  Future<void> _simulateNetworkDelay([int minMs = 300, int maxMs = 1000]) async {
    await Future.delayed(Duration(milliseconds: minMs + _random.nextInt(maxMs - minMs)));
  }

  Future<List<ChatMessage>> _generateSampleMessages(String roomId) async {
    return [
      ChatMessage(
        id: '1',
        roomId: roomId,
        text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —á–∞—Ç! üéâ\n–û–±—Å—É–∂–¥–∞–µ–º –º–∞—Ç—á–∏, —Ç–∞–∫—Ç–∏–∫—É –∏ –≤—Å–µ —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ñ—É—Ç–±–æ–ª–æ–º!',
        sender: '–°–∏—Å—Ç–µ–º–∞',
        time: DateTime.now().subtract(Duration(hours: 2)),
        isMe: false,
        messageType: MessageType.system,
        status: MessageStatus.sent,
      ),
      ChatMessage(
        id: '2',
        roomId: roomId,
        text: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –≤–∞–º –≤—á–µ—Ä–∞—à–Ω–∏–π –º–∞—Ç—á? üëã',
        sender: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
        time: DateTime.now().subtract(Duration(hours: 1, minutes: 45)),
        isMe: false,
        status: MessageStatus.sent,
        userColor: Colors.blue,
        userAvatar: 'https://i.pravatar.cc/150?img=1',
      ),
    ];
  }

  Future<List<ChatMember>> _generateSampleMembers() async {
    return [
      ChatMember(
        id: '1',
        name: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
        avatar: 'https://i.pravatar.cc/150?img=1',
        isOnline: true,
        role: MemberRole.admin,
        lastSeen: DateTime.now(),
        joinDate: DateTime.now().subtract(Duration(days: 30)),
      ),
      ChatMember(
        id: '2',
        name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        avatar: 'https://i.pravatar.cc/150?img=2',
        isOnline: true,
        role: MemberRole.moderator,
        lastSeen: DateTime.now(),
        joinDate: DateTime.now().subtract(Duration(days: 25)),
      ),
    ];
  }

  void clearTranslationCache() {
    _translationCache.clear();
  }

  void dispose() {
    for (final controller in _roomControllers.values) {
      controller.close();
    }
    _roomControllers.clear();
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
class ChatBot {
  final String id;
  final String name;
  final String avatar;
  final String description;
  final bool isActive;
  final String personality;
  final String responseStyle;
  final Color color;
  final List<String> expertise;
  final List<String> favoriteTeams;
  final Map<String, Map<String, dynamic>> memory; // –ü–∞–º—è—Ç—å –±–æ—Ç–∞ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
  final int responseDelay; // –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∞

  ChatBot({
    required this.id,
    required this.name,
    required this.avatar,
    required this.description,
    required this.isActive,
    required this.personality,
    required this.responseStyle,
    required this.color,
    required this.expertise,
    required this.favoriteTeams,
    required this.memory,
    required this.responseDelay,
  });

  ChatBot copyWith({
    String? id,
    String? name,
    String? avatar,
    String? description,
    bool? isActive,
    String? personality,
    String? responseStyle,
    Color? color,
    List<String>? expertise,
    List<String>? favoriteTeams,
    Map<String, Map<String, dynamic>>? memory,
    int? responseDelay,
  }) {
    return ChatBot(
      id: id ?? this.id,
      name: name ?? this.name,
      avatar: avatar ?? this.avatar,
      description: description ?? this.description,
      isActive: isActive ?? this.isActive,
      personality: personality ?? this.personality,
      responseStyle: responseStyle ?? this.responseStyle,
      color: color ?? this.color,
      expertise: expertise ?? this.expertise,
      favoriteTeams: favoriteTeams ?? this.favoriteTeams,
      memory: memory ?? this.memory,
      responseDelay: responseDelay ?? this.responseDelay,
    );
  }
}