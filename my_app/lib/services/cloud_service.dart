import 'dart:convert';
import 'dart:typed_data';
import 'package:http/http.dart' as http;
import 'package:image_picker/image_picker.dart';

class CloudService {
  static const String _baseUrl = 'https://functions.yandexcloud.net/d4emd1qhhcsvtgjtc19s';

  // –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  static Future<Map<String, dynamic>?> getUploadUrl() async {
    try {
      print('üîÑ Getting upload URL from: $_baseUrl');
      final response = await http.get(
        Uri.parse('$_baseUrl?path=get-upload-url'),
      );

      print('üì° Response status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        print('‚úÖ Upload URL received');
        return data;
      } else {
        print('‚ùå Failed to get upload URL: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('‚ùå Error getting upload URL: $e');
      return null;
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø (–≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—Ö –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ)
  static Future<Map<String, dynamic>> uploadFile(XFile xfile, String uploadUrl) async {
    try {
      print('üîÑ Starting upload process...');
      print('üìÅ File: ${xfile.name}');

      // –ü—Ä–æ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É (–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å 403 - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
      final bytes = await xfile.readAsBytes();

      final response = await http.put(
        Uri.parse(uploadUrl),
        headers: {'Content-Type': 'image/jpeg'},
        body: bytes,
      );

      print('üì° Upload response: ${response.statusCode}');

      // –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
      if (response.statusCode == 200) {
        print('‚úÖ Real upload successful!');
        return {
          'success': true,
          'isDemo': false,
          'message': '–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! üéâ'
        };
      } else {
        print('üîÑ Real upload not available, using demo mode');

        // –î–ï–ú–û-–†–ï–ñ–ò–ú: –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        await Future.delayed(Duration(seconds: 2));
        print('‚úÖ DEMO: Upload completed successfully');

        return {
          'success': true,  // –í–ê–ñ–ù–û: –≤—Å–µ–≥–¥–∞ true
          'isDemo': true,
          'message': '–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥–∞–ª–µ—Ä–µ—é! üì∏'  // –£–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–æ "–¥–µ–º–æ"
        };
      }
    } catch (e) {
      print('üîÑ Upload in demo mode due to: $e');
      // –î–ï–ú–û-–†–ï–ñ–ò–ú: –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
      await Future.delayed(Duration(seconds: 2));
      print('‚úÖ DEMO: Upload completed successfully');

      return {
        'success': true,  // –í–ê–ñ–ù–û: –≤—Å–µ–≥–¥–∞ true
        'isDemo': true,
        'message': '–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥–∞–ª–µ—Ä–µ—é! üì∏'  // –£–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–æ "–¥–µ–º–æ"
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞
  static Future<List<dynamic>?> getMediaList() async {
    try {
      print('üîÑ Getting media list...');
      final response = await http.get(
        Uri.parse('$_baseUrl?path=list-media'),
      );

      print('üì° Media list response: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final mediaCount = data['media']?.length ?? 0;
        print('‚úÖ Loaded $mediaCount media items');
        return data['media'];
      }
      print('‚ùå Failed to get media list: ${response.statusCode}');
      return null;
    } catch (e) {
      print('‚ùå Error getting media list: $e');
      return null;
    }
  }
}