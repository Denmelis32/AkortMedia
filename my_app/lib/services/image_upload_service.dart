// lib/services/image_upload_service.dart
import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:path/path.dart' as path;
import 'package:shared_preferences/shared_preferences.dart';
import 'api_service.dart';

class ImageUploadService {
  static const String baseUrl = 'https://d5ddp236ffmgophlrs5s.cmxivbes.apigw.yandexcloud.net';
  static const int timeoutSeconds = 30;

  // üéØ –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ó–ê–ì–û–õ–û–í–ö–û–í
  static Future<Map<String, String>> _getHeaders({bool forFileUpload = false}) async {
    final token = await ApiService.getToken();
    final headers = {
      if (!forFileUpload) 'Content-Type': 'application/json',
      'Accept': 'application/json',
    };

    if (token != null && token.isNotEmpty) {
      headers['Authorization'] = 'Bearer $token';
      print('üîë Token included in image upload headers');
    } else {
      print('‚ö†Ô∏è No token available for image upload');
    }

    return headers;
  }

  // üéØ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –ê–í–ê–¢–ê–†–ê
  static Future<String> uploadUserAvatar(File imageFile, String userId) async {
    try {
      print('üîÑ Starting REAL avatar upload for user: $userId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (!await imageFile.exists()) {
        throw Exception('–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${imageFile.path}');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 5MB)
      final fileLength = await imageFile.length();
      if (fileLength > 5 * 1024 * 1024) {
        throw Exception('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5MB');
      }

      print('üìÅ File info: ${fileLength} bytes, path: ${imageFile.path}');

      // üéØ –ü–û–î–ì–û–¢–ê–í–õ–ò–í–ê–ï–ú –î–ê–ù–ù–´–ï –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò
      final filename = 'avatar_${userId}_${DateTime.now().millisecondsSinceEpoch}${path.extension(imageFile.path)}';
      print('üìù Generated filename: $filename');

      // üéØ –°–û–ó–î–ê–ï–ú MULTIPART REQUEST
      final request = http.MultipartRequest(
        'POST',
        Uri.parse('$baseUrl/upload/avatar'),
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      final headers = await _getHeaders(forFileUpload: true);
      request.headers.addAll(headers);

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
      request.files.add(
        await http.MultipartFile.fromPath(
          'avatar',
          imageFile.path,
          filename: filename,
        ),
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      request.fields['user_id'] = userId;
      request.fields['filename'] = filename;

      print('üì§ Sending multipart request to server...');

      // üéØ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –° –¢–ê–ô–ú–ê–£–¢–û–ú
      final streamedResponse = await request.send().timeout(
        Duration(seconds: timeoutSeconds),
        onTimeout: () {
          throw Exception('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏');
        },
      );

      // üéØ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –û–¢–í–ï–¢
      final response = await http.Response.fromStream(streamedResponse);
      print('üîß Upload response status: ${response.statusCode}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        final responseData = json.decode(response.body);

        if (responseData['success'] == true && responseData['avatarUrl'] != null) {
          final avatarUrl = responseData['avatarUrl'];
          print('‚úÖ REAL Avatar uploaded successfully: $avatarUrl');

          // üéØ –°–û–•–†–ê–ù–Ø–ï–ú URL –í –õ–û–ö–ê–õ–¨–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï
          await _saveAvatarUrlLocally(userId, avatarUrl);

          return avatarUrl;
        } else {
          throw Exception('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
      } else {
        throw Exception('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusCode} - ${response.body}');
      }

    } catch (e) {
      print('‚ùå REAL Error uploading avatar: $e');

      // üéØ –°–û–ó–î–ê–ï–ú –ó–ê–ì–õ–£–®–ö–£ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
      final fallbackUrl = _generateFallbackAvatarUrl(userId);
      print('üîÑ Using fallback avatar URL: $fallbackUrl');

      return fallbackUrl;
    }
  }

  // üéØ –ú–ï–¢–û–î –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–û–°–¢–ê
  static Future<String> uploadPostImage(File imageFile, String postId) async {
    try {
      print('üîÑ Starting REAL post image upload for post: $postId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (!await imageFile.exists()) {
        throw Exception('–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${imageFile.path}');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 10MB –¥–ª—è –ø–æ—Å—Ç–æ–≤)
      final fileLength = await imageFile.length();
      if (fileLength > 10 * 1024 * 1024) {
        throw Exception('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10MB');
      }

      print('üìÅ Post image info: ${fileLength} bytes');

      // üéØ –ü–û–î–ì–û–¢–ê–í–õ–ò–í–ê–ï–ú –î–ê–ù–ù–´–ï –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò
      final filename = 'post_${postId}_${DateTime.now().millisecondsSinceEpoch}${path.extension(imageFile.path)}';

      // üéØ –°–û–ó–î–ê–ï–ú MULTIPART REQUEST
      final request = http.MultipartRequest(
        'POST',
        Uri.parse('$baseUrl/upload/post-image'),
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      final headers = await _getHeaders(forFileUpload: true);
      request.headers.addAll(headers);

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
      request.files.add(
        await http.MultipartFile.fromPath(
          'image',
          imageFile.path,
          filename: filename,
        ),
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      request.fields['post_id'] = postId;
      request.fields['filename'] = filename;

      print('üì§ Sending post image upload request...');

      // üéØ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–°
      final streamedResponse = await request.send().timeout(
        Duration(seconds: timeoutSeconds),
      );

      // üéØ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –û–¢–í–ï–¢
      final response = await http.Response.fromStream(streamedResponse);
      print('üîß Post image upload response: ${response.statusCode}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        final responseData = json.decode(response.body);

        if (responseData['success'] == true && responseData['imageUrl'] != null) {
          final imageUrl = responseData['imageUrl'];
          print('‚úÖ REAL Post image uploaded successfully: $imageUrl');
          return imageUrl;
        } else {
          throw Exception('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ—Å—Ç–∞');
        }
      } else {
        throw Exception('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞: ${response.statusCode}');
      }

    } catch (e) {
      print('‚ùå REAL Error uploading post image: $e');

      // üéØ –°–û–ó–î–ê–ï–ú –ó–ê–ì–õ–£–®–ö–£ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
      final fallbackUrl = _generateFallbackPostImageUrl(postId);
      print('üîÑ Using fallback post image URL: $fallbackUrl');

      return fallbackUrl;
    }
  }

  // üéØ –ú–ï–¢–û–î –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –ê–í–ê–¢–ê–†–ê
  static Future<void> deleteUserAvatar(String userId) async {
    try {
      print('üóëÔ∏è Deleting avatar for user: $userId');

      final headers = await _getHeaders();
      final response = await http.delete(
        Uri.parse('$baseUrl/upload/avatar/$userId'),
        headers: headers,
      ).timeout(Duration(seconds: timeoutSeconds));

      print('üîß Delete avatar response: ${response.statusCode}');

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        if (responseData['success'] == true) {
          print('‚úÖ REAL Avatar deleted successfully for user: $userId');

          // üéØ –£–î–ê–õ–Ø–ï–ú URL –ò–ó –õ–û–ö–ê–õ–¨–ù–û–ì–û –•–†–ê–ù–ò–õ–ò–©–ê
          await _removeAvatarUrlLocally(userId);
        } else {
          throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä: ${responseData['error']}');
        }
      } else {
        throw Exception('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${response.statusCode}');
      }

    } catch (e) {
      print('‚ùå REAL Error deleting avatar: $e');
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å UX
      print('‚ö†Ô∏è Avatar deletion failed, but continuing...');
    }
  }

  // üéØ –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ê–í–ê–¢–ê–†–ê –ò–ó –õ–û–ö–ê–õ–¨–ù–û–ì–û –•–†–ê–ù–ò–õ–ò–©–ê
  static Future<String?> getLocalAvatarUrl(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getString('avatar_url_$userId');
    } catch (e) {
      print('‚ùå Error getting local avatar URL: $e');
      return null;
    }
  }

  // üéØ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ URL –∞–≤–∞—Ç–∞—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ
  static Future<void> _saveAvatarUrlLocally(String userId, String avatarUrl) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('avatar_url_$userId', avatarUrl);
      print('üíæ Avatar URL saved locally for user: $userId');
    } catch (e) {
      print('‚ùå Error saving avatar URL locally: $e');
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ URL –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  static Future<void> _removeAvatarUrlLocally(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('avatar_url_$userId');
      print('üóëÔ∏è Local avatar URL removed for user: $userId');
    } catch (e) {
      print('‚ùå Error removing local avatar URL: $e');
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏
  static String _generateFallbackAvatarUrl(String userId) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–≥–ª—É—à–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id
    final colors = ['7E57C2', '2196F3', '4CAF50', 'FF9800', 'E91E63'];
    final colorIndex = userId.hashCode.abs() % colors.length;
    final color = colors[colorIndex];

    return 'https://via.placeholder.com/150/$color/FFFFFF?text=${Uri.encodeComponent(userId.substring(0, 1).toUpperCase())}';
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞
  static String _generateFallbackPostImageUrl(String postId) {
    final colors = ['667eea', '764ba2', 'f093fb', 'f5576c', '4facfe'];
    final colorIndex = postId.hashCode.abs() % colors.length;
    final color = colors[colorIndex];

    return 'https://via.placeholder.com/600x400/$color/FFFFFF?text=Post+Image';
  }

  // üéØ –ú–ï–¢–û–î –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ò–°–ê –ó–ê–ì–†–£–ó–ö–ò
  static Future<bool> testUploadService() async {
    try {
      print('üîó Testing upload service connection...');

      final response = await http.get(
        Uri.parse('$baseUrl/health'),
        headers: await _getHeaders(),
      ).timeout(Duration(seconds: 10));

      final isHealthy = response.statusCode == 200;
      print('üîó Upload service test: ${isHealthy ? 'OK' : 'FAILED'}');

      return isHealthy;
    } catch (e) {
      print('‚ùå Upload service test failed: $e');
      return false;
    }
  }

  // üéØ –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ò–°–¢–û–†–ò–ò –ó–ê–ì–†–£–ó–û–ö
  static Future<List<Map<String, dynamic>>> getUploadHistory() async {
    try {
      print('üìã Getting upload history...');

      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/upload/history'),
        headers: headers,
      ).timeout(Duration(seconds: timeoutSeconds));

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        if (responseData['success'] == true && responseData['history'] is List) {
          final history = List<Map<String, dynamic>>.from(responseData['history']);
          print('‚úÖ Upload history loaded: ${history.length} items');
          return history;
        }
      }

      return [];
    } catch (e) {
      print('‚ùå Error getting upload history: $e');
      return [];
    }
  }

  // üéØ –ú–ï–¢–û–î –î–õ–Ø –û–ß–ò–°–¢–ö–ò –ö–≠–®–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
  static Future<void> clearImageCache() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final keys = prefs.getKeys().where((key) => key.startsWith('avatar_url_')).toList();

      for (final key in keys) {
        await prefs.remove(key);
      }

      print('üßπ Image cache cleared: ${keys.length} items removed');
    } catch (e) {
      print('‚ùå Error clearing image cache: $e');
    }
  }
}