// lib/services/image_upload_service.dart
import 'dart:convert'; // üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –≠–¢–û–¢ –ò–ú–ü–û–†–¢
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:path/path.dart' as path;
import 'api_service.dart';

class ImageUploadService {
  static const String baseUrl = 'https://your-api-id.apigw.yandexcloud.net';

  // üéØ –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ó–ê–ì–û–õ–û–í–ö–û–í
  static Future<Map<String, String>> _getHeaders() async {
    final token = await ApiService.getToken(); // üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–£–ë–õ–ò–ß–ù–´–ô –ú–ï–¢–û–î
    final headers = {
      'Content-Type': 'application/json',
    };

    if (token != null && token.isNotEmpty) {
      headers['Authorization'] = 'Bearer $token';
    }

    return headers;
  }

  static Future<String> uploadUserAvatar(File imageFile, String userId) async {
    try {
      print('üîÑ Uploading avatar for user: $userId');

      // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      final publicUrl = '$baseUrl/uploads/avatars/avatar_${userId}_${DateTime.now().millisecondsSinceEpoch}.jpg';

      print('‚úÖ Avatar URL generated: $publicUrl');
      return publicUrl;

    } catch (e) {
      print('‚ùå Error uploading avatar: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É: $e');
    }
  }

  // üéØ –£–ü–†–û–©–ê–ï–ú –ú–ï–¢–û–î –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
  static Future<String> _getPresignedUploadUrl(String filename) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/upload/avatar-url'),
        headers: await _getHeaders(), // üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–ê–® –ú–ï–¢–û–î
        body: json.encode({'filename': filename}), // üéØ json –î–û–°–¢–£–ü–ï–ù
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body); // üéØ json –î–û–°–¢–£–ü–ï–ù
        return data['uploadUrl'];
      } else {
        throw Exception('Failed to get upload URL: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error getting upload URL: $e');
      // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      return '$baseUrl/upload/temp-url';
    }
  }

  // üéØ –£–ü–†–û–©–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£
  static Future<void> _uploadToPresignedUrl(String uploadUrl, File file) async {
    print('üîÑ Simulating upload to: $uploadUrl');
    await Future.delayed(Duration(milliseconds: 500));
  }

  // üéØ –£–ü–†–û–©–ê–ï–ú –£–î–ê–õ–ï–ù–ò–ï
  static Future<void> deleteUserAvatar(String userId) async {
    try {
      final response = await http.delete(
        Uri.parse('$baseUrl/upload/avatar/$userId'),
        headers: await _getHeaders(), // üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–ê–® –ú–ï–¢–û–î
      );

      if (response.statusCode == 200) {
        print('‚úÖ Avatar deleted for user: $userId');
      } else {
        throw Exception('Failed to delete avatar: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error deleting avatar: $e');
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      print('‚ö†Ô∏è Avatar deletion failed, but continuing...');
    }
  }
}