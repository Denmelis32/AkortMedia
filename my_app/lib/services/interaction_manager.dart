import 'package:flutter/foundation.dart';
import 'dart:collection';

// –í–´–ù–û–°–ò–ú –ö–õ–ê–°–° –ù–ê –£–†–û–í–ï–ù–¨ –§–ê–ô–õ–ê
class PostInteractionState {
  final String postId;
  bool isLiked;
  bool isBookmarked;
  bool isReposted;
  int likesCount;
  int repostsCount;
  List<Map<String, dynamic>> comments;
  DateTime lastUpdated;

  PostInteractionState({
    required this.postId,
    required this.isLiked,
    required this.isBookmarked,
    required this.isReposted,
    required this.likesCount,
    required this.repostsCount,
    required this.comments,
  }) : lastUpdated = DateTime.now();

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Map –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  Map<String, dynamic> toMap() {
    return {
      'postId': postId,
      'isLiked': isLiked,
      'isBookmarked': isBookmarked,
      'isReposted': isReposted,
      'likesCount': likesCount,
      'repostsCount': repostsCount,
      'comments': List<Map<String, dynamic>>.from(comments),
      'lastUpdated': lastUpdated.toIso8601String(),
    };
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ Map
  static PostInteractionState fromMap(Map<String, dynamic> map) {
    return PostInteractionState(
      postId: map['postId'] ?? '',
      isLiked: map['isLiked'] ?? false,
      isBookmarked: map['isBookmarked'] ?? false,
      isReposted: map['isReposted'] ?? false,
      likesCount: map['likesCount'] ?? 0,
      repostsCount: map['repostsCount'] ?? 0,
      comments: List<Map<String, dynamic>>.from(map['comments'] ?? []),
    );
  }
}

class InteractionManager with ChangeNotifier {
  static final InteractionManager _instance = InteractionManager._internal();
  factory InteractionManager() => _instance;
  InteractionManager._internal();

  // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ—Å—Ç–æ–≤
  final Map<String, PostInteractionState> _postStates = {};

  // –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  final Map<String, DateTime> _cacheTimestamps = {};
  static const Duration _cacheDuration = Duration(minutes: 10);

  bool _isDisposed = false;

  // –ö–û–õ–ë–≠–ö–ò –î–õ–Ø –°–í–Ø–ó–ò –° NEWS PROVIDER
  Function(String, bool, int)? _onLikeCallback;
  Function(String, bool)? _onBookmarkCallback;
  Function(String, bool, int, String, String)? _onRepostCallback; // –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞
  Function(String, Map<String, dynamic>)? _onCommentCallback;
  Function(String, String)? _onCommentRemovalCallback;

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤
  void setCallbacks({
    Function(String, bool, int)? onLike,
    Function(String, bool)? onBookmark,
    Function(String, bool, int, String, String)? onRepost,
    Function(String, Map<String, dynamic>)? onComment,
    Function(String, String)? onCommentRemoval,
  }) {
    _onLikeCallback = onLike;
    _onBookmarkCallback = onBookmark;
    _onRepostCallback = onRepost;
    _onCommentCallback = onComment;
    _onCommentRemovalCallback = onCommentRemoval;
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
  void _safeNotifyListeners() {
    if (!_isDisposed && hasListeners) {
      notifyListeners();
    }
  }

  @override
  void dispose() {
    _isDisposed = true;
    super.dispose();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  bool get isDisposed => _isDisposed;

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
  void _safeOperation(Function operation) {
    if (!_isDisposed) {
      operation();
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å—Ç–∞
  void initializePostState({
    required String postId,
    bool isLiked = false,
    bool isBookmarked = false,
    bool isReposted = false,
    int likesCount = 0,
    int repostsCount = 0,
    List<Map<String, dynamic>> comments = const [],
  }) {
    if (!_postStates.containsKey(postId)) {
      _postStates[postId] = PostInteractionState(
        postId: postId,
        isLiked: isLiked,
        isBookmarked: isBookmarked,
        isReposted: isReposted,
        likesCount: likesCount,
        repostsCount: repostsCount,
        comments: List<Map<String, dynamic>>.from(comments),
      );
      _cacheTimestamps[postId] = DateTime.now();
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å—Ç–∞
  PostInteractionState? getPostState(String postId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞
    final timestamp = _cacheTimestamps[postId];
    if (timestamp != null && DateTime.now().difference(timestamp) > _cacheDuration) {
      // –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      _refreshPostState(postId);
    }

    return _postStates[postId];
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å—Ç–∞ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ)
  Future<void> _refreshPostState(String postId) async {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    _cacheTimestamps[postId] = DateTime.now();
    notifyListeners();
  }

  // –õ–ê–ô–ö–ò
  Future<void> toggleLike(String postId) async {
    final state = _postStates[postId];
    if (state != null) {
      state.isLiked = !state.isLiked;
      state.likesCount += state.isLiked ? 1 : -1;
      state.lastUpdated = DateTime.now();

      _cacheTimestamps[postId] = DateTime.now();
      _safeNotifyListeners();

      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è NewsProvider
      if (_onLikeCallback != null) {
        _onLikeCallback!(postId, state.isLiked, state.likesCount);
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      await _syncLikeWithServer(postId, state.isLiked, state.likesCount);
    }
  }

  Future<void> _syncLikeWithServer(String postId, bool isLiked, int likesCount) async {
    try {
      if (kDebugMode) {
        print('üîÑ Syncing like for post $postId: $isLiked ($likesCount likes)');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error syncing like: $e');
      }
    }
  }

  // –ó–ê–ö–õ–ê–î–ö–ò
  Future<void> toggleBookmark(String postId) async {
    final state = _postStates[postId];
    if (state != null) {
      state.isBookmarked = !state.isBookmarked;
      state.lastUpdated = DateTime.now();

      _cacheTimestamps[postId] = DateTime.now();
      _safeNotifyListeners();

      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è NewsProvider
      if (_onBookmarkCallback != null) {
        _onBookmarkCallback!(postId, state.isBookmarked);
      }

      await _syncBookmarkWithServer(postId, state.isBookmarked);
    }
  }

  Future<void> _syncBookmarkWithServer(String postId, bool isBookmarked) async {
    try {
      if (kDebugMode) {
        print('üîÑ Syncing bookmark for post $postId: $isBookmarked');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error syncing bookmark: $e');
      }
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –†–ï–ü–û–°–¢–û–í
  Future<void> toggleRepost(
      String postId, {
        String? currentUserId,
        String? currentUserName,
      }) async {
    final state = _postStates[postId];
    if (state != null) {
      final wasReposted = state.isReposted;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      if (wasReposted != !state.isReposted) {
        state.isReposted = !state.isReposted;
        state.repostsCount += state.isReposted ? 1 : -1;
        state.lastUpdated = DateTime.now();

        _cacheTimestamps[postId] = DateTime.now();
        _safeNotifyListeners();

        // –í–ê–ñ–ù–û: –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if (_onRepostCallback != null) {
          print('üîÑ InteractionManager: Calling repost callback for $postId');
          _onRepostCallback!(
              postId,
              state.isReposted,
              state.repostsCount,
              currentUserId ?? '',
              currentUserName ?? ''
          );
        }
      }
    }
  }
  // –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –†–ï–ü–û–°–¢–û–í
  Future<void> _syncRepostWithServer(String postId, bool isReposted, int repostsCount) async {
    try {
      if (kDebugMode) {
        print('üîÑ Syncing repost for post $postId: $isReposted ($repostsCount reposts)');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error syncing repost: $e');
      }
    }
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
  Future<void> toggleRepostSimple(String postId) async {
    await toggleRepost(postId);
  }

  // –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò
  Future<void> addComment({
    required String postId,
    required String text,
    required String author,
    required String authorAvatar,
  }) async {
    final state = _postStates[postId];
    if (state != null) {
      final newComment = {
        'id': 'comment-${DateTime.now().millisecondsSinceEpoch}',
        'text': text,
        'author': author,
        'author_avatar': authorAvatar,
        'time': DateTime.now().toIso8601String(),
        'likes': 0,
        'isLiked': false,
      };

      state.comments.insert(0, newComment);
      state.lastUpdated = DateTime.now();

      _cacheTimestamps[postId] = DateTime.now();
      _safeNotifyListeners();

      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è NewsProvider
      if (_onCommentCallback != null) {
        _onCommentCallback!(postId, newComment);
      }

      await _syncCommentWithServer(postId, newComment);
    }
  }

  Future<void> removeComment(String postId, String commentId) async {
    final state = _postStates[postId];
    if (state != null) {
      state.comments.removeWhere((comment) => comment['id'] == commentId);
      state.lastUpdated = DateTime.now();

      _cacheTimestamps[postId] = DateTime.now();
      _safeNotifyListeners();

      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è NewsProvider
      if (_onCommentRemovalCallback != null) {
        _onCommentRemovalCallback!(postId, commentId);
      }

      await _syncCommentRemovalWithServer(postId, commentId);
    }
  }

  Future<void> toggleCommentLike(String postId, String commentId) async {
    final state = _postStates[postId];
    if (state != null) {
      final comment = state.comments.firstWhere(
            (c) => c['id'] == commentId,
        orElse: () => {},
      );

      if (comment.isNotEmpty) {
        final isLiked = comment['isLiked'] ?? false;
        final likes = comment['likes'] ?? 0;

        comment['isLiked'] = !isLiked;
        comment['likes'] = likes + (isLiked ? -1 : 1);
        state.lastUpdated = DateTime.now();

        _cacheTimestamps[postId] = DateTime.now();
        _safeNotifyListeners();

        await _syncCommentLikeWithServer(postId, commentId, !isLiked);
      }
    }
  }

  Future<void> _syncCommentWithServer(String postId, Map<String, dynamic> comment) async {
    try {
      if (kDebugMode) {
        print('üîÑ Syncing comment for post $postId: ${comment['text']}');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error syncing comment: $e');
      }
    }
  }

  Future<void> _syncCommentRemovalWithServer(String postId, String commentId) async {
    try {
      if (kDebugMode) {
        print('üîÑ Syncing comment removal for post $postId: $commentId');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error syncing comment removal: $e');
      }
    }
  }

  Future<void> _syncCommentLikeWithServer(String postId, String commentId, bool isLiked) async {
    try {
      if (kDebugMode) {
        print('üîÑ Syncing comment like for post $postId, comment $commentId: $isLiked');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error syncing comment like: $e');
      }
    }
  }

  // –ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï (–¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤)
  void bulkUpdatePostStates(List<Map<String, dynamic>> posts) {
    for (final post in posts) {
      final postId = post['id']?.toString() ?? '';
      if (postId.isNotEmpty) {
        initializePostState(
          postId: postId,
          isLiked: post['isLiked'] ?? false,
          isBookmarked: post['isBookmarked'] ?? false,
          isReposted: post['isReposted'] ?? false,
          likesCount: post['likes'] ?? 0,
          repostsCount: post['reposts'] ?? 0,
          comments: List<Map<String, dynamic>>.from(post['comments'] ?? []),
        );
      }
    }
    _safeNotifyListeners();
  }

  // –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–î–ù–û–ì–û –ü–û–°–¢–ê
  void updatePostState(Map<String, dynamic> post) {
    final postId = post['id']?.toString() ?? '';
    if (postId.isNotEmpty) {
      initializePostState(
        postId: postId,
        isLiked: post['isLiked'] ?? false,
        isBookmarked: post['isBookmarked'] ?? false,
        isReposted: post['isReposted'] ?? false,
        likesCount: post['likes'] ?? 0,
        repostsCount: post['reposts'] ?? 0,
        comments: List<Map<String, dynamic>>.from(post['comments'] ?? []),
      );
      _safeNotifyListeners();
    }
  }

  // –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –†–ï–ü–û–°–¢–ê (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å NewsProvider)
  void updateRepostState(String postId, bool isReposted, int repostsCount) {
    final state = _postStates[postId];
    if (state != null) {
      state.isReposted = isReposted;
      state.repostsCount = repostsCount;
      state.lastUpdated = DateTime.now();

      _cacheTimestamps[postId] = DateTime.now();
      _safeNotifyListeners();
    }
  }

  // –°–¢–ê–¢–ò–°–¢–ò–ö–ê
  Map<String, dynamic> getStats() {
    final totalPosts = _postStates.length;
    final totalLikes = _postStates.values.fold<int>(0, (sum, state) => sum + state.likesCount);
    final totalComments = _postStates.values.fold<int>(0, (sum, state) => sum + state.comments.length);
    final totalReposts = _postStates.values.fold<int>(0, (sum, state) => sum + state.repostsCount);
    final likedPosts = _postStates.values.where((state) => state.isLiked).length;
    final bookmarkedPosts = _postStates.values.where((state) => state.isBookmarked).length;
    final repostedPosts = _postStates.values.where((state) => state.isReposted).length;

    return {
      'totalPosts': totalPosts,
      'totalLikes': totalLikes,
      'totalComments': totalComments,
      'totalReposts': totalReposts,
      'likedPosts': likedPosts,
      'bookmarkedPosts': bookmarkedPosts,
      'repostedPosts': repostedPosts,
    };
  }

  // –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–ü–û–°–¢–ù–£–¢–´–• –ü–û–°–¢–û–í
  List<String> getRepostedPostIds() {
    return _postStates.entries
        .where((entry) => entry.value.isReposted)
        .map((entry) => entry.key)
        .toList();
  }

  // –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê
  void clearExpiredCache() {
    final now = DateTime.now();
    final expiredPosts = _cacheTimestamps.entries
        .where((entry) => now.difference(entry.value) > _cacheDuration)
        .map((entry) => entry.key)
        .toList();

    for (final postId in expiredPosts) {
      _cacheTimestamps.remove(postId);
    }

    if (expiredPosts.isNotEmpty && kDebugMode) {
      print('üßπ Cleared ${expiredPosts.length} expired cache entries');
    }
  }

  // –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  void clearAll() {
    _postStates.clear();
    _cacheTimestamps.clear();
    _safeNotifyListeners();
  }

  // –ü–û–î–ü–ò–°–ö–ê –ù–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ü–û–°–¢–ê
  VoidCallback? addPostListener(String postId, VoidCallback listener) {
    addListener(listener);
    return () => removeListener(listener);
  }

  void removePostListener(VoidCallback listener) {
    removeListener(listener);
  }

  // –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø
  bool hasPostState(String postId) {
    return _postStates.containsKey(postId);
  }

  // –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –°–û–°–¢–û–Ø–ù–ò–ô (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  Map<String, PostInteractionState> getAllStates() {
    return Map.from(_postStates);
  }

  // –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ï–ü–û–°–¢–ê–ú–ò

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç —Ä–µ–ø–æ—Å—Ç–Ω—É—Ç—ã–º
  bool isPostReposted(String postId) {
    return _postStates[postId]?.isReposted ?? false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–ø–æ—Å—Ç–æ–≤
  int getRepostCount(String postId) {
    return _postStates[postId]?.repostsCount ?? 0;
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞
  void forceUpdateRepost(String postId, bool isReposted, int repostsCount) {
    final state = _postStates[postId];
    if (state != null) {
      state.isReposted = isReposted;
      state.repostsCount = repostsCount;
      state.lastUpdated = DateTime.now();
      _safeNotifyListeners();
    } else {
      initializePostState(
        postId: postId,
        isReposted: isReposted,
        repostsCount: repostsCount,
      );
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (–ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö)
  void syncWithExternalState(Map<String, dynamic> externalState) {
    final postId = externalState['id']?.toString() ?? '';
    if (postId.isNotEmpty) {
      initializePostState(
        postId: postId,
        isLiked: externalState['isLiked'] ?? false,
        isBookmarked: externalState['isBookmarked'] ?? false,
        isReposted: externalState['isReposted'] ?? false,
        likesCount: externalState['likes'] ?? 0,
        repostsCount: externalState['reposts'] ?? 0,
        comments: List<Map<String, dynamic>>.from(externalState['comments'] ?? []),
      );
    }
  }
}