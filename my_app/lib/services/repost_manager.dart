// lib/services/repost_manager.dart
import 'package:flutter/material.dart';
import 'package:my_app/providers/news_provider.dart';
import 'package:my_app/services/storage_service.dart';
import 'package:my_app/services/interaction_manager.dart';

class RepostManager {
  static final RepostManager _instance = RepostManager._internal();
  factory RepostManager() => _instance;
  RepostManager._internal();

  // –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
  VoidCallback? _onRepostStateChanged;
  Function(String, bool, int)? _onRepostUpdated;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  void initialize({
    VoidCallback? onRepostStateChanged,
    Function(String, bool, int)? onRepostUpdated,
  }) {
    _onRepostStateChanged = onRepostStateChanged;
    _onRepostUpdated = onRepostUpdated;
    print('‚úÖ RepostManager initialized');
  }



  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞
  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î createRepost
  Future<void> createRepost({
    required NewsProvider newsProvider,
    required int originalIndex,
    required String currentUserId,
    required String currentUserName,
  }) async {
    try {
      final originalNews = Map<String, dynamic>.from(newsProvider.news[originalIndex]);
      final originalNewsId = originalNews['id'].toString();

      print('üîÑ Starting repost creation:');
      print('   Original news ID: $originalNewsId');
      print('   Current user: $currentUserName ($currentUserId)');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ä–µ–ø–æ—Å—Ç
      final existingRepostId = getRepostIdForOriginal(newsProvider, originalNewsId, currentUserId);
      if (existingRepostId != null) {
        print('‚ö†Ô∏è Repost already exists: $existingRepostId');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞
      final repostId = 'repost-${DateTime.now().millisecondsSinceEpoch}-$currentUserId';

      // –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final currentUserAvatar = _getCurrentUserAvatarUrl(newsProvider, currentUserId);

      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Å—Ç–∞
      final repostData = await _createRepostData(
        originalNews: originalNews,
        repostId: repostId,
        currentUserId: currentUserId,
        currentUserName: currentUserName,
        currentUserAvatar: currentUserAvatar,
      );

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      print('üìã Repost data created:');
      print('   Repost ID: ${repostData['id']}');
      print('   Is repost: ${repostData['is_repost']}');
      print('   Reposted by: ${repostData['reposted_by_name']}');
      print('   Original author: ${repostData['original_author_name']}');
      print('   Original channel: ${repostData['original_channel_name']}');

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ—Å—Ç –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      _addRepostToProvider(newsProvider, repostData);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ—Å—Ç–µ
      await _saveRepostInfo(currentUserId, repostId, originalNewsId);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ InteractionManager
      _updateInteractionManager(originalNewsId, true);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      _notifyRepostStateChanged();

      print('‚úÖ –†–µ–ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: $repostId');

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ—Å—Ç–∞: $e');
      rethrow;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–ø–æ—Å—Ç–∞
  Future<void> cancelRepost({
    required NewsProvider newsProvider,
    required String repostId,
    required String currentUserId,
  }) async {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ä–µ–ø–æ—Å—Ç–∞
      final repostIndex = newsProvider.news.indexWhere((item) =>
      item['id'].toString() == repostId &&
          item['is_repost'] == true);

      if (repostIndex != -1) {
        // –ü–æ–ª—É—á–∞–µ–º original_post_id –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        final originalPostId = newsProvider.news[repostIndex]['original_post_id']?.toString();

        // –£–¥–∞–ª—è–µ–º —Ä–µ–ø–æ—Å—Ç –∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        newsProvider.removeNews(repostIndex);

        // –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        await StorageService.removeRepost(currentUserId, repostId);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ InteractionManager
        if (originalPostId != null) {
          _updateInteractionManager(originalPostId, false);
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        _notifyRepostStateChanged();

        print('‚úÖ –†–µ–ø–æ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω: $repostId');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–ø–æ—Å—Ç–∞: $e');
      rethrow;
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞ (—Å–æ–∑–¥–∞—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å)
  Future<void> toggleRepost({
    required NewsProvider newsProvider,
    required int originalIndex,
    required String currentUserId,
    required String currentUserName,
  }) async {
    try {
      final originalNews = Map<String, dynamic>.from(newsProvider.news[originalIndex]);
      final originalNewsId = originalNews['id'].toString();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–µ–ª–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–ø–æ—Å—Ç —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏
      final existingRepostId = getRepostIdForOriginal(newsProvider, originalNewsId, currentUserId);

      if (existingRepostId != null) {
        // –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ø–æ—Å—Ç
        await cancelRepost(
          newsProvider: newsProvider,
          repostId: existingRepostId,
          currentUserId: currentUserId,
        );
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–ø–æ—Å—Ç
        await createRepost(
          newsProvider: newsProvider,
          originalIndex: originalIndex,
          currentUserId: currentUserId,
          currentUserName: currentUserName,
        );
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–ø–æ—Å—Ç–∞: $e');
      rethrow;
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ä–µ–ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
  String? getRepostIdForOriginal(NewsProvider newsProvider, String originalNewsId, String userId) {
    try {
      final repost = newsProvider.news.firstWhere((item) {
        final newsItem = Map<String, dynamic>.from(item);
        return newsItem['is_repost'] == true &&
            newsItem['reposted_by'] == userId &&
            newsItem['original_post_id'] == originalNewsId;
      });

      return repost['id'].toString();
    } catch (e) {
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  List<dynamic> getUserReposts(NewsProvider newsProvider, String userId) {
    return newsProvider.news.where((item) {
      final newsItem = Map<String, dynamic>.from(item);
      return newsItem['is_repost'] == true &&
          newsItem['reposted_by'] == userId;
    }).toList();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç —Ä–µ–ø–æ—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bool isNewsRepostedByUser(NewsProvider newsProvider, String newsId, String userId) {
    return newsProvider.news.any((item) {
      final newsItem = Map<String, dynamic>.from(item);
      final isRepost = newsItem['is_repost'] == true;
      final isRepostedByUser = newsItem['reposted_by'] == userId;
      final isOriginalPost = newsItem['original_post_id'] == newsId;

      return isRepost && isRepostedByUser && isOriginalPost;
    });
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  String _getCurrentUserAvatarUrl(NewsProvider newsProvider, String userId) {
    final userProfile = newsProvider.getUserProfile(userId);

    if (userProfile?.profileImageFile != null) {
      return userProfile!.profileImageFile!.path;
    } else if (userProfile?.profileImageUrl != null &&
        userProfile!.profileImageUrl!.isNotEmpty) {
      return userProfile.profileImageUrl!;
    } else {
      return _getFallbackAvatarUrl(userProfile?.userName ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    }
  }

  String _getFallbackAvatarUrl(String userName) {
    final avatars = [
      'assets/images/ava_news/ava1.png',
      'assets/images/ava_news/ava2.png',
      'assets/images/ava_news/ava3.png',
      'assets/images/ava_news/ava4.png',
      'assets/images/ava_news/ava5.png',
      'assets/images/ava_news/ava6.png',
      'assets/images/ava_news/ava7.png',
      'assets/images/ava_news/ava8.png',
      'assets/images/ava_news/ava9.png',
      'assets/images/ava_news/ava10.png',
      'assets/images/ava_news/ava11.png',
      'assets/images/ava_news/ava12.png',
    ];

    final index = userName.hashCode.abs() % avatars.length;
    return avatars[index];
  }

  // –í –ö–õ–ê–°–°–ï RepostManager, –ú–ï–¢–û–î _createRepostData
  // –í –ö–õ–ê–°–°–ï RepostManager, –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î _createRepostData
  Future<Map<String, dynamic>> _createRepostData({
    required Map<String, dynamic> originalNews,
    required String repostId,
    required String currentUserId,
    required String currentUserName,
    required String currentUserAvatar,
  }) async {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
    final originalAuthorName = originalNews['author_name']?.toString() ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    final originalAuthorAvatar = originalNews['author_avatar']?.toString() ?? '';
    final originalChannelName = originalNews['channel_name']?.toString() ?? '';
    final isOriginalChannelPost = originalNews['is_channel_post'] == true;

    print('üîÑ Creating repost data:');
    print('   Original author: $originalAuthorName');
    print('   Original channel: $originalChannelName');
    print('   Is channel post: $isOriginalChannelPost');

    return {
      'id': repostId,
      'original_post_id': originalNews['id'].toString(),
      'is_repost': true,
      'reposted_by': currentUserId,
      'reposted_by_name': currentUserName,
      'reposted_at': DateTime.now().toIso8601String(),

      // –î–ê–ù–ù–´–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ü–û–°–¢–ê - –í–ê–ñ–ù–û!
      'original_author_name': originalAuthorName,
      'original_author_avatar': originalAuthorAvatar,
      'original_channel_name': originalChannelName,
      'is_original_channel_post': isOriginalChannelPost,

      // –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
      'title': originalNews['title'] ?? '',
      'description': originalNews['description'] ?? '',
      'image': originalNews['image'] ?? '',
      'hashtags': List<String>.from(originalNews['hashtags'] ?? []),

      // –ê–≤—Ç–æ—Ä —Ä–µ–ø–æ—Å—Ç–∞ (—Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
      'author_name': currentUserName,
      'author_avatar': currentUserAvatar,

      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      'created_at': DateTime.now().toIso8601String(),
      'likes': 0,
      'comments': [],
      'user_tags': <String, String>{},
      'isLiked': false,
      'isBookmarked': false,
      'isFollowing': false,
      'tag_color': _generateColorFromId(repostId).value,
      'is_channel_post': false, // –†–µ–ø–æ—Å—Ç –≤—Å–µ–≥–¥–∞ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç
      'content_type': 'repost',
    };
  }

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  String _getContentTypeFromNews(Map<String, dynamic> news) {
    final title = (news['title']?.toString() ?? '').toLowerCase();
    final description = (news['description']?.toString() ?? '').toLowerCase();

    if (title.contains('–≤–∞–∂–Ω') || title.contains('—Å—Ä–æ—á–Ω')) return 'important';
    if (title.contains('–Ω–æ–≤–æ—Å—Ç—å') || description.contains('–Ω–æ–≤–æ—Å—Ç—å')) return 'news';
    if (title.contains('—Å–ø–æ—Ä—Ç') || description.contains('—Å–ø–æ—Ä—Ç')) return 'sports';
    if (title.contains('—Ç–µ—Ö–Ω') || description.contains('—Ç–µ—Ö–Ω')) return 'tech';
    if (title.contains('—Ä–∞–∑–≤–ª–µ—á') || description.contains('—Ä–∞–∑–≤–ª–µ—á')) return 'entertainment';
    if (title.contains('–æ–±—Ä–∞–∑–æ–≤–∞–Ω') || description.contains('–æ–±—Ä–∞–∑–æ–≤–∞–Ω')) return 'education';

    return 'general';
  }
  void _addRepostToProvider(NewsProvider newsProvider, Map<String, dynamic> repostData) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ addNews –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º context
    // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å context —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥
    newsProvider.addNews(repostData);

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é:
    // newsProvider.news.insert(0, repostData);
    // newsProvider.notifyListeners();
  }

  Future<void> _saveRepostInfo(String userId, String repostId, String originalNewsId) async {
    await StorageService.addRepost(userId, repostId, originalNewsId);
  }

  void _updateInteractionManager(String originalPostId, bool isReposted) {
    final interactionManager = InteractionManager();
    final currentState = interactionManager.getPostState(originalPostId);

    if (currentState != null) {
      interactionManager.updateRepostState(
        postId: originalPostId,
        isReposted: isReposted,
        repostsCount: isReposted ? currentState.repostsCount + 1 : currentState.repostsCount - 1,
      );
    }
  }

  void _notifyRepostStateChanged() {
    _onRepostStateChanged?.call();
    _onRepostUpdated?.call('', false, 0); // –ó–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω—É–∂–¥—ã
  }

  Color _generateColorFromId(String id) {
    final colors = [
      Colors.blue,
      Colors.green,
      Colors.orange,
      Colors.purple,
      Colors.red,
      Colors.teal,
      Colors.pink,
      Colors.indigo,
    ];
    final hash = id.hashCode;
    return colors[hash.abs() % colors.length];
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _onRepostStateChanged = null;
    _onRepostUpdated = null;
    print('üî¥ RepostManager disposed');
  }
}