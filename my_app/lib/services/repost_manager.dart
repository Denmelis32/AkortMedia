// lib/services/repost_manager.dart
import 'package:flutter/material.dart';
import 'package:my_app/providers/news_provider.dart';
import 'package:my_app/services/storage_service.dart';
import 'package:my_app/services/interaction_manager.dart';

class RepostManager {
  static final RepostManager _instance = RepostManager._internal();
  factory RepostManager() => _instance;
  RepostManager._internal();

  // –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
  VoidCallback? _onRepostStateChanged;
  Function(String, bool, int)? _onRepostUpdated;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  void initialize({
    VoidCallback? onRepostStateChanged,
    Function(String, bool, int)? onRepostUpdated,
  }) {
    _onRepostStateChanged = onRepostStateChanged;
    _onRepostUpdated = onRepostUpdated;
    print('‚úÖ RepostManager initialized');
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞
  Future<void> createRepost({
    required NewsProvider newsProvider,
    required int originalIndex,
    required String currentUserId,
    required String currentUserName,
  }) async {
    try {
      final originalNews = Map<String, dynamic>.from(newsProvider.news[originalIndex]);
      final originalNewsId = originalNews['id'].toString();

      print('üîÑ [DEBUG] Starting repost creation:');
      print('   Original news ID: $originalNewsId');
      print('   Current user: $currentUserName ($currentUserId)');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ä–µ–ø–æ—Å—Ç
      final existingRepostId = getRepostIdForOriginal(newsProvider, originalNewsId, currentUserId);
      if (existingRepostId != null) {
        print('‚ö†Ô∏è [DEBUG] Repost already exists: $existingRepostId');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞
      final repostId = 'repost-${DateTime.now().millisecondsSinceEpoch}-$currentUserId';

      // –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final currentUserAvatar = _getCurrentUserAvatarUrl(newsProvider, currentUserId);

      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Å—Ç–∞
      final repostData = await _createRepostData(
        originalNews: originalNews,
        repostId: repostId,
        currentUserId: currentUserId,
        currentUserName: currentUserName,
        currentUserAvatar: currentUserAvatar,
      );

      // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
      print('üîÑ [DEBUG] Repost data before adding:');
      print('   repost_comment: "${repostData['repost_comment']}"');
      print('   comments count: ${(repostData['comments'] as List).length}');
      print('   comments: ${repostData['comments']}');

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ—Å—Ç –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      _addRepostToProvider(newsProvider, repostData);

      // –í–´–ó–´–í–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –°–†–ê–ó–£ –ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø
      _verifyRepostCreation(newsProvider, repostId);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ—Å—Ç–µ
      await _saveRepostInfo(currentUserId, repostId, originalNewsId);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ InteractionManager
      _updateInteractionManager(originalNewsId, true);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      _notifyRepostStateChanged();

      // –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞
      await cleanupDuplicateRepostComments(newsProvider);

      print('‚úÖ [DEBUG] Repost successfully created: $repostId');

    } catch (e) {
      print('‚ùå [DEBUG] Error creating repost: $e');
      rethrow;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–ø–æ—Å—Ç–∞
  Future<void> cancelRepost({
    required NewsProvider newsProvider,
    required String repostId,
    required String currentUserId,
  }) async {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ä–µ–ø–æ—Å—Ç–∞
      final repostIndex = newsProvider.news.indexWhere((item) =>
      item['id'].toString() == repostId &&
          item['is_repost'] == true);

      if (repostIndex != -1) {
        // –ü–æ–ª—É—á–∞–µ–º original_post_id –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        final originalPostId = newsProvider.news[repostIndex]['original_post_id']?.toString();

        // –£–¥–∞–ª—è–µ–º —Ä–µ–ø–æ—Å—Ç –∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        newsProvider.removeNews(repostIndex);

        // –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        await StorageService.removeRepost(currentUserId, repostId);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ InteractionManager
        if (originalPostId != null) {
          _updateInteractionManager(originalPostId, false);
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        _notifyRepostStateChanged();

        // –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã —Ä–µ–ø–æ—Å—Ç–∞
        await cleanupDuplicateRepostComments(newsProvider);

        print('‚úÖ –†–µ–ø–æ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω: $repostId');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–ø–æ—Å—Ç–∞: $e');
      rethrow;
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞ (—Å–æ–∑–¥–∞—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å)
  Future<void> toggleRepost({
    required NewsProvider newsProvider,
    required int originalIndex,
    required String currentUserId,
    required String currentUserName,
  }) async {
    try {
      final originalNews = Map<String, dynamic>.from(newsProvider.news[originalIndex]);
      final originalNewsId = originalNews['id'].toString();

      print('üîÑ [DEBUG] Toggling repost for: $originalNewsId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–µ–ª–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–ø–æ—Å—Ç —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏
      final existingRepostId = getRepostIdForOriginal(newsProvider, originalNewsId, currentUserId);

      if (existingRepostId != null) {
        // –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ø–æ—Å—Ç
        print('üîÑ [DEBUG] Canceling existing repost: $existingRepostId');
        await cancelRepost(
          newsProvider: newsProvider,
          repostId: existingRepostId,
          currentUserId: currentUserId,
        );
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–ø–æ—Å—Ç
        print('üîÑ [DEBUG] Creating new repost');
        await createRepost(
          newsProvider: newsProvider,
          originalIndex: originalIndex,
          currentUserId: currentUserId,
          currentUserName: currentUserName,
        );
      }
    } catch (e) {
      print('‚ùå [DEBUG] Error toggling repost: $e');
      rethrow;
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ä–µ–ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
  String? getRepostIdForOriginal(NewsProvider newsProvider, String originalNewsId, String userId) {
    try {
      final repost = newsProvider.news.firstWhere((item) {
        final newsItem = Map<String, dynamic>.from(item);
        return newsItem['is_repost'] == true &&
            newsItem['reposted_by'] == userId &&
            newsItem['original_post_id'] == originalNewsId;
      });

      return repost['id'].toString();
    } catch (e) {
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  List<dynamic> getUserReposts(NewsProvider newsProvider, String userId) {
    return newsProvider.news.where((item) {
      final newsItem = Map<String, dynamic>.from(item);
      return newsItem['is_repost'] == true &&
          newsItem['reposted_by'] == userId;
    }).toList();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç —Ä–µ–ø–æ—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bool isNewsRepostedByUser(NewsProvider newsProvider, String newsId, String userId) {
    return newsProvider.news.any((item) {
      final newsItem = Map<String, dynamic>.from(item);
      final isRepost = newsItem['is_repost'] == true;
      final isRepostedByUser = newsItem['reposted_by'] == userId;
      final isOriginalPost = newsItem['original_post_id'] == newsId;

      return isRepost && isRepostedByUser && isOriginalPost;
    });
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  String _getCurrentUserAvatarUrl(NewsProvider newsProvider, String userId) {
    final userProfile = newsProvider.getUserProfile(userId);

    if (userProfile?.profileImageFile != null) {
      return userProfile!.profileImageFile!.path;
    } else if (userProfile?.profileImageUrl != null &&
        userProfile!.profileImageUrl!.isNotEmpty) {
      return userProfile.profileImageUrl!;
    } else {
      return _getFallbackAvatarUrl(userProfile?.userName ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    }
  }

  String _getFallbackAvatarUrl(String userName) {
    final avatars = [
      'assets/images/ava_news/ava1.png',
      'assets/images/ava_news/ava2.png',
      'assets/images/ava_news/ava3.png',
      'assets/images/ava_news/ava4.png',
      'assets/images/ava_news/ava5.png',
      'assets/images/ava_news/ava6.png',
      'assets/images/ava_news/ava7.png',
      'assets/images/ava_news/ava8.png',
      'assets/images/ava_news/ava9.png',
      'assets/images/ava_news/ava10.png',
      'assets/images/ava_news/ava11.png',
      'assets/images/ava_news/ava12.png',
    ];

    final index = userName.hashCode.abs() % avatars.length;
    return avatars[index];
  }

  // –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –î–ê–ù–ù–´–• –†–ï–ü–û–°–¢–ê
  Future<Map<String, dynamic>> _createRepostData({
    required Map<String, dynamic> originalNews,
    required String repostId,
    required String currentUserId,
    required String currentUserName,
    required String currentUserAvatar,
  }) async {
    final originalAuthorName = originalNews['author_name']?.toString() ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    final originalAuthorAvatar = originalNews['author_avatar']?.toString() ?? '';
    final originalChannelName = originalNews['channel_name']?.toString() ?? '';
    final isOriginalChannelPost = originalNews['is_channel_post'] == true;

    print('üîÑ [DEBUG] Creating regular repost data:');
    print('   Original author: $originalAuthorName');
    print('   Original channel: $originalChannelName');
    print('   Is channel post: $isOriginalChannelPost');

    return {
      'id': repostId,
      'original_post_id': originalNews['id'].toString(),
      'is_repost': true,
      'reposted_by': currentUserId,
      'reposted_by_name': currentUserName,
      'reposted_at': DateTime.now().toIso8601String(),

      // –î–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
      'original_author_name': originalAuthorName,
      'original_author_avatar': originalAuthorAvatar,
      'original_channel_name': originalChannelName,
      'is_original_channel_post': isOriginalChannelPost,

      // –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
      'title': originalNews['title'] ?? '',
      'description': originalNews['description'] ?? '',
      'image': originalNews['image'] ?? '',
      'hashtags': List<String>.from(originalNews['hashtags'] ?? []),

      // –ê–≤—Ç–æ—Ä —Ä–µ–ø–æ—Å—Ç–∞ (—Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
      'author_name': currentUserName,
      'author_avatar': currentUserAvatar,

      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      'created_at': DateTime.now().toIso8601String(),
      'likes': 0,
      'comments': [], // –í–ê–ñ–ù–û: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      'user_tags': <String, String>{},
      'isLiked': false,
      'isBookmarked': false,
      'isFollowing': false,
      'tag_color': _generateColorFromId(repostId).value,
      'is_channel_post': false, // –†–µ–ø–æ—Å—Ç –≤—Å–µ–≥–¥–∞ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç
      'content_type': 'repost',

      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ä–µ–ø–æ—Å—Ç–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–ø–æ—Å—Ç–∞ –ø—É—Å—Ç–æ–π
      'repost_comment': '',
    };
  }

  // –ú–ï–¢–û–î –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –î–ê–ù–ù–´–• –†–ï–ü–û–°–¢–ê –° –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–ú
  Future<Map<String, dynamic>> _createRepostDataWithComment({
    required Map<String, dynamic> originalNews,
    required String repostId,
    required String currentUserId,
    required String currentUserName,
    required String currentUserAvatar,
    required String comment,
  }) async {
    final originalAuthorName = originalNews['author_name']?.toString() ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    final originalAuthorAvatar = originalNews['author_avatar']?.toString() ?? '';
    final originalChannelName = originalNews['channel_name']?.toString() ?? '';
    final isOriginalChannelPost = originalNews['is_channel_post'] == true;

    print('üîÑ [DEBUG] Creating repost with comment data:');
    print('   Comment: "$comment"');
    print('   Comment length: ${comment.length}');

    // –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    return {
      'id': repostId,
      'original_post_id': originalNews['id'].toString(),
      'is_repost': true,
      'reposted_by': currentUserId,
      'reposted_by_name': currentUserName,
      'reposted_at': DateTime.now().toIso8601String(),
      'repost_comment': comment, // –¢–û–õ–¨–ö–û –∑–¥–µ—Å—å

      // –î–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
      'original_author_name': originalAuthorName,
      'original_author_avatar': originalAuthorAvatar,
      'original_channel_name': originalChannelName,
      'is_original_channel_post': isOriginalChannelPost,

      // –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞
      'title': originalNews['title'] ?? '',
      'description': originalNews['description'] ?? '',
      'image': originalNews['image'] ?? '',
      'hashtags': List<String>.from(originalNews['hashtags'] ?? []),

      // –ê–≤—Ç–æ—Ä —Ä–µ–ø–æ—Å—Ç–∞ (—Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
      'author_name': currentUserName,
      'author_avatar': currentUserAvatar,

      'created_at': DateTime.now().toIso8601String(),
      'likes': 0,
      'comments': [], // –í–ê–ñ–ù–û: –ü–£–°–¢–û–ô –º–∞—Å—Å–∏–≤ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      'user_tags': <String, String>{},
      'isLiked': false,
      'isBookmarked': false,
      'isFollowing': false,
      'tag_color': _generateColorFromId(repostId).value,
      'is_channel_post': false,
      'content_type': 'repost',
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  String _getContentTypeFromNews(Map<String, dynamic> news) {
    final title = (news['title']?.toString() ?? '').toLowerCase();
    final description = (news['description']?.toString() ?? '').toLowerCase();

    if (title.contains('–≤–∞–∂–Ω') || title.contains('—Å—Ä–æ—á–Ω')) return 'important';
    if (title.contains('–Ω–æ–≤–æ—Å—Ç—å') || description.contains('–Ω–æ–≤–æ—Å—Ç—å')) return 'news';
    if (title.contains('—Å–ø–æ—Ä—Ç') || description.contains('—Å–ø–æ—Ä—Ç')) return 'sports';
    if (title.contains('—Ç–µ—Ö–Ω') || description.contains('—Ç–µ—Ö–Ω')) return 'tech';
    if (title.contains('—Ä–∞–∑–≤–ª–µ—á') || description.contains('—Ä–∞–∑–≤–ª–µ—á')) return 'entertainment';
    if (title.contains('–æ–±—Ä–∞–∑–æ–≤–∞–Ω') || description.contains('–æ–±—Ä–∞–∑–æ–≤–∞–Ω')) return 'education';

    return 'general';
  }

  void _addRepostToProvider(NewsProvider newsProvider, Map<String, dynamic> repostData) {
    try {
      final repostId = repostData['id'].toString();
      final isRepost = repostData['is_repost'] == true;
      final repostComment = repostData['repost_comment']?.toString() ?? '';

      print('üîÑ [DEBUG] Adding repost to provider:');
      print('   Repost ID: $repostId');
      print('   Is repost: $isRepost');
      print('   Repost comment: "$repostComment"');
      print('   Comments array: ${repostData['comments']}');

      // –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤
      final cleanRepostData = {
        ...repostData,
        'comments': [], // –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–ø–æ—Å—Ç–æ–≤
      };

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
      if (isRepost && repostComment.isNotEmpty) {
        print('‚úÖ [DEBUG] Ensuring empty comments for repost with comment');
        cleanRepostData['comments'] = [];
      }

      print('üîÑ [DEBUG] Clean repost data:');
      print('   Comments array: ${cleanRepostData['comments']}');
      print('   Comments array length: ${(cleanRepostData['comments'] as List).length}');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
      if (newsProvider.containsNews(repostId)) {
        print('‚ùå [DEBUG] Repost with ID $repostId already exists!');
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      newsProvider.addNews(cleanRepostData);
      print('‚úÖ [DEBUG] Repost successfully added to provider');

    } catch (e) {
      print('‚ùå [DEBUG] Error adding repost to provider: $e');
      rethrow;
    }
  }


  // –í RepostManager –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  Future<void> cleanupExistingRepostDuplicates(NewsProvider newsProvider) async {
    try {
      int cleanedCount = 0;

      for (int i = 0; i < newsProvider.news.length; i++) {
        final newsItem = Map<String, dynamic>.from(newsProvider.news[i]);

        if (newsItem['is_repost'] == true) {
          final repostComment = newsItem['repost_comment']?.toString() ?? '';
          final comments = List<Map<String, dynamic>>.from(newsItem['comments'] ?? []);

          // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–ø–æ—Å—Ç–∞ –ò –æ–±—ã—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - –æ—á–∏—â–∞–µ–º
          if (repostComment.isNotEmpty && comments.isNotEmpty) {
            print('‚ùå [CLEANUP] Found duplication in repost: ${newsItem['id']}');
            print('   Repost comment: "$repostComment"');
            print('   Regular comments: ${comments.length}');

            final cleanItem = {
              ...newsItem,
              'comments': [], // –û—á–∏—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            };

            newsProvider.updateNews(i, cleanItem);
            cleanedCount++;
            print('‚úÖ [CLEANUP] Cleaned repost: ${newsItem['id']}');
          }
        }
      }

      if (cleanedCount > 0) {
        print('üéâ [CLEANUP] Cleaned $cleanedCount reposts with duplication');
      }
    } catch (e) {
      print('‚ùå [CLEANUP] Error cleaning duplicates: $e');
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
  Future<void> createRepostWithComment({
    required NewsProvider newsProvider,
    required int originalIndex,
    required String currentUserId,
    required String currentUserName,
    required String comment,
  }) async {
    try {
      final originalNews = Map<String, dynamic>.from(newsProvider.news[originalIndex]);
      final originalNewsId = originalNews['id'].toString();

      print('üîÑ [DEBUG] Starting repost with comment creation');
      print('   Original ID: $originalNewsId');
      print('   Comment: "$comment"');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ø–æ—Å—Ç
      final existingRepostId = getRepostIdForOriginal(newsProvider, originalNewsId, currentUserId);
      if (existingRepostId != null) {
        print('‚ö†Ô∏è [DEBUG] Repost already exists: $existingRepostId');
        await _updateExistingRepostComment(newsProvider, existingRepostId, comment);
        await cleanupDuplicateRepostComments(newsProvider);
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–ø–æ—Å—Ç
      final repostId = 'repost-${DateTime.now().millisecondsSinceEpoch}-$currentUserId';
      final currentUserAvatar = _getCurrentUserAvatarUrl(newsProvider, currentUserId);

      final repostData = await _createRepostDataWithComment(
        originalNews: originalNews,
        repostId: repostId,
        currentUserId: currentUserId,
        currentUserName: currentUserName,
        currentUserAvatar: currentUserAvatar,
        comment: comment,
      );

      // –î–û–ë–ê–í–õ–Ø–ï–ú —Ä–µ–ø–æ—Å—Ç –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      _addRepostToProvider(newsProvider, repostData);

      // –í–´–ó–´–í–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –°–†–ê–ó–£ –ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø
      _verifyRepostCreation(newsProvider, repostId);

      await _saveRepostInfo(currentUserId, repostId, originalNewsId);
      _updateInteractionManager(originalNewsId, true);
      _notifyRepostStateChanged();
      await cleanupDuplicateRepostComments(newsProvider);

      print('‚úÖ [DEBUG] Repost with comment created: $repostId');

    } catch (e) {
      print('‚ùå [DEBUG] Error creating repost with comment: $e');
      rethrow;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–ø–æ—Å—Ç–∞
  Future<void> _updateExistingRepostComment(NewsProvider newsProvider, String repostId, String comment) async {
    try {
      final repostIndex = newsProvider.news.indexWhere((item) => item['id'].toString() == repostId);
      if (repostIndex != -1) {
        final repost = Map<String, dynamic>.from(newsProvider.news[repostIndex]);

        // –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–ø–æ—Å—Ç–∞, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ–±—ã—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        final updatedRepost = {
          ...repost,
          'repost_comment': comment, // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–ø–æ—Å—Ç–∞
          // –û–±—ã—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        newsProvider.updateNews(repostIndex, updatedRepost);

        // –í–´–ó–´–í–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –ü–û–°–õ–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø
        _verifyRepostCreation(newsProvider, repostId);

        print('‚úÖ Updated comment for existing repost: $repostId');
        print('   New comment: "$comment"');
        print('   Regular comments count: ${(updatedRepost['comments'] as List).length}');
      }
    } catch (e) {
      print('‚ùå Error updating existing repost comment: $e');
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  Future<void> cleanupDuplicateRepostComments(NewsProvider newsProvider) async {
    try {
      int cleanedCount = 0;
      int fixedCount = 0;

      for (int i = 0; i < newsProvider.news.length; i++) {
        final newsItem = Map<String, dynamic>.from(newsProvider.news[i]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ø–æ—Å—Ç—ã
        if (newsItem['is_repost'] == true) {
          final repostComment = newsItem['repost_comment']?.toString();
          final comments = List<Map<String, dynamic>>.from(newsItem['comments'] ?? []);

          print('üîÑ [DEBUG] Checking repost: ${newsItem['id']}');
          print('   Repost comment: "$repostComment"');
          print('   Comments count: ${comments.length}');

          // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–ø–æ—Å—Ç–∞ –ò –æ–±—ã—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - —ç—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
          if (repostComment != null && repostComment.isNotEmpty && comments.isNotEmpty) {
            print('‚ùå [DEBUG] Found duplication in repost: ${newsItem['id']}');
            print('   Will clean ${comments.length} comments');

            // –û—á–∏—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            final updatedNews = {
              ...newsItem,
              'comments': [], // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º
            };

            newsProvider.updateNews(i, updatedNews);
            cleanedCount += comments.length;
            fixedCount++;

            print('‚úÖ [DEBUG] Cleaned repost: ${newsItem['id']}');
          }

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Å repost_comment
          final duplicateComments = comments.where((comment) {
            final commentText = comment['text']?.toString() ?? '';
            return commentText == repostComment;
          }).toList();

          if (duplicateComments.isNotEmpty) {
            print('‚ùå [DEBUG] Found ${duplicateComments.length} exact duplicates');

            final cleanedComments = comments.where((comment) {
              final commentText = comment['text']?.toString() ?? '';
              return commentText != repostComment;
            }).toList();

            if (cleanedComments.length < comments.length) {
              final updatedNews = {
                ...newsItem,
                'comments': cleanedComments,
              };

              newsProvider.updateNews(i, updatedNews);
              cleanedCount += (comments.length - cleanedComments.length);
              fixedCount++;

              print('‚úÖ [DEBUG] Removed ${comments.length - cleanedComments.length} exact duplicates');
            }
          }
        }
      }

      if (cleanedCount > 0 || fixedCount > 0) {
        print('üéâ [DEBUG] Cleanup completed:');
        print('   Fixed reposts: $fixedCount');
        print('   Removed comments: $cleanedCount');
      } else {
        print('‚úÖ [DEBUG] No duplicates found');
      }
    } catch (e) {
      print('‚ùå [DEBUG] Error cleaning duplicate repost comments: $e');
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞
  void _verifyRepostCreation(NewsProvider newsProvider, String repostId) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final index = newsProvider.findNewsIndexById(repostId);
      if (index != -1) {
        final repost = Map<String, dynamic>.from(newsProvider.news[index]);
        print('üîç [VERIFICATION] Repost verification:');
        print('   ID: ${repost['id']}');
        print('   repost_comment: "${repost['repost_comment']}"');
        print('   comments count: ${(repost['comments'] as List).length}');
        print('   comments: ${repost['comments']}');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        final repostComment = repost['repost_comment']?.toString();
        final comments = List<Map<String, dynamic>>.from(repost['comments'] ?? []);

        if (repostComment != null && repostComment.isNotEmpty && comments.isNotEmpty) {
          print('‚ùå [VERIFICATION] DUPLICATION DETECTED!');

          // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
          final cleanRepost = {
            ...repost,
            'comments': [],
          };
          newsProvider.updateNews(index, cleanRepost);
          print('‚úÖ [VERIFICATION] Immediately fixed duplication');
        } else {
          print('‚úÖ [VERIFICATION] No duplication detected');
        }
      }
    });
  }

  void _showRepostUpdateSuccessSnackBar(String comment) {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∏–∑ UI –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    print('‚úÖ Repost comment updated: "$comment"');
  }

  Future<void> _saveRepostInfo(String userId, String repostId, String originalNewsId) async {
    await StorageService.addRepost(userId, repostId, originalNewsId);
  }

  void _updateInteractionManager(String originalPostId, bool isReposted) {
    final interactionManager = InteractionManager();
    final currentState = interactionManager.getPostState(originalPostId);

    if (currentState != null) {
      interactionManager.updateRepostState(
        postId: originalPostId,
        isReposted: isReposted,
        repostsCount: isReposted ? currentState.repostsCount + 1 : currentState.repostsCount - 1,
      );
    }
  }

  void _notifyRepostStateChanged() {
    _onRepostStateChanged?.call();
    _onRepostUpdated?.call('', false, 0); // –ó–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω—É–∂–¥—ã
  }

  Color _generateColorFromId(String id) {
    final colors = [
      Colors.blue,
      Colors.green,
      Colors.orange,
      Colors.purple,
      Colors.red,
      Colors.teal,
      Colors.pink,
      Colors.indigo,
    ];
    final hash = id.hashCode;
    return colors[hash.abs() % colors.length];
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _onRepostStateChanged = null;
    _onRepostUpdated = null;
    print('üî¥ RepostManager disposed');
  }
}