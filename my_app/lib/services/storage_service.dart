// lib/services/storage_service.dart
import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class StorageService {
  // ========== –û–°–ù–û–í–ù–´–ï –ö–õ–Æ–ß–ò ==========
  static const String _newsKey = 'cached_news';
  static const String _likesKey = 'user_likes';
  static const String _bookmarksKey = 'user_bookmarks';
  static const String _userTagsKey = 'user_tags';
  static const String _tagColorsKey = 'tag_colors';
  static const String _dataVersionKey = 'data_version';
  static const String _userProfilesKey = 'user_profiles';
  static const String _appSettingsKey = 'app_settings';

  // ========== –¢–ï–ö–£–©–ê–Ø –í–ï–†–°–ò–Ø –î–ê–ù–ù–´–• ==========
  static const int _currentDataVersion = 3;

  // ========== –ö–õ–Æ–ß–ò –î–õ–Ø –ú–ù–û–ì–û–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ô –°–ò–°–¢–ï–ú–´ ==========
  static String _getUserProfileImageUrlKey(String userId) => 'profile_image_url_$userId';
  static String _getUserProfileImagePathKey(String userId) => 'profile_image_path_$userId';
  static String _getUserCoverImageUrlKey(String userId) => 'cover_image_url_$userId';
  static String _getUserCoverImagePathKey(String userId) => 'cover_image_path_$userId';
  static String _getUserFollowsKey(String userId) => 'user_follows_$userId';
  static String _getUserRepostsKey(String userId) => 'user_reposts_$userId';
  static String _getUserCommentsKey(String userId) => 'user_comments_$userId';

  // ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ú–ò–ì–†–ê–¶–ò–Ø ==========
  static Future<void> initialize() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final currentVersion = prefs.getInt(_dataVersionKey) ?? 1;

      if (currentVersion < _currentDataVersion) {
        print('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –≤–µ—Ä—Å–∏–∏ $currentVersion –Ω–∞ $_currentDataVersion');
        await _migrateData(currentVersion);
        await prefs.setInt(_dataVersionKey, _currentDataVersion);
        print('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      }

      await ensureDataPersistence();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: $e');
    }
  }

  static Future<void> _migrateData(int oldVersion) async {
    try {
      if (oldVersion == 1) {
        await _migrateFromV1ToV2();
      }
      if (oldVersion <= 2) {
        await _migrateFromV2ToV3();
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  static Future<void> _migrateFromV1ToV2() async {
    final prefs = await SharedPreferences.getInstance();

    // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final oldProfileUrl = prefs.getString('profile_image_url');
    final oldProfilePath = prefs.getString('profile_image_file_path');

    if (oldProfileUrl != null || oldProfilePath != null) {
      await saveProfileImageUrl('default_user', oldProfileUrl);
      await saveProfileImageFilePath('default_user', oldProfilePath);
      await prefs.remove('profile_image_url');
      await prefs.remove('profile_image_file_path');
      print('üîÑ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è');
    }
  }

  static Future<void> _migrateFromV2ToV3() async {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    final news = await loadNews();
    if (news.isNotEmpty) {
      final migratedNews = news.map((item) {
        if (item is Map<String, dynamic>) {
          return {
            ...item,
            'migrated_to_v3': true,
            'comments_count': item['comments_count'] ?? (item['comments'] as List).length,
            'reposts_count': item['reposts_count'] ?? 0,
          };
        }
        return item;
      }).toList();

      await saveNews(migratedNews);
      print('üîÑ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤–æ—Å—Ç–∏ –¥–æ –≤–µ—Ä—Å–∏–∏ 3');
    }
  }

  // ========== –ù–û–í–û–°–¢–ò ==========
  static Future<void> saveNews(List<dynamic> news) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      print('üîç DEBUG: Starting saveNews with ${news.length} items');

      final List<Map<String, dynamic>> serializableNews = [];

      for (int i = 0; i < news.length; i++) {
        try {
          final item = news[i];
          if (item is Map) {
            final cleanItem = _convertToPlainMap(item);
            // üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –ú–ï–¢–ê–î–ê–ù–ù–´–ï
            cleanItem['_saved_at'] = DateTime.now().toIso8601String();
            cleanItem['_version'] = _currentDataVersion;
            serializableNews.add(cleanItem);
          }
        } catch (e) {
          print('‚ùå Error processing news item $i: $e');
        }
      }

      final jsonString = json.encode(serializableNews);
      await prefs.setString(_newsKey, jsonString);
      print('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: ${serializableNews.length}');

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: $e');
      // Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º
      try {
        final prefs = await SharedPreferences.getInstance();
        final simpleNews = news.map((item) {
          if (item is Map) {
            return Map<String, dynamic>.from(item);
          }
          return item;
        }).toList();
        await prefs.setString(_newsKey, json.encode(simpleNews));
        print('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º');
      } catch (e2) {
        print('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $e2');
      }
    }
  }

  static Future<List<dynamic>> loadNews() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final data = prefs.getString(_newsKey);
      if (data != null) {
        final cachedData = json.decode(data) as List<dynamic>;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        final userTags = await loadUserTags();
        final tagColors = await loadTagColors();

        final news = cachedData.map((item) {
          final map = item as Map<String, dynamic>;
          final newsId = map['id']?.toString() ?? '';

          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ user_tags
          Map<String, String> updatedUserTags = _convertMapToStringString(map['user_tags'] ?? {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'});

          if (userTags.containsKey(newsId)) {
            final newsTags = userTags[newsId]!;
            if (newsTags['tags'] is Map) {
              updatedUserTags = _convertMapToStringString(newsTags['tags']);
            }
          }

          final tagColor = tagColors[newsId] ?? map['tag_color'] ?? _generateDefaultColor(newsId).value;

          return {
            ...map,
            'hashtags': map['hashtags'] ?? [],
            'user_tags': updatedUserTags,
            'likes': map['likes'] ?? 0,
            'comments': map['comments'] ?? [],
            'isLiked': map['isLiked'] ?? false,
            'isBookmarked': map['isBookmarked'] ?? false,
            'tag_color': tagColor,
            // üÜï –û–ë–ï–°–ü–ï–ß–ò–í–ê–ï–ú –û–ë–†–ê–¢–ù–£–Æ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨
            'comments_count': map['comments_count'] ?? (map['comments'] as List).length,
            'reposts_count': map['reposts_count'] ?? 0,
          };
        }).toList();

        print('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: ${news.length}');
        return news;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: $e');
    }
    return [];
  }

  // üÜï –î–û–ë–ê–í–ò–¢–¨: –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  static Future<void> cleanupOldNews({int daysOld = 30}) async {
    try {
      final cutoffDate = DateTime.now().subtract(Duration(days: daysOld));
      final news = await loadNews();

      final freshNews = news.where((item) {
        if (item is Map<String, dynamic>) {
          final createdAt = DateTime.tryParse(item['created_at'] ?? '');
          final savedAt = DateTime.tryParse(item['_saved_at'] ?? '');
          final relevantDate = createdAt ?? savedAt;
          return relevantDate == null || relevantDate.isAfter(cutoffDate);
        }
        return true;
      }).toList();

      if (freshNews.length < news.length) {
        await saveNews(freshNews);
        print('‚úÖ –û—á–∏—â–µ–Ω–æ ${news.length - freshNews.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: $e');
    }
  }

  // ========== –õ–ê–ô–ö–ò ==========
  static Future<void> saveLikes(Set<String> likedNewsIds) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setStringList(_likesKey, likedNewsIds.toList());
      print('üíñ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–∞–π–∫–æ–≤: ${likedNewsIds.length}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∞–π–∫–æ–≤: $e');
    }
  }

  static Future<Set<String>> loadLikes() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final likes = prefs.getStringList(_likesKey);
      final result = likes != null ? Set<String>.from(likes) : <String>{};
      print('‚ù§Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ª–∞–π–∫–æ–≤: ${result.length}');
      return result;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∞–π–∫–æ–≤: $e');
      return <String>{};
    }
  }

  static Future<void> addLike(String newsId) async {
    try {
      final likes = await loadLikes();
      likes.add(newsId);
      await saveLikes(likes);
      print('‚ûï –õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω: $newsId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–π–∫–∞: $e');
    }
  }

  static Future<void> removeLike(String newsId) async {
    try {
      final likes = await loadLikes();
      likes.remove(newsId);
      await saveLikes(likes);
      print('‚ûñ –õ–∞–π–∫ —É–¥–∞–ª–µ–Ω: $newsId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∞–π–∫–∞: $e');
    }
  }

  // ========== –ó–ê–ö–õ–ê–î–ö–ò ==========
  static Future<void> saveBookmarks(Set<String> bookmarkedNewsIds) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setStringList(_bookmarksKey, bookmarkedNewsIds.toList());
      print('üîñ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞–∫–ª–∞–¥–æ–∫: ${bookmarkedNewsIds.length}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–æ–∫: $e');
    }
  }

  static Future<Set<String>> loadBookmarks() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final bookmarks = prefs.getStringList(_bookmarksKey);
      final result = bookmarks != null ? Set<String>.from(bookmarks) : <String>{};
      print('üìë –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–∫–ª–∞–¥–æ–∫: ${result.length}');
      return result;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–ª–∞–¥–æ–∫: $e');
      return <String>{};
    }
  }

  static Future<void> addBookmark(String newsId) async {
    try {
      final bookmarks = await loadBookmarks();
      bookmarks.add(newsId);
      await saveBookmarks(bookmarks);
      print('üìå –ó–∞–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: $newsId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏: $e');
    }
  }

  static Future<void> removeBookmark(String newsId) async {
    try {
      final bookmarks = await loadBookmarks();
      bookmarks.remove(newsId);
      await saveBookmarks(bookmarks);
      print('üóëÔ∏è –ó–∞–∫–ª–∞–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞: $newsId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏: $e');
    }
  }

  // ========== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –¢–ï–ì–ò ==========
  static Future<void> saveUserTags(Map<String, Map<String, dynamic>> userTags) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final serializedTags = userTags.map((key, value) => MapEntry(key, value));
      await prefs.setString(_userTagsKey, json.encode(serializedTags));
      print('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–µ–≥–æ–≤ –¥–ª—è ${userTags.length} –Ω–æ–≤–æ—Å—Ç–µ–π');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–≥–æ–≤: $e');
    }
  }

  static Future<Map<String, Map<String, dynamic>>> loadUserTags() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final data = prefs.getString(_userTagsKey);

      if (data != null) {
        final decoded = json.decode(data) as Map<String, dynamic>;
        final userTags = <String, Map<String, dynamic>>{};

        decoded.forEach((key, value) {
          if (value is Map<String, dynamic>) {
            userTags[key] = value;
          } else if (value is Map) {
            userTags[key] = Map<String, dynamic>.from(value);
          } else {
            userTags[key] = {
              'tags': {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'},
              'last_updated': DateTime.now().toIso8601String()
            };
          }
        });

        print('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–µ–≥–æ–≤ –¥–ª—è ${userTags.length} –Ω–æ–≤–æ—Å—Ç–µ–π');
        return userTags;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤: $e');
    }
    return {};
  }

  static Future<Map<String, String>> getUserTagsForNews(String newsId) async {
    try {
      final userTags = await loadUserTags();
      if (userTags.containsKey(newsId)) {
        final newsTags = userTags[newsId]!;
        if (newsTags['tags'] is Map) {
          final tagsMap = newsTags['tags'] as Map;
          return tagsMap.map((key, value) =>
              MapEntry(key.toString(), value.toString())
          );
        }
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏: $e');
    }
    return {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'};
  }

  static Future<void> updateUserTag(String newsId, String tagId, String tagName, {int? color}) async {
    try {
      final userTags = await loadUserTags();
      final newsTags = userTags[newsId] ?? {};

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–µ–≥–∏
      Map<String, String> currentTags = {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'};
      if (newsTags['tags'] is Map) {
        final tagsMap = newsTags['tags'] as Map;
        currentTags = tagsMap.map((key, value) =>
            MapEntry(key.toString(), value.toString())
        );
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥
      currentTags[tagId] = tagName;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      newsTags['tags'] = currentTags;
      newsTags['last_updated'] = DateTime.now().toIso8601String();

      if (color != null) {
        newsTags['color'] = color;
        await saveTagColor(newsId, color);
      }

      userTags[newsId] = newsTags;
      await saveUserTags(userTags);
      print('üé® –¢–µ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: $tagName (–Ω–æ–≤–æ—Å—Ç—å: $newsId)');

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞: $e');
    }
  }

  static Future<void> removeUserTags(String newsId) async {
    try {
      final userTags = await loadUserTags();
      userTags.remove(newsId);
      await saveUserTags(userTags);

      await removeTagColor(newsId);
      print('üóëÔ∏è –¢–µ–≥–∏ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏: $newsId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤: $e');
    }
  }

  // ========== –¶–í–ï–¢–ê –¢–ï–ì–û–í ==========
  static Future<void> saveTagColors(Map<String, int> tagColors) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_tagColorsKey, json.encode(tagColors));
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ —Ç–µ–≥–æ–≤: $e');
    }
  }

  static Future<Map<String, int>> loadTagColors() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final data = prefs.getString(_tagColorsKey);
      if (data != null) {
        final decoded = json.decode(data) as Map<String, dynamic>;
        return decoded.map((key, value) => MapEntry(key, value as int));
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–≤–µ—Ç–æ–≤ —Ç–µ–≥–æ–≤: $e');
    }
    return {};
  }

  static Future<void> saveTagColor(String newsId, int color) async {
    try {
      final tagColors = await loadTagColors();
      tagColors[newsId] = color;
      await saveTagColors(tagColors);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–≥–∞: $e');
    }
  }

  static Future<int?> getTagColor(String newsId) async {
    try {
      final tagColors = await loadTagColors();
      return tagColors[newsId];
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–≥–∞: $e');
      return null;
    }
  }

  static Future<void> removeTagColor(String newsId) async {
    try {
      final tagColors = await loadTagColors();
      tagColors.remove(newsId);
      await saveTagColors(tagColors);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–≥–∞: $e');
    }
  }

  // ========== –ü–†–û–§–ò–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==========
  static Future<void> saveUserProfile(String userId, Map<String, dynamic> profile) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final userProfiles = await loadAllUserProfiles();
      userProfiles[userId] = {
        ...profile,
        '_last_updated': DateTime.now().toIso8601String(),
      };
      await prefs.setString(_userProfilesKey, json.encode(userProfiles));
      print('üíæ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
    }
  }

  static Future<Map<String, dynamic>?> loadUserProfile(String userId) async {
    try {
      final userProfiles = await loadAllUserProfiles();
      return userProfiles[userId];
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
      return null;
    }
  }

  static Future<Map<String, Map<String, dynamic>>> loadAllUserProfiles() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final data = prefs.getString(_userProfilesKey);
      if (data != null) {
        final decoded = json.decode(data) as Map<String, dynamic>;
        return decoded.map((key, value) =>
            MapEntry(key, Map<String, dynamic>.from(value))
        );
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $e');
    }
    return {};
  }

  static Future<void> removeUserProfile(String userId) async {
    try {
      final userProfiles = await loadAllUserProfiles();
      userProfiles.remove(userId);
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_userProfilesKey, json.encode(userProfiles));
      print('üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
    }
  }

  // ========== –ê–í–ê–¢–ê–†–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==========
  static Future<void> saveProfileImageUrl(String userId, String? url) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = _getUserProfileImageUrlKey(userId);

      print('üîÑ [STORAGE] Saving profile image URL for user: $userId');
      print('   üì§ URL to save: $url');
      print('   üîë Storage key: $key');

      if (url == null) {
        await prefs.remove(key);
        print('üóëÔ∏è [STORAGE] URL –∞–≤–∞—Ç–∞—Ä–∫–∏ —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
      } else {
        await prefs.setString(key, url);

        // –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø
        final savedValue = prefs.getString(key);
        print('üíæ [STORAGE] URL –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
        print('   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $savedValue');
        print('   üîç –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º: ${savedValue == url}');
      }
    } catch (e) {
      print('‚ùå [STORAGE] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è URL –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
    }
  }

  static Future<String?> loadProfileImageUrl(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = _getUserProfileImageUrlKey(userId);
      final url = prefs.getString(key);

      print('üìÇ [STORAGE] Loading profile image URL for user: $userId');
      print('   üîë Storage key: $key');
      print('   üì• Loaded URL: $url');

      return url;
    } catch (e) {
      print('‚ùå [STORAGE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ URL –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
      return null;
    }
  }

  static Future<void> saveProfileImageFilePath(String userId, String? filePath) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = _getUserProfileImagePathKey(userId);

      print('üîÑ [STORAGE] Saving profile image file path for user: $userId');
      print('   üì§ File path to save: $filePath');
      print('   üîë Storage key: $key');

      if (filePath == null) {
        await prefs.remove(key);
        print('üóëÔ∏è [STORAGE] –§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∫–∏ —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
      } else {
        await prefs.setString(key, filePath);

        // –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
        final savedValue = prefs.getString(key);
        print('üíæ [STORAGE] –§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
        print('   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $savedValue');
        print('   üîç –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º: ${savedValue == filePath}');
      }
    } catch (e) {
      print('‚ùå [STORAGE] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
    }
  }

  static Future<String?> loadProfileImageFilePath(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = _getUserProfileImagePathKey(userId);
      final path = prefs.getString(key);

      print('üìÇ [STORAGE] Loading profile image file path for user: $userId');
      print('   üîë Storage key: $key');
      print('   üì• Loaded path: $path');

      return path;
    } catch (e) {
      print('‚ùå [STORAGE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
      return null;
    }
  }

  // ========== –û–ë–õ–û–ñ–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==========
  static Future<void> saveCoverImageUrl(String userId, String? url) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = _getUserCoverImageUrlKey(userId);
      if (url == null) {
        await prefs.remove(key);
        print('üóëÔ∏è URL –æ–±–ª–æ–∂–∫–∏ —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
      } else {
        await prefs.setString(key, url);
        print('üíæ URL –æ–±–ª–æ–∂–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è URL –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
    }
  }

  static Future<String?> loadCoverImageUrl(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = _getUserCoverImageUrlKey(userId);
      final url = prefs.getString(key);
      print('üìÇ URL –æ–±–ª–æ–∂–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId - $url');
      return url;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ URL –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
      return null;
    }
  }

  static Future<void> saveCoverImageFilePath(String userId, String? filePath) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = _getUserCoverImagePathKey(userId);
      if (filePath == null) {
        await prefs.remove(key);
        print('üóëÔ∏è –§–∞–π–ª –æ–±–ª–æ–∂–∫–∏ —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
      } else {
        await prefs.setString(key, filePath);
        print('üíæ –§–∞–π–ª –æ–±–ª–æ–∂–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
    }
  }

  static Future<String?> loadCoverImageFilePath(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = _getUserCoverImagePathKey(userId);
      final path = prefs.getString(key);
      print('üìÇ –§–∞–π–ª –æ–±–ª–æ–∂–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId - $path');
      return path;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
      return null;
    }
  }

  // ========== –ü–û–î–ü–ò–°–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==========
  static Future<void> addFollow(String userId, String newsId) async {
    try {
      final follows = await loadFollows(userId);
      if (!follows.contains(newsId)) {
        follows.add(newsId);
        final prefs = await SharedPreferences.getInstance();
        final key = _getUserFollowsKey(userId);
        await prefs.setStringList(key, follows);
        print('‚ûï –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $newsId');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
    }
  }

  static Future<void> removeFollow(String userId, String newsId) async {
    try {
      final follows = await loadFollows(userId);
      follows.remove(newsId);
      final prefs = await SharedPreferences.getInstance();
      final key = _getUserFollowsKey(userId);
      await prefs.setStringList(key, follows);
      print('‚ûñ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $newsId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
    }
  }

  static Future<List<String>> loadFollows(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = _getUserFollowsKey(userId);
      final follows = prefs.getStringList(key) ?? [];
      print('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: ${follows.length}');
      return follows;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
      return [];
    }
  }

  // ========== –†–ï–ü–û–°–¢–´ ==========
  static Future<void> addRepost(String userId, String repostId, String originalPostId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = _getUserRepostsKey(userId);

      final existingReposts = await loadReposts(userId);
      existingReposts[repostId] = {
        'repostId': repostId,
        'originalPostId': originalPostId,
        'createdAt': DateTime.now().toIso8601String(),
      };

      await prefs.setString(key, json.encode(existingReposts));
      print('üîÅ –†–µ–ø–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $repostId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞: $e');
    }
  }

  static Future<Map<String, dynamic>> loadReposts(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = _getUserRepostsKey(userId);
      final repostsJson = prefs.getString(key);

      if (repostsJson != null) {
        final Map<String, dynamic> repostsMap = Map<String, dynamic>.from(json.decode(repostsJson));
        return repostsMap;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ø–æ—Å—Ç–æ–≤: $e');
    }

    return {};
  }

  static Future<void> removeRepost(String userId, String repostId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = _getUserRepostsKey(userId);

      final existingReposts = await loadReposts(userId);
      existingReposts.remove(repostId);

      await prefs.setString(key, json.encode(existingReposts));
      print('‚úÖ –†–µ–ø–æ—Å—Ç —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $repostId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞: $e');
    }
  }

  // ========== –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==========
  static Future<void> saveAppSettings(Map<String, dynamic> settings) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_appSettingsKey, json.encode(settings));
      print('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $e');
    }
  }

  static Future<Map<String, dynamic>> loadAppSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final data = prefs.getString(_appSettingsKey);
      if (data != null) {
        return Map<String, dynamic>.from(json.decode(data));
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $e');
    }
    return {
      'theme': 'light',
      'notifications': true,
      'auto_save': true,
      'cache_duration': 7,
    };
  }

  // ========== –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• ==========
  static Future<void> clearUserData(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();

      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prefs.remove(_getUserProfileImageUrlKey(userId));
      await prefs.remove(_getUserProfileImagePathKey(userId));
      await prefs.remove(_getUserCoverImageUrlKey(userId));
      await prefs.remove(_getUserCoverImagePathKey(userId));
      await prefs.remove(_getUserFollowsKey(userId));
      await prefs.remove(_getUserRepostsKey(userId));
      await prefs.remove(_getUserCommentsKey(userId));

      // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      await removeUserProfile(userId);

      print('üßπ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã: $userId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
    }
  }

  static Future<void> clearAllData() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      // –û—á–∏—â–∞–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      await prefs.remove(_newsKey);
      await prefs.remove(_likesKey);
      await prefs.remove(_bookmarksKey);
      await prefs.remove(_userTagsKey);
      await prefs.remove(_tagColorsKey);
      await prefs.remove(_userProfilesKey);
      await prefs.remove(_appSettingsKey);

      // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      final allKeys = prefs.getKeys();
      final userKeys = allKeys.where((key) =>
      key.contains('profile_image_url_') ||
          key.contains('profile_image_path_') ||
          key.contains('cover_image_url_') ||
          key.contains('cover_image_path_') ||
          key.contains('user_follows_') ||
          key.contains('user_reposts_') ||
          key.contains('user_comments_')
      ).toList();

      for (final key in userKeys) {
        await prefs.remove(key);
      }

      print('üßπ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã (–≤–∫–ª—é—á–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ)');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  static Future<void> clearCache() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_newsKey);
      print('üóÇÔ∏è –ö—ç—à –Ω–æ–≤–æ—Å—Ç–µ–π –æ—á–∏—â–µ–Ω');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: $e');
    }
  }

  // ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========
  static Future<Map<String, int>> getStorageStats() async {
    try {
      final news = await loadNews();
      final likes = await loadLikes();
      final bookmarks = await loadBookmarks();
      final userTags = await loadUserTags();
      final tagColors = await loadTagColors();
      final userProfiles = await loadAllUserProfiles();

      return {
        'news_count': news.length,
        'likes_count': likes.length,
        'bookmarks_count': bookmarks.length,
        'tagged_news_count': userTags.length,
        'colored_tags_count': tagColors.length,
        'user_profiles_count': userProfiles.length,
      };
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      return {};
    }
  }

  static Future<Map<String, int>> getUserStorageStats(String userId) async {
    try {
      final profileUrl = await loadProfileImageUrl(userId);
      final profilePath = await loadProfileImageFilePath(userId);
      final coverUrl = await loadCoverImageUrl(userId);
      final coverPath = await loadCoverImageFilePath(userId);
      final follows = await loadFollows(userId);
      final reposts = await loadReposts(userId);

      return {
        'has_profile_image': (profileUrl != null || profilePath != null) ? 1 : 0,
        'has_cover_image': (coverUrl != null || coverPath != null) ? 1 : 0,
        'follows_count': follows.length,
        'reposts_count': reposts.length,
      };
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
      return {};
    }
  }

  // ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========
  static Map<String, dynamic> _convertToPlainMap(dynamic input) {
    if (input is Map<String, dynamic>) {
      return input;
    }

    if (input is Map) {
      final result = <String, dynamic>{};
      input.forEach((key, value) {
        final stringKey = key.toString();

        if (value is Map) {
          result[stringKey] = _convertToPlainMap(value);
        } else if (value is List) {
          result[stringKey] = _convertListToPlain(value);
        } else {
          result[stringKey] = value;
        }
      });
      return result;
    }

    return {};
  }

  static List<dynamic> _convertListToPlain(List<dynamic> list) {
    return list.map((item) {
      if (item is Map) {
        return _convertToPlainMap(item);
      } else if (item is List) {
        return _convertListToPlain(item);
      } else {
        return item;
      }
    }).toList();
  }

  static Map<String, String> _convertMapToStringString(dynamic map) {
    if (map is Map<String, String>) {
      return map;
    }
    if (map is Map) {
      return map.map((key, value) => MapEntry(key.toString(), value.toString()));
    }
    return {'tag1': '–ù–æ–≤—ã–π —Ç–µ–≥'};
  }

  static Color _generateDefaultColor(String id) {
    final colors = [
      const Color(0xFF2196F3), // –°–∏–Ω–∏–π
      const Color(0xFF4CAF50), // –ó–µ–ª–µ–Ω—ã–π
      const Color(0xFFFF9800), // –û—Ä–∞–Ω–∂–µ–≤—ã–π
      const Color(0xFF9C27B0), // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
      const Color(0xFFF44336), // –ö—Ä–∞—Å–Ω—ã–π
      const Color(0xFF00BCD4), // –ë–∏—Ä—é–∑–æ–≤—ã–π
      const Color(0xFFE91E63), // –†–æ–∑–æ–≤—ã–π
      const Color(0xFF795548), // –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
    ];
    final hash = id.hashCode;
    return colors[hash.abs() % colors.length];
  }

  static Future<void> ensureDataPersistence() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final hasData = prefs.containsKey(_newsKey);

      if (!hasData) {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ mock –¥–∞–Ω–Ω—ã–µ
        final mockNews = [
          {
            "id": "1",
            "title": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            "description": "–≠—Ç–æ –≤–∞—à–∞ –ø–µ—Ä–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –ø–æ—Å—Ç—ã!",
            "image": "üëã",
            "likes": 1,
            "author_name": "–°–∏—Å—Ç–µ–º–∞",
            "created_at": DateTime.now().toIso8601String(),
            "comments": [],
            "hashtags": ["–¥–æ–±—Ä–æ–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"],
            "user_tags": {"tag1": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"},
            "isLiked": false,
            "isBookmarked": false,
            "tag_color": Colors.blue.value,
            "is_channel_post": true,
          }
        ];
        await saveNews(mockNews);
      }
    } catch (e) {
      print('‚ùå Error ensuring data persistence: $e');
    }
  }

  // ========== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò ==========
  static Future<void> debugPrintAllUserData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final allKeys = prefs.getKeys();

      print('üîç DEBUG: –í—Å–µ –∫–ª—é—á–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:');
      for (final key in allKeys) {
        final value = prefs.get(key);
        print('   $key: $value');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: $e');
    }
  }

  static Future<void> debugPrintUserData(String userId) async {
    try {
      print('üîç DEBUG: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId:');

      final profileUrl = await loadProfileImageUrl(userId);
      final profilePath = await loadProfileImageFilePath(userId);
      final coverUrl = await loadCoverImageUrl(userId);
      final coverPath = await loadCoverImageFilePath(userId);
      final follows = await loadFollows(userId);
      final reposts = await loadReposts(userId);
      final profile = await loadUserProfile(userId);

      print('   –ê–≤–∞—Ç–∞—Ä URL: $profileUrl');
      print('   –ê–≤–∞—Ç–∞—Ä —Ñ–∞–π–ª: $profilePath');
      print('   –û–±–ª–æ–∂–∫–∞ URL: $coverUrl');
      print('   –û–±–ª–æ–∂–∫–∞ —Ñ–∞–π–ª: $coverPath');
      print('   –ü–æ–¥–ø–∏—Å–∫–∏: $follows (${follows.length})');
      print('   –†–µ–ø–æ—Å—Ç—ã: ${reposts.length}');
      print('   –ü—Ä–æ—Ñ–∏–ª—å: $profile');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }

  // üÜï –î–û–ë–ê–í–ò–¢–¨: –≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
  static Future<String> exportUserData(String userId) async {
    try {
      final data = {
        'userId': userId,
        'exportedAt': DateTime.now().toIso8601String(),
        'version': _currentDataVersion,
        'profile': await loadUserProfile(userId),
        'likes': (await loadLikes()).toList(),
        'bookmarks': (await loadBookmarks()).toList(),
        'follows': await loadFollows(userId),
        'reposts': await loadReposts(userId),
      };

      return json.encode(data);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return '';
    }
  }

  static Future<bool> importUserData(String userId, String jsonData) async {
    try {
      final data = json.decode(jsonData) as Map<String, dynamic>;

      if (data['userId'] == userId) {
        if (data['profile'] != null) {
          await saveUserProfile(userId, Map<String, dynamic>.from(data['profile']));
        }
        if (data['likes'] != null) {
          await saveLikes(Set<String>.from(data['likes']));
        }
        if (data['bookmarks'] != null) {
          await saveBookmarks(Set<String>.from(data['bookmarks']));
        }
        // ... –∏–º–ø–æ—Ä—Ç –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö

        print('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: $userId');
        return true;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
    return false;
  }
}