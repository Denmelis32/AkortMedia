const ydbService = require('./src/services/ydb-service');

const SERVER_CONFIG = {
  timeout: 20000,
  memory: 512,
  coldStart: true
};

let ydbInitialized = false;
let lastInitTime = 0;

async function initializeYDB() {
  const now = Date.now();

  if (ydbInitialized && (now - lastInitTime) < 30000) {
    return true;
  }

  try {
    console.log('üîÑ Fast YDB initialization...');
    await ydbService.init();

    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const testQuery = 'SELECT 1 as test';
    await ydbService.driver.tableClient.withSession(async (session) => {
      await session.executeQuery(testQuery);
    });

    ydbInitialized = true;
    lastInitTime = now;
    console.log('‚úÖ YDB initialized');
    return true;
  } catch (error) {
    console.error('‚ùå YDB init failed:', error.message);
    return false;
  }
}

async function quickHealthCheck() {
  try {
    const isHealthy = await initializeYDB();

    return {
      status: isHealthy ? 'OK' : 'DEGRADED',
      message: isHealthy ? 'Server is running with YDB' : 'YDB connection issues',
      timestamp: new Date().toISOString(),
      coldStart: SERVER_CONFIG.coldStart,
      dataSource: 'YDB'
    };
  } catch (error) {
    return {
      status: 'ERROR',
      message: 'Health check failed',
      timestamp: new Date().toISOString()
    };
  }
}

function successResponse(data, statusCode = 200) {
  const headers = {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type,Authorization,Origin,Accept,X-Requested-With',
    'Access-Control-Allow-Credentials': 'true'
  };

  return {
    statusCode,
    headers,
    body: JSON.stringify({
      success: true,
      data: data,
      source: 'YDB_DATABASE'
    })
  };
}

function errorResponse(message, statusCode = 500) {
  const headers = {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type,Authorization,Origin,Accept,X-Requested-With',
    'Access-Control-Allow-Credentials': 'true'
  };

  return {
    statusCode,
    headers,
    body: JSON.stringify({
      success: false,
      error: message,
      source: 'YDB_DATABASE'
    })
  };
}

function parseBody(event) {
  try {
    return event.body ? JSON.parse(event.body) : {};
  } catch (e) {
    return {};
  }
}

// üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø USER_ID
function getUserIdFromToken(event) {
  try {
    const authHeader = event.headers?.Authorization || event.headers?.authorization;
    console.log('üîë Auth header received:', authHeader ? 'present' : 'missing');

    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('‚ùå No Bearer token found');
      return null;
    }

    const token = authHeader.replace('Bearer ', '');
    console.log('üîë Full token:', token);

    // üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 1: mock-jwt-token format
    if (token.startsWith('mock-jwt-token-')) {
      const userId = token.replace('mock-jwt-token-', '');
      console.log('‚úÖ Extracted user ID from mock token:', userId);
      return userId;
    }

    // üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 2: user_ format from anywhere in token
    const userMatch = token.match(/user_[a-zA-Z0-9_-]+/);
    if (userMatch) {
      const userId = userMatch[0];
      console.log('‚úÖ Extracted user ID from token pattern:', userId);
      return userId;
    }

    // üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 3: try to decode as JWT (if needed)
    try {
      const parts = token.split('.');
      if (parts.length === 3) {
        const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());
        if (payload.userId || payload.sub) {
          const userId = payload.userId || payload.sub;
          console.log('‚úÖ Extracted user ID from JWT:', userId);
          return userId;
        }
      }
    } catch (jwtError) {
      console.log('‚ö†Ô∏è Not a JWT token');
    }

    console.log('‚ùå No user ID found in token');
    return null;
  } catch (error) {
    console.error('‚ùå Error extracting user ID:', error);
    return null;
  }
}

// üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø USER_ID –ò–ó –ü–£–¢–ò
function extractUserIdFromPath(path, event) {
  console.log('üîç extractUserIdFromPath - Input path:', path);
  console.log('üîç Full event for user endpoint:', JSON.stringify({
    path: event.path,
    rawPath: event.rawPath,
    pathParameters: event.pathParameters,
    requestContext: event.requestContext
  }, null, 2));

  // –°–ø–æ—Å–æ–± 1: –ò–∑ pathParameters (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
  if (event.pathParameters && event.pathParameters.userId) {
    const userId = event.pathParameters.userId;
    console.log('‚úÖ Using pathParameters.userId:', userId);
    return userId;
  }

  // –°–ø–æ—Å–æ–± 2: –ò–∑ rawPath (–¥–ª—è API Gateway)
  if (event.rawPath && event.rawPath.startsWith('/users/')) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º userId –∏–∑ –ø—É—Ç–∏ /users/{userId}
    const pathParts = event.rawPath.split('/');
    const userId = pathParts[2]; // ['', 'users', 'userId']
    console.log('‚úÖ Using rawPath userId:', userId);
    return userId;
  }

  // –°–ø–æ—Å–æ–± 3: –ò–∑ requestContext (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
  if (event.requestContext && event.requestContext.http && event.requestContext.http.path) {
    const requestPath = event.requestContext.http.path;
    if (requestPath.startsWith('/users/')) {
      const pathParts = requestPath.split('/');
      const userId = pathParts[2];
      console.log('‚úÖ Using requestContext path userId:', userId);
      return userId;
    }
  }

  // –°–ø–æ—Å–æ–± 4: –ò–∑ path (fallback)
  if (path && path.startsWith('/users/')) {
    const pathParts = path.split('/');
    const userId = pathParts[2];
    console.log('‚úÖ Using path fallback userId:', userId);
    return userId;
  }

  console.log('‚ùå Could not extract userId from path');
  return null;
}

module.exports.handler = async (event, context) => {
  console.log('üöÄ SERVER STARTED - YDB COMPLETE VERSION 2.2.7');

  context.callbackWaitsForEmptyEventLoop = false;
  SERVER_CONFIG.coldStart = !ydbInitialized;

  const headers = {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type,Authorization,Origin,Accept,X-Requested-With',
    'Access-Control-Allow-Credentials': 'true'
  };

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers, body: '' };
  }

  const path = event.path || '';
  const method = event.httpMethod;
  const body = parseBody(event);
  const queryParams = event.queryStringParameters || {};
  const pathParameters = event.pathParameters || {};
  const currentUserId = getUserIdFromToken(event);

  console.log(`üì® ${method} ${path} | User: ${currentUserId || 'anonymous'}`);
  console.log('üîç Path Parameters:', pathParameters);
  console.log('üîç Raw Path:', event.rawPath);
  console.log('üîç Request Context:', event.requestContext);

  // üéØ ROOT ENDPOINT
  if (path === '/' || path === '') {
    try {
      const health = await quickHealthCheck();
      return successResponse({
        message: "News App API is running",
        version: "2.2.7",
        endpoints: [
          "/health", "/getNews", "/register", "/login", "/action",
          "/createNews", "/user/likes", "/user/bookmarks", "/user/reposts",
          "/follow", "/unfollow", "/deleteNews", "/updateNews", "/share",
          "/user/following", "/user/followers", "/users/{userId}", "/getUserProfile"
        ],
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      return successResponse({
        message: "News App API is running (health check failed)",
        timestamp: new Date().toISOString()
      });
    }
  }

  // üéØ HEALTH CHECK
  if (path === '/health' && method === 'GET') {
    try {
      const health = await quickHealthCheck();
      return successResponse(health);
    } catch (error) {
      return successResponse({
        status: 'ERROR',
        message: 'Health check failed',
        timestamp: new Date().toISOString()
      }, 500);
    }
  }

  // üéØ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
  if (path === '/register' && method === 'POST') {
    try {
      console.log('üéØ REGISTER endpoint hit with data:', JSON.stringify(body));

      let userCreated = false;
      let userId = 'user_' + Date.now();
      let userData = {
        id: userId,
        name: body.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        email: body.email || 'user@example.com',
        avatar: ''
      };

      try {
        console.log('üîÑ Attempting to create user in YDB...');
        await ydbService.createUser(userData);
        userCreated = true;
        console.log('‚úÖ User created in YDB');
      } catch (dbError) {
        console.log('‚ö†Ô∏è YDB creation failed, using mock data:', dbError.message);
        userCreated = true;
      }

      const token = 'mock-jwt-token-' + userId;

      return successResponse({
        token: token,
        user: {
          id: userId,
          name: userData.name,
          email: userData.email
        },
        message: userCreated ? 'User registered in YDB' : 'User registered (mock)'
      }, 201);
    } catch (error) {
      console.error('‚ùå Registration error:', error);
      return errorResponse('Registration failed: ' + error.message, 500);
    }
  }

  // üéØ –õ–û–ì–ò–ù - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  if (path === '/login' && method === 'POST') {
    try {
      console.log('üéØ LOGIN endpoint hit with email:', body.email);

      if (!body.email || !body.password) {
        return errorResponse('Email and password are required', 400);
      }

      let user = null;

      try {
        user = await ydbService.findUserByEmail(body.email);
        console.log('üîç YDB user search result:', user ? `Found user: ${user.id}` : 'Not found in YDB');
      } catch (dbError) {
        console.log('‚ö†Ô∏è YDB search failed:', dbError.message);
      }

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ YDB, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!user) {
        console.log('üîÑ Creating temporary user for login...');
        user = {
          id: 'user_' + Date.now(),
          name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          email: body.email
        };

        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ YDB
        try {
          await ydbService.createUser(user);
          console.log('‚úÖ Temporary user created in YDB');
        } catch (createError) {
          console.log('‚ö†Ô∏è Could not create user in YDB, using mock:', createError.message);
        }
      }

      const token = 'mock-jwt-token-' + user.id;

      return successResponse({
        token: token,
        user: {
          id: user.id,
          name: user.name,
          email: user.email
        },
        message: 'Login successful'
      });
    } catch (error) {
      console.error('‚ùå Login error:', error);
      return errorResponse('Login failed: ' + error.message, 500);
    }
  }

  // üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –ù–û–í–û–°–¢–ï–ô - –° –§–ò–ö–°–û–ú –î–õ–Ø –ü–£–°–¢–´–• –î–ê–ù–ù–´–•
  // üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –ù–û–í–û–°–¢–ï–ô –° –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô
  if (path === '/getNews' && method === 'GET') {
    try {
      const page = parseInt(queryParams.page) || 0;
      const limit = Math.min(parseInt(queryParams.limit) || 20, 100); // –ú–∞–∫—Å–∏–º—É–º 100 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

      console.log(`üåê Getting news from YDB - Page: ${page}, Limit: ${limit} for user: ${currentUserId || 'anonymous'}`);

      let news = [];
      try {
        news = await ydbService.getNewsWithSocial(page, limit, currentUserId);
        console.log(`‚úÖ Got ${news.length} news items from YDB for page ${page}`);
      } catch (error) {
        console.error('‚ùå getNews error:', error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        news = getMockNews(limit, currentUserId);
      }

      // –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø—É—Å—Ç—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (news.length === 0 && page === 0) {
        console.log('‚ö†Ô∏è No news found, returning mock data for first page');
        news = getMockNews(limit, currentUserId);
      }

      // üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ü–ê–ì–ò–ù–ê–¶–ò–ò
      const responseData = {
        news: news,
        pagination: {
          page: page,
          limit: limit,
          hasMore: news.length === limit, // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –µ—â–µ
          total: await ydbService.getTotalNewsCount() // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        }
      };

      return successResponse(responseData);
    } catch (error) {
      console.error('‚ùå getNews error:', error);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      return successResponse({
        news: [],
        pagination: {
          page: 0,
          limit: 20,
          hasMore: false,
          total: 0
        }
      });
    }
  }

  // üéØ –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–°–¢–ò
  // üéØ –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–°–¢–ò - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  if (path === '/createNews' && method === 'POST') {
    try {
      if (!currentUserId) {
        return errorResponse('Authentication required', 401);
      }

      console.log('‚úÖ CREATE NEWS endpoint hit by user:', currentUserId);
      console.log('üîç DEBUG: body.author_name =', body.author_name);

      // üéØ –ü–†–û–í–ï–†–ö–ê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ì–û –ü–û–õ–Ø –û–ü–ò–°–ê–ù–ò–Ø
      if (!body.content || body.content.trim().length === 0) {
        return errorResponse('–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 400);
      }

      // üéØ –ü–†–û–í–ï–†–ö–ê –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô –î–õ–ò–ù–´ –û–ü–ò–°–ê–ù–ò–Ø
      if (body.content.trim().length < 4) {
        return errorResponse('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞', 400);
      }

      const authorName = body.author_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä';

      const newsData = {
        title: body.title || '', // üÜï –ü–£–°–¢–ê–Ø –°–¢–†–û–ö–ê –í–ú–ï–°–¢–û "–ù–û–í–ê–Ø –ù–û–í–û–°–¢–¨"
        content: body.content.trim(), // üéØ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï
        author_id: currentUserId,
        author_name: authorName,
        author_avatar: body.author_avatar || '',
        hashtags: body.hashtags || [],
        is_repost: false,
        is_channel_post: false
      };

      console.log('üìù Creating news with author_name:', newsData.author_name);
      console.log('üìù Title (optional):', newsData.title);
      console.log('üìù Content length:', newsData.content.length);

      const createdNews = await ydbService.createNews(newsData);

      return successResponse({
        message: 'News created successfully',
        news: createdNews
      }, 201);
    } catch (error) {
      console.error('‚ùå Create news error:', error);
      console.error('‚ùå Full error details:', {
        message: error.message,
        stack: error.stack,
        name: error.name
      });
      return errorResponse('Failed to create news: ' + error.message, 500);
    }
  }

  // üéØ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô ACTION ENDPOINT
  // üéØ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô ACTION ENDPOINT - –î–û–ë–ê–í–õ–ï–ù REPOST
  if (path === '/action' && method === 'POST') {
    try {
      if (!currentUserId) {
        return errorResponse('Authentication required', 401);
      }

      const { action, newsId, text, author_name } = body;

      if (!action) {
        return errorResponse('Action required', 400);
      }

      console.log(`üéØ User ${currentUserId} performing ${action} on ${newsId}`);

      let result;

      switch (action) {
        case 'like':
          if (!newsId) return errorResponse('News ID required for like', 400);
          try {
            await ydbService.likeNews(newsId, currentUserId);
            await ydbService.updateNewsLikesCount(newsId);
          } catch (error) {
            console.log('‚ö†Ô∏è Like action failed:', error.message);
          }
          result = { message: 'Like added successfully', newsId, userId: currentUserId };
          break;

        case 'unlike':
          if (!newsId) return errorResponse('News ID required for unlike', 400);
          try {
            await ydbService.unlikeNews(newsId, currentUserId);
            await ydbService.updateNewsLikesCount(newsId);
          } catch (error) {
            console.log('‚ö†Ô∏è Unlike action failed:', error.message);
          }
          result = { message: 'Like removed successfully', newsId, userId: currentUserId };
          break;

        case 'bookmark':
          if (!newsId) return errorResponse('News ID required for bookmark', 400);
          try {
            await ydbService.bookmarkNews(newsId, currentUserId);
            await ydbService.updateNewsBookmarksCount(newsId);
          } catch (error) {
            console.log('‚ö†Ô∏è Bookmark action failed:', error.message);
          }
          result = { message: 'Bookmark added successfully', newsId, userId: currentUserId };
          break;

        case 'unbookmark':
          if (!newsId) return errorResponse('News ID required for unbookmark', 400);
          try {
            await ydbService.unbookmarkNews(newsId, currentUserId);
            await ydbService.updateNewsBookmarksCount(newsId);
          } catch (error) {
            console.log('‚ö†Ô∏è Unbookmark action failed:', error.message);
          }
          result = { message: 'Bookmark removed successfully', newsId, userId: currentUserId };
          break;

        // üÜï –î–û–ë–ê–í–õ–ï–ù–´ REPOST –ò UNREPOST
        case 'repost':
          if (!newsId) return errorResponse('News ID required for repost', 400);
          try {
            await ydbService.repostNews(newsId, currentUserId);
            await ydbService.updateNewsRepostsCount(newsId);
          } catch (error) {
            console.log('‚ö†Ô∏è Repost action failed:', error.message);
          }
          result = { message: 'Repost added successfully', newsId, userId: currentUserId };
          break;

        case 'unrepost':
          if (!newsId) return errorResponse('News ID required for unrepost', 400);
          try {
            await ydbService.unrepostNews(newsId, currentUserId);
            await ydbService.updateNewsRepostsCount(newsId);
          } catch (error) {
            console.log('‚ö†Ô∏è Unrepost action failed:', error.message);
          }
          result = { message: 'Repost removed successfully', newsId, userId: currentUserId };
          break;

        // üéØ –ó–ê–©–ò–©–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í
        case 'comment':
          if (!newsId || !text) return errorResponse('News ID and text required for comment', 400);

          try {
            console.log('üí¨ Adding comment with validation...');

            // üéØ –ü–†–û–í–ï–†–ö–ê –î–õ–ò–ù–´ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø
            if (text.length > 1000) {
              return errorResponse('Comment too long (max 1000 characters)', 400);
            }

            // üéØ –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –ù–û–í–û–°–¢–ò
            const newsCheckQuery = `SELECT id FROM news WHERE id = "${newsId}" AND (is_deleted = false OR is_deleted IS NULL)`;
            const { resultSets: newsCheck } = await ydbService.driver.tableClient.withSession(async (session) => {
              return await session.executeQuery(newsCheckQuery);
            });

            const newsExists = ydbService.parseResult(newsCheck);
            if (newsExists.length === 0) {
              return errorResponse('News not found or deleted', 404);
            }

            let comment;
            try {
              comment = await ydbService.addComment(newsId, {
                text: text.trim(),
                author_name: author_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
              }, currentUserId);

              await ydbService.updateNewsCommentsCount(newsId);
            } catch (commentError) {
              console.log('‚ö†Ô∏è Comment creation failed, creating mock comment:', commentError.message);
              comment = {
                id: `comment_mock_${Date.now()}`,
                news_id: newsId,
                user_id: currentUserId,
                user_name: author_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                content: text,
                created_at: new Date().toISOString()
              };
            }

            result = { message: 'Comment added successfully', comment };
          } catch (error) {
            console.error('‚ùå Comment action critical error:', error);
            return errorResponse('Failed to add comment', 500);
          }
          break;

        case 'getComments':
          if (!newsId) return errorResponse('News ID required for getComments', 400);
          let comments = [];
          try {
            comments = await ydbService.getComments(newsId);
          } catch (error) {
            console.log('‚ö†Ô∏è Get comments failed:', error.message);
          }
          result = { comments };
          break;

        default:
          return errorResponse('Unknown action', 400);
      }

      return successResponse(result);
    } catch (error) {
      console.error('‚ùå Action error:', error);
      return errorResponse('Failed to perform action: ' + error.message, 500);
    }
  }

  // üéØ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø
  if (path === '/user/likes' && method === 'GET') {
    try {
      if (!currentUserId) {
        return errorResponse('Authentication required', 401);
      }

      console.log(`‚ù§Ô∏è Getting likes from YDB for user: ${currentUserId}`);

      let likes = [];
      try {
        likes = await ydbService.getUserLikes(currentUserId);
      } catch (error) {
        console.log('‚ö†Ô∏è Get user likes failed:', error.message);
      }

      return successResponse(likes);
    } catch (error) {
      console.error('‚ùå Get user likes error:', error);
      return successResponse([]);
    }
  }

  if (path === '/user/bookmarks' && method === 'GET') {
    try {
      if (!currentUserId) {
        return errorResponse('Authentication required', 401);
      }

      console.log(`üîñ Getting bookmarks from YDB for user: ${currentUserId}`);

      let bookmarks = [];
      try {
        bookmarks = await ydbService.getUserBookmarks(currentUserId);
      } catch (error) {
        console.log('‚ö†Ô∏è Get user bookmarks failed:', error.message);
      }

      return successResponse(bookmarks);
    } catch (error) {
      console.error('‚ùå Get user bookmarks error:', error);
      return successResponse([]);
    }
  }

  if (path === '/user/reposts' && method === 'GET') {
    try {
      if (!currentUserId) {
        return errorResponse('Authentication required', 401);
      }

      console.log(`üîÅ Getting reposts from YDB for user: ${currentUserId}`);

      let reposts = [];
      try {
        reposts = await ydbService.getUserReposts(currentUserId);
      } catch (error) {
        console.log('‚ö†Ô∏è Get user reposts failed:', error.message);
      }

      return successResponse(reposts);
    } catch (error) {
      console.error('‚ùå Get user reposts error:', error);
      return successResponse([]);
    }
  }

  // üéØ –°–û–¶–ò–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
  if (path === '/follow' && method === 'POST') {
    try {
      if (!currentUserId) {
        return errorResponse('Authentication required', 401);
      }

      const { targetUserId } = body;

      if (!targetUserId) {
        return errorResponse('targetUserId is required', 400);
      }

      console.log(`üë• User ${currentUserId} following ${targetUserId}`);

      const result = await ydbService.followUser(currentUserId, targetUserId);

      return successResponse(result);
    } catch (error) {
      console.error('‚ùå Follow error:', error);
      return errorResponse('Failed to follow user: ' + error.message, 500);
    }
  }

  if (path === '/unfollow' && method === 'POST') {
    try {
      if (!currentUserId) {
        return errorResponse('Authentication required', 401);
      }

      const { targetUserId } = body;

      if (!targetUserId) {
        return errorResponse('targetUserId is required', 400);
      }

      console.log(`üë• User ${currentUserId} unfollowing ${targetUserId}`);

      const result = await ydbService.unfollowUser(currentUserId, targetUserId);

      return successResponse(result);
    } catch (error) {
      console.error('‚ùå Unfollow error:', error);
      return errorResponse('Failed to unfollow user: ' + error.message, 500);
    }
  }

  if (path === '/user/following' && method === 'GET') {
    try {
      if (!currentUserId) {
        return errorResponse('Authentication required', 401);
      }

      console.log(`üë• Getting following list for user: ${currentUserId}`);

      let following = [];
      try {
        following = await ydbService.getUserFollowing(currentUserId);
      } catch (error) {
        console.log('‚ö†Ô∏è Get user following failed:', error.message);
      }

      return successResponse(following);
    } catch (error) {
      console.error('‚ùå Get user following error:', error);
      return successResponse([]);
    }
  }

  if (path === '/user/followers' && method === 'GET') {
    try {
      if (!currentUserId) {
        return errorResponse('Authentication required', 401);
      }

      console.log(`üë• Getting followers list for user: ${currentUserId}`);

      let followers = [];
      try {
        followers = await ydbService.getUserFollowers(currentUserId);
      } catch (error) {
        console.log('‚ö†Ô∏è Get user followers failed:', error.message);
      }

      return successResponse(followers);
    } catch (error) {
      console.error('‚ùå Get user followers error:', error);
      return successResponse([]);
    }
  }

  // üéØ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–°–¢–Ø–ú–ò
  if (path === '/deleteNews' && method === 'POST') {
    try {
      if (!currentUserId) {
        return errorResponse('Authentication required', 401);
      }

      const { newsId } = body;

      if (!newsId) {
        return errorResponse('newsId is required', 400);
      }

      console.log(`üóëÔ∏è User ${currentUserId} deleting news: ${newsId}`);

      const result = await ydbService.deleteNews(newsId, currentUserId);

      return successResponse(result);
    } catch (error) {
      console.error('‚ùå Delete news error:', error);
      return errorResponse('Failed to delete news: ' + error.message, 500);
    }
  }

  if (path === '/updateNews' && method === 'POST') {
    try {
      if (!currentUserId) {
        return errorResponse('Authentication required', 401);
      }

      const { newsId, updateData } = body;

      if (!newsId || !updateData) {
        return errorResponse('newsId and updateData are required', 400);
      }

      console.log(`‚úèÔ∏è User ${currentUserId} updating news: ${newsId}`);

      const result = await ydbService.updateNews(newsId, currentUserId, updateData);

      return successResponse(result);
    } catch (error) {
      console.error('‚ùå Update news error:', error);
      return errorResponse('Failed to update news: ' + error.message, 500);
    }
  }

  if (path === '/share' && method === 'POST') {
    try {
      if (!currentUserId) {
        return errorResponse('Authentication required', 401);
      }

      const { newsId } = body;

      if (!newsId) {
        return errorResponse('newsId is required', 400);
      }

      console.log(`üì§ User ${currentUserId} sharing news: ${newsId}`);

      const result = await ydbService.shareNews(newsId);

      return successResponse(result);
    } catch (error) {
      console.error('‚ùå Share news error:', error);
      return errorResponse('Failed to share news: ' + error.message, 500);
    }
  }

  // üéØ –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ß–ï–†–ï–ó QUERY PARAM
  if (path === '/getUserProfile' && method === 'GET') {
    try {
      const { userId } = queryParams;

      if (!userId) {
        return errorResponse('User ID is required', 400);
      }

      console.log(`üë§ Getting user profile for: ${userId}`);

      let user = null;
      try {
        user = await ydbService.findUserById(userId);
        console.log('üîç User lookup result:', user ? 'Found' : 'Not found');
      } catch (error) {
        console.log('‚ö†Ô∏è Get user failed:', error.message);
      }

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      if (!user) {
        console.log('üîÑ User not found in YDB, creating basic profile');
        user = {
          id: userId,
          name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          email: `${userId}@example.com`,
          avatar: '',
          created_at: new Date().toISOString()
        };
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
      const safeUser = {
        id: String(user.id || userId),
        name: String(user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
        email: String(user.email || `${userId}@example.com`),
        avatar: String(user.avatar || ''),
        created_at: String(user.created_at || new Date().toISOString())
      };

      console.log('‚úÖ Returning user data:', safeUser);
      return successResponse(safeUser);
    } catch (error) {
      console.error('‚ùå Get user error:', error);
      return errorResponse('Failed to get user: ' + error.message, 500);
    }
  }

  // üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  if (path.startsWith('/users/') && method === 'GET') {
    try {
      console.log('üîç USER ENDPOINT - ENHANCED DIAGNOSTICS:');

      const userId = extractUserIdFromPath(path, event);
      console.log('üîç Extracted userId:', userId);

      if (!userId || userId === '{userId}' || userId === 'userId' || userId.includes('{')) {
        console.log('‚ùå Invalid userId extracted:', userId);
        return errorResponse('Valid User ID is required', 400);
      }

      console.log(`üë§ Final userId for lookup: ${userId}`);

      let user = null;
      try {
        user = await ydbService.findUserById(userId);
        console.log('üîç User lookup result:', user ? 'Found' : 'Not found');
      } catch (error) {
        console.log('‚ö†Ô∏è Get user failed:', error.message);
      }

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      if (!user) {
        console.log('üîÑ User not found in YDB, creating basic profile');
        user = {
          id: userId,
          name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          email: `${userId}@example.com`,
          avatar: '',
          created_at: new Date().toISOString()
        };
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
      const safeUser = {
        id: String(user.id || userId),
        name: String(user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
        email: String(user.email || `${userId}@example.com`),
        avatar: String(user.avatar || ''),
        created_at: String(user.created_at || new Date().toISOString())
      };

      console.log('‚úÖ Returning user data:', safeUser);
      return successResponse(safeUser);
    } catch (error) {
      console.error('‚ùå Get user error:', error);
      return errorResponse('Failed to get user: ' + error.message, 500);
    }
  }

  console.log('‚ùå Endpoint not found:', path);
  return errorResponse('Endpoint not found: ' + path, 404);
};

// üéØ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ú–û–ö –î–ê–ù–ù–´–• –ù–û–í–û–°–¢–ï–ô
function getMockNews(limit, currentUserId) {
  const mockNews = Array.from({length: Math.min(limit, 10)}, (_, i) => ({
    id: `news_mock_${Date.now()}_${i}`,
    title: `–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å ${i + 1}`,
    content: `–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä ${i + 1}. –ù–æ–≤–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã API.`,
    author_id: `user_${i % 5}`,
    author_name: ['–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', '–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤', '–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞', '–î–º–∏—Ç—Ä–∏–π –ö—É–∑–Ω–µ—Ü–æ–≤'][i % 5],
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    likes: Math.floor(Math.random() * 100),
    likes_count: Math.floor(Math.random() * 100),
    reposts: Math.floor(Math.random() * 50),
    reposts_count: Math.floor(Math.random() * 50),
    comments_count: Math.floor(Math.random() * 30),
    bookmarks_count: Math.floor(Math.random() * 20),
    share_count: Math.floor(Math.random() * 10),
    isLiked: currentUserId ? Math.random() > 0.7 : false,
    isBookmarked: currentUserId ? Math.random() > 0.8 : false,
    isReposted: currentUserId ? Math.random() > 0.9 : false,
    isFollowing: currentUserId ? Math.random() > 0.6 : false,
    hashtags: ['–Ω–æ–≤–æ—Å—Ç–∏', '—Ç–µ—Å—Ç', 'api'],
    comments: [],
    source: 'MOCK_DATA'
  }));

  return mockNews;
}