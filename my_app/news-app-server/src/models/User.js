const { query } = require('../config/database');
const jwt = require('jsonwebtoken');

class User {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async create(userData) {
    try {
      const { email, password, name } = userData;

      console.log('üë§ Creating user:', { email, name });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await query(
        'SELECT id FROM users WHERE email = $1',
        [email]
      );

      if (existingUser.rows.length > 0) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –∫–∞–∫ –µ—Å—Ç—å (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
      const result = await query(
        `INSERT INTO users (email, password, name)
         VALUES ($1, $2, $3) RETURNING id, email, name, created_at`,
        [email, password, name]
      );

      console.log('‚úÖ User created with ID:', result.rows[0].id);
      return result.rows[0];
    } catch (error) {
      console.error('‚ùå User creation error:', error);
      throw error;
    }
  }

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
  static async findByEmail(email) {
    try {
      const result = await query(
        'SELECT * FROM users WHERE email = $1',
        [email]
      );
      return result.rows[0];
    } catch (error) {
      console.error('Find user error:', error);
      throw error;
    }
  }

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  static async findById(id) {
    const result = await query(
      `SELECT id, email, name, avatar_url, cover_url, created_at
       FROM users WHERE id = $1`,
      [id]
    );
    return result.rows[0];
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
  static async checkPassword(plainPassword, storedPassword) {
    // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return plainPassword === storedPassword;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
  static generateToken(user) {
    return jwt.sign(
      {
        userId: user.id,
        email: user.email
      },
      process.env.JWT_SECRET,
      { expiresIn: '30d' }
    );
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  static async updateProfile(userId, updateData) {
    const { name, avatar_url, cover_url } = updateData;

    const result = await query(
      `UPDATE users
       SET name = $1, avatar_url = $2, cover_url = $3, updated_at = CURRENT_TIMESTAMP
       WHERE id = $4
       RETURNING id, email, name, avatar_url, cover_url`,
      [name, avatar_url, cover_url, userId]
    );

    return result.rows[0];
  }
}

module.exports = User;
